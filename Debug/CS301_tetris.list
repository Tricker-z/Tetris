
CS301_tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001844  0800ac88  0800ac88  0001ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4cc  0800c4cc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4cc  0800c4cc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4cc  0800c4cc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d0  0800c4d0  0001c4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000098  0800c56c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800c56c  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a7  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002046  00000000  00000000  0002aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f16  00000000  00000000  0002dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3ea  00000000  00000000  00044c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f1eb  00000000  00000000  0004f060  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000ce2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000098 	.word	0x20000098
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ac70 	.word	0x0800ac70

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000009c 	.word	0x2000009c
 8000224:	0800ac70 	.word	0x0800ac70

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fd67 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f009 fea6 	bl	800a770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fd7f 	bl	8001552 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 fd47 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000030 	.word	0x20000030
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000460 	.word	0x20000460

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000460 	.word	0x20000460

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0ce      	b.n	8000ccc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d109      	bne.n	8000b50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f002 f906 	bl	8002d5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 fbc3 	bl	80012dc <ADC_ConversionStop_Disable>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 80a9 	bne.w	8000cba <HAL_ADC_Init+0x1ae>
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 80a5 	bne.w	8000cba <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b78:	f023 0302 	bic.w	r3, r3, #2
 8000b7c:	f043 0202 	orr.w	r2, r3, #2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4951      	ldr	r1, [pc, #324]	; (8000cd4 <HAL_ADC_Init+0x1c8>)
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d10a      	bne.n	8000ba8 <HAL_ADC_Init+0x9c>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b9a:	d002      	beq.n	8000ba2 <HAL_ADC_Init+0x96>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	e004      	b.n	8000bac <HAL_ADC_Init+0xa0>
 8000ba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ba6:	e001      	b.n	8000bac <HAL_ADC_Init+0xa0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7b1b      	ldrb	r3, [r3, #12]
 8000bb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc4:	d003      	beq.n	8000bce <HAL_ADC_Init+0xc2>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d102      	bne.n	8000bd4 <HAL_ADC_Init+0xc8>
 8000bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd2:	e000      	b.n	8000bd6 <HAL_ADC_Init+0xca>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7d1b      	ldrb	r3, [r3, #20]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d119      	bne.n	8000c18 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7b1b      	ldrb	r3, [r3, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	035a      	lsls	r2, r3, #13
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	e00b      	b.n	8000c18 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f043 0220 	orr.w	r2, r3, #32
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c10:	f043 0201 	orr.w	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_ADC_Init+0x1cc>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c48:	d003      	beq.n	8000c52 <HAL_ADC_Init+0x146>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d104      	bne.n	8000c5c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	051b      	lsls	r3, r3, #20
 8000c5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_ADC_Init+0x1d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d10b      	bne.n	8000c98 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f023 0303 	bic.w	r3, r3, #3
 8000c8e:	f043 0201 	orr.w	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c96:	e018      	b.n	8000cca <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f023 0312 	bic.w	r3, r3, #18
 8000ca0:	f043 0210 	orr.w	r2, r3, #16
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	f043 0201 	orr.w	r2, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb8:	e007      	b.n	8000cca <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f043 0210 	orr.w	r2, r3, #16
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013c00 	.word	0x40013c00
 8000cd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cdc:	ff1f0efe 	.word	0xff1f0efe

08000ce0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Start+0x1a>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e098      	b.n	8000e2c <HAL_ADC_Start+0x14c>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 fa98 	bl	8001238 <ADC_Enable>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8087 	bne.w	8000e22 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a41      	ldr	r2, [pc, #260]	; (8000e34 <HAL_ADC_Start+0x154>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_Start+0x5e>
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_ADC_Start+0x158>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d115      	bne.n	8000d6a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d026      	beq.n	8000da6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d68:	e01d      	b.n	8000da6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_ADC_Start+0x158>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <HAL_ADC_Start+0xaa>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <HAL_ADC_Start+0x154>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_ADC_Start+0xc6>
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <HAL_ADC_Start+0x158>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f023 0206 	bic.w	r2, r3, #6
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dbe:	e002      	b.n	8000dc6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f06f 0202 	mvn.w	r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000de2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000de6:	d113      	bne.n	8000e10 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <HAL_ADC_Start+0x154>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d105      	bne.n	8000dfe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_ADC_Start+0x158>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d108      	bne.n	8000e10 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	e00c      	b.n	8000e2a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	e003      	b.n	8000e2a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012800 	.word	0x40012800
 8000e38:	40012400 	.word	0x40012400

08000e3c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e52:	f7ff fe2f 	bl	8000ab4 <HAL_GetTick>
 8000e56:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00b      	beq.n	8000e7e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f043 0220 	orr.w	r2, r3, #32
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0c8      	b.n	8001010 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12a      	bne.n	8000ee2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d123      	bne.n	8000ee2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e9a:	e01a      	b.n	8000ed2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea2:	d016      	beq.n	8000ed2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d007      	beq.n	8000eba <HAL_ADC_PollForConversion+0x7e>
 8000eaa:	f7ff fe03 	bl	8000ab4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d20b      	bcs.n	8000ed2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f043 0204 	orr.w	r2, r3, #4
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e09e      	b.n	8001010 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0dd      	beq.n	8000e9c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ee0:	e06c      	b.n	8000fbc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_ADC_PollForConversion+0x1dc>)
 8000ee4:	681c      	ldr	r4, [r3, #0]
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f001 fab4 	bl	8002454 <HAL_RCCEx_GetPeriphCLKFreq>
 8000eec:	4603      	mov	r3, r0
 8000eee:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6919      	ldr	r1, [r3, #16]
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <HAL_ADC_PollForConversion+0x1e0>)
 8000efa:	400b      	ands	r3, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d118      	bne.n	8000f32 <HAL_ADC_PollForConversion+0xf6>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68d9      	ldr	r1, [r3, #12]
 8000f06:	4b46      	ldr	r3, [pc, #280]	; (8001020 <HAL_ADC_PollForConversion+0x1e4>)
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d111      	bne.n	8000f32 <HAL_ADC_PollForConversion+0xf6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <HAL_ADC_PollForConversion+0x1e8>)
 8000f16:	400b      	ands	r3, r1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d108      	bne.n	8000f2e <HAL_ADC_PollForConversion+0xf2>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <HAL_ADC_PollForConversion+0x1ec>)
 8000f24:	400b      	ands	r3, r1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_PollForConversion+0xf2>
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	e020      	b.n	8000f70 <HAL_ADC_PollForConversion+0x134>
 8000f2e:	2329      	movs	r3, #41	; 0x29
 8000f30:	e01e      	b.n	8000f70 <HAL_ADC_PollForConversion+0x134>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6919      	ldr	r1, [r3, #16]
 8000f38:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <HAL_ADC_PollForConversion+0x1e8>)
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <HAL_ADC_PollForConversion+0x112>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68d9      	ldr	r1, [r3, #12]
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_ADC_PollForConversion+0x1ec>)
 8000f48:	400b      	ands	r3, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00d      	beq.n	8000f6a <HAL_ADC_PollForConversion+0x12e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6919      	ldr	r1, [r3, #16]
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <HAL_ADC_PollForConversion+0x1f0>)
 8000f56:	400b      	ands	r3, r1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d108      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x132>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68d9      	ldr	r1, [r3, #12]
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_ADC_PollForConversion+0x1f0>)
 8000f64:	400b      	ands	r3, r1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x132>
 8000f6a:	2354      	movs	r3, #84	; 0x54
 8000f6c:	e000      	b.n	8000f70 <HAL_ADC_PollForConversion+0x134>
 8000f6e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f76:	e01d      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	d016      	beq.n	8000fae <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <HAL_ADC_PollForConversion+0x15a>
 8000f86:	f7ff fd95 	bl	8000ab4 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d20b      	bcs.n	8000fae <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f043 0204 	orr.w	r2, r3, #4
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e030      	b.n	8001010 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8dd      	bhi.n	8000f78 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0212 	mvn.w	r2, #18
 8000fc4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fdc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fe0:	d115      	bne.n	800100e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d111      	bne.n	800100e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f043 0201 	orr.w	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	20000030 	.word	0x20000030
 800101c:	24924924 	.word	0x24924924
 8001020:	00924924 	.word	0x00924924
 8001024:	12492492 	.word	0x12492492
 8001028:	00492492 	.word	0x00492492
 800102c:	00249249 	.word	0x00249249

08001030 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x20>
 8001064:	2302      	movs	r3, #2
 8001066:	e0dc      	b.n	8001222 <HAL_ADC_ConfigChannel+0x1da>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d81c      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	3b05      	subs	r3, #5
 800108a:	221f      	movs	r2, #31
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4019      	ands	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b05      	subs	r3, #5
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	e03c      	b.n	800112c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d81c      	bhi.n	80010f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b23      	subs	r3, #35	; 0x23
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4019      	ands	r1, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b23      	subs	r3, #35	; 0x23
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
 80010f2:	e01b      	b.n	800112c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	3b41      	subs	r3, #65	; 0x41
 8001106:	221f      	movs	r2, #31
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b41      	subs	r3, #65	; 0x41
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d91c      	bls.n	800116e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68d9      	ldr	r1, [r3, #12]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3b1e      	subs	r3, #30
 8001146:	2207      	movs	r2, #7
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6898      	ldr	r0, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	3b1e      	subs	r3, #30
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	e019      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d003      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d132      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_ADC_ConfigChannel+0x1e4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d125      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d126      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d11a      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_ConfigChannel+0x1e8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_ADC_ConfigChannel+0x1ec>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9a      	lsrs	r2, r3, #18
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f8:	e002      	b.n	8001200 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x1b2>
 8001206:	e007      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40012400 	.word	0x40012400
 8001230:	20000030 	.word	0x20000030
 8001234:	431bde83 	.word	0x431bde83

08001238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d039      	beq.n	80012ca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <ADC_Enable+0x9c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <ADC_Enable+0xa0>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9b      	lsrs	r3, r3, #18
 8001272:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001274:	e002      	b.n	800127c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3b01      	subs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001282:	f7ff fc17 	bl	8000ab4 <HAL_GetTick>
 8001286:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001288:	e018      	b.n	80012bc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800128a:	f7ff fc13 	bl	8000ab4 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d911      	bls.n	80012bc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f043 0210 	orr.w	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e007      	b.n	80012cc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1df      	bne.n	800128a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000030 	.word	0x20000030
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d127      	bne.n	8001346 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001306:	f7ff fbd5 	bl	8000ab4 <HAL_GetTick>
 800130a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130c:	e014      	b.n	8001338 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130e:	f7ff fbd1 	bl	8000ab4 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d90d      	bls.n	8001338 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f043 0210 	orr.w	r2, r3, #16
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e007      	b.n	8001348 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b01      	cmp	r3, #1
 8001344:	d0e3      	beq.n	800130e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4906      	ldr	r1, [pc, #24]	; (80013e8 <__NVIC_EnableIRQ+0x34>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff2d 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff42 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff35 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800157e:	2b02      	cmp	r3, #2
 8001580:	d005      	beq.n	800158e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e0d6      	b.n	800173c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 020e 	bic.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_DMA_Abort_IT+0x1dc>)
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d958      	bls.n	800166c <HAL_DMA_Abort_IT+0x100>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <HAL_DMA_Abort_IT+0x1e0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04f      	beq.n	8001664 <HAL_DMA_Abort_IT+0xf8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a61      	ldr	r2, [pc, #388]	; (8001750 <HAL_DMA_Abort_IT+0x1e4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d048      	beq.n	8001660 <HAL_DMA_Abort_IT+0xf4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a60      	ldr	r2, [pc, #384]	; (8001754 <HAL_DMA_Abort_IT+0x1e8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d040      	beq.n	800165a <HAL_DMA_Abort_IT+0xee>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_DMA_Abort_IT+0x1ec>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d038      	beq.n	8001654 <HAL_DMA_Abort_IT+0xe8>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5d      	ldr	r2, [pc, #372]	; (800175c <HAL_DMA_Abort_IT+0x1f0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d030      	beq.n	800164e <HAL_DMA_Abort_IT+0xe2>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <HAL_DMA_Abort_IT+0x1f4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d028      	beq.n	8001648 <HAL_DMA_Abort_IT+0xdc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a53      	ldr	r2, [pc, #332]	; (8001748 <HAL_DMA_Abort_IT+0x1dc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d020      	beq.n	8001642 <HAL_DMA_Abort_IT+0xd6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_DMA_Abort_IT+0x1f8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_DMA_Abort_IT+0xd2>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a56      	ldr	r2, [pc, #344]	; (8001768 <HAL_DMA_Abort_IT+0x1fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d012      	beq.n	800163a <HAL_DMA_Abort_IT+0xce>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a54      	ldr	r2, [pc, #336]	; (800176c <HAL_DMA_Abort_IT+0x200>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00a      	beq.n	8001634 <HAL_DMA_Abort_IT+0xc8>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a53      	ldr	r2, [pc, #332]	; (8001770 <HAL_DMA_Abort_IT+0x204>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d102      	bne.n	800162e <HAL_DMA_Abort_IT+0xc2>
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	e01b      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 800162e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001632:	e018      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	e015      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 800163a:	2310      	movs	r3, #16
 800163c:	e013      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 800163e:	2301      	movs	r3, #1
 8001640:	e011      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001646:	e00e      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800164c:	e00b      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 800164e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001652:	e008      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	e005      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	e002      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001660:	2310      	movs	r3, #16
 8001662:	e000      	b.n	8001666 <HAL_DMA_Abort_IT+0xfa>
 8001664:	2301      	movs	r3, #1
 8001666:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_DMA_Abort_IT+0x208>)
 8001668:	6053      	str	r3, [r2, #4]
 800166a:	e057      	b.n	800171c <HAL_DMA_Abort_IT+0x1b0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a36      	ldr	r2, [pc, #216]	; (800174c <HAL_DMA_Abort_IT+0x1e0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04f      	beq.n	8001716 <HAL_DMA_Abort_IT+0x1aa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_DMA_Abort_IT+0x1e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d048      	beq.n	8001712 <HAL_DMA_Abort_IT+0x1a6>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a33      	ldr	r2, [pc, #204]	; (8001754 <HAL_DMA_Abort_IT+0x1e8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Abort_IT+0x1a0>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_DMA_Abort_IT+0x1ec>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d038      	beq.n	8001706 <HAL_DMA_Abort_IT+0x19a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_DMA_Abort_IT+0x1f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d030      	beq.n	8001700 <HAL_DMA_Abort_IT+0x194>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <HAL_DMA_Abort_IT+0x1f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d028      	beq.n	80016fa <HAL_DMA_Abort_IT+0x18e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <HAL_DMA_Abort_IT+0x1dc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d020      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x188>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <HAL_DMA_Abort_IT+0x1f8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d019      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x184>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_DMA_Abort_IT+0x1fc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d012      	beq.n	80016ec <HAL_DMA_Abort_IT+0x180>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_DMA_Abort_IT+0x200>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00a      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x17a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_DMA_Abort_IT+0x204>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d102      	bne.n	80016e0 <HAL_DMA_Abort_IT+0x174>
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	e01b      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	e018      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	e015      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016ec:	2310      	movs	r3, #16
 80016ee:	e013      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e011      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f8:	e00e      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 80016fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016fe:	e00b      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 8001700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001704:	e008      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	e005      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 800170c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001710:	e002      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 8001712:	2310      	movs	r3, #16
 8001714:	e000      	b.n	8001718 <HAL_DMA_Abort_IT+0x1ac>
 8001716:	2301      	movs	r3, #1
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_DMA_Abort_IT+0x20c>)
 800171a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
    } 
  }
  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020080 	.word	0x40020080
 800174c:	40020008 	.word	0x40020008
 8001750:	4002001c 	.word	0x4002001c
 8001754:	40020030 	.word	0x40020030
 8001758:	40020044 	.word	0x40020044
 800175c:	40020058 	.word	0x40020058
 8001760:	4002006c 	.word	0x4002006c
 8001764:	40020408 	.word	0x40020408
 8001768:	4002041c 	.word	0x4002041c
 800176c:	40020430 	.word	0x40020430
 8001770:	40020444 	.word	0x40020444
 8001774:	40020400 	.word	0x40020400
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e133      	b.n	80019f8 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8122 	bne.w	80019f2 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d034      	beq.n	8001820 <HAL_GPIO_Init+0xa4>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d80d      	bhi.n	80017d6 <HAL_GPIO_Init+0x5a>
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d02b      	beq.n	8001816 <HAL_GPIO_Init+0x9a>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d804      	bhi.n	80017cc <HAL_GPIO_Init+0x50>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d031      	beq.n	800182a <HAL_GPIO_Init+0xae>
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d01c      	beq.n	8001804 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e048      	b.n	800185e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d043      	beq.n	8001858 <HAL_GPIO_Init+0xdc>
 80017d0:	2b11      	cmp	r3, #17
 80017d2:	d01b      	beq.n	800180c <HAL_GPIO_Init+0x90>
          break;
 80017d4:	e043      	b.n	800185e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017d6:	4a8f      	ldr	r2, [pc, #572]	; (8001a14 <HAL_GPIO_Init+0x298>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d026      	beq.n	800182a <HAL_GPIO_Init+0xae>
 80017dc:	4a8d      	ldr	r2, [pc, #564]	; (8001a14 <HAL_GPIO_Init+0x298>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d806      	bhi.n	80017f0 <HAL_GPIO_Init+0x74>
 80017e2:	4a8d      	ldr	r2, [pc, #564]	; (8001a18 <HAL_GPIO_Init+0x29c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d020      	beq.n	800182a <HAL_GPIO_Init+0xae>
 80017e8:	4a8c      	ldr	r2, [pc, #560]	; (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_GPIO_Init+0xae>
          break;
 80017ee:	e036      	b.n	800185e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017f0:	4a8b      	ldr	r2, [pc, #556]	; (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0xae>
 80017f6:	4a8b      	ldr	r2, [pc, #556]	; (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d016      	beq.n	800182a <HAL_GPIO_Init+0xae>
 80017fc:	4a8a      	ldr	r2, [pc, #552]	; (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0xae>
          break;
 8001802:	e02c      	b.n	800185e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e028      	b.n	800185e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e023      	b.n	800185e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3308      	adds	r3, #8
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e01e      	b.n	800185e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	330c      	adds	r3, #12
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e019      	b.n	800185e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	2304      	movs	r3, #4
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e012      	b.n	800185e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	611a      	str	r2, [r3, #16]
          break;
 800184a:	e008      	b.n	800185e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	615a      	str	r2, [r3, #20]
          break;
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2bff      	cmp	r3, #255	; 0xff
 8001862:	d801      	bhi.n	8001868 <HAL_GPIO_Init+0xec>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	e001      	b.n	800186c <HAL_GPIO_Init+0xf0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	d802      	bhi.n	800187a <HAL_GPIO_Init+0xfe>
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x104>
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3b08      	subs	r3, #8
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	210f      	movs	r1, #15
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	401a      	ands	r2, r3
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	431a      	orrs	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a2 	beq.w	80019f2 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a5e      	ldr	r2, [pc, #376]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6193      	str	r3, [r2, #24]
 80018ba:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c6:	4a5a      	ldr	r2, [pc, #360]	; (8001a30 <HAL_GPIO_Init+0x2b4>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a51      	ldr	r2, [pc, #324]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x1b6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <HAL_GPIO_Init+0x2bc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x1b2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4f      	ldr	r2, [pc, #316]	; (8001a3c <HAL_GPIO_Init+0x2c0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x1ae>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4e      	ldr	r2, [pc, #312]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x1aa>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4d      	ldr	r2, [pc, #308]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x1a6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x1a2>
 800191a:	2305      	movs	r3, #5
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 800191e:	2306      	movs	r3, #6
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x1b8>
 8001932:	2300      	movs	r3, #0
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001944:	493a      	ldr	r1, [pc, #232]	; (8001a30 <HAL_GPIO_Init+0x2b4>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
 800196a:	e006      	b.n	800197a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800196c:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	43db      	mvns	r3, r3
 8001974:	4935      	ldr	r1, [pc, #212]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001976:	4013      	ands	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4930      	ldr	r1, [pc, #192]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
 8001992:	e006      	b.n	80019a2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	492b      	ldr	r1, [pc, #172]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800199e:	4013      	ands	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4926      	ldr	r1, [pc, #152]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4921      	ldr	r1, [pc, #132]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	491c      	ldr	r1, [pc, #112]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60cb      	str	r3, [r1, #12]
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	3301      	adds	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f aec4 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	372c      	adds	r7, #44	; 0x2c
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	10210000 	.word	0x10210000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	10120000 	.word	0x10120000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10320000 	.word	0x10320000
 8001a28:	10220000 	.word	0x10220000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40011800 	.word	0x40011800
 8001a48:	40011c00 	.word	0x40011c00
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f008 fb56 	bl	800a150 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e26c      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8087 	beq.w	8001bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d00c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001adc:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d112      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d06c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x12c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d168      	bne.n	8001bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e246      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76>
 8001b18:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7f      	ldr	r2, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x98>
 8001b2e:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xbc>
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a71      	ldr	r2, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a67      	ldr	r2, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ff92 	bl	8000ab4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7fe ff8e 	bl	8000ab4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1fa      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe4>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff7e 	bl	8000ab4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe ff7a 	bl	8000ab4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1e6      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x10c>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1ba      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ff33 	bl	8000ab4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7fe ff2f 	bl	8000ab4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e19b      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe ff12 	bl	8000ab4 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c94:	f7fe ff0e 	bl	8000ab4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e17a      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03a      	beq.n	8001d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fef2 	bl	8000ab4 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7fe feee 	bl	8000ab4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e15a      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 fada 	bl	80022ac <RCC_Delay>
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7fe fed8 	bl	8000ab4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7fe fed4 	bl	8000ab4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e140      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000
 8001d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b9e      	ldr	r3, [pc, #632]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e9      	bne.n	8001d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a6 	beq.w	8001e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b97      	ldr	r3, [pc, #604]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8a      	ldr	r2, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe fe95 	bl	8000ab4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe fe91 	bl	8000ab4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0fd      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x312>
 8001db4:	4b7b      	ldr	r3, [pc, #492]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a7a      	ldr	r2, [pc, #488]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x334>
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	e01c      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x356>
 8001dec:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a6c      	ldr	r2, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a69      	ldr	r2, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a63      	ldr	r2, [pc, #396]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fe45 	bl	8000ab4 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fe41 	bl	8000ab4 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0ab      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCC_OscConfig+0x37e>
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fe2f 	bl	8000ab4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe fe2b 	bl	8000ab4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e095      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8081 	beq.w	8001f9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d061      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d146      	bne.n	8001f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x4fc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fdff 	bl	8000ab4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fdfb 	bl	8000ab4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e067      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	492d      	ldr	r1, [pc, #180]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a19      	ldr	r1, [r3, #32]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	430b      	orrs	r3, r1
 8001f06:	4927      	ldr	r1, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x4fc>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fdcf 	bl	8000ab4 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fdcb 	bl	8000ab4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e037      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46a>
 8001f38:	e02f      	b.n	8001f9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_RCC_OscConfig+0x4fc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fdb8 	bl	8000ab4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fdb4 	bl	8000ab4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e020      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x498>
 8001f66:	e018      	b.n	8001f9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e013      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	42420060 	.word	0x42420060

08001fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d0      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4965      	ldr	r1, [pc, #404]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800202e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d040      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e073      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4936      	ldr	r1, [pc, #216]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7fe fd08 	bl	8000ab4 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fd04 	bl	8000ab4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e053      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d210      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	fa21 f303 	lsr.w	r3, r1, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1cc>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fc66 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	0800c4b4 	.word	0x0800c4b4
 800217c:	20000030 	.word	0x20000030
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b490      	push	{r4, r7}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb0>)
 800218c:	1d3c      	adds	r4, r7, #4
 800218e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x40>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x46>
 80021c2:	e02d      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c6:	623b      	str	r3, [r7, #32]
      break;
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021d6:	4413      	add	r3, r2
 80021d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c5b      	lsrs	r3, r3, #17
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f6:	4413      	add	r3, r2
 80021f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002202:	fb02 f203 	mul.w	r2, r2, r3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	e004      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	623b      	str	r3, [r7, #32]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	6a3b      	ldr	r3, [r7, #32]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc90      	pop	{r4, r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	0800ac88 	.word	0x0800ac88
 8002238:	0800ac98 	.word	0x0800ac98
 800223c:	40021000 	.word	0x40021000
 8002240:	007a1200 	.word	0x007a1200
 8002244:	003d0900 	.word	0x003d0900

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <HAL_RCC_GetHCLKFreq+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000030 	.word	0x20000030

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff2 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	0800c4c4 	.word	0x0800c4c4

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffde 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 800228c:	4601      	mov	r1, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	0800c4c4 	.word	0x0800c4c4

080022ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <RCC_Delay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <RCC_Delay+0x38>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c8:	bf00      	nop
  }
  while (Delay --);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	60fa      	str	r2, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <RCC_Delay+0x1c>
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000030 	.word	0x20000030
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d07d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	61d3      	str	r3, [r2, #28]
 8002320:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d118      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002348:	f7fe fbb4 	bl	8000ab4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	e008      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe fbb0 	bl	8000ab4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e06d      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002376:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02e      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d027      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239c:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d014      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fb7f 	bl	8000ab4 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fb7b 	bl	8000ab4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e036      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4917      	ldr	r1, [pc, #92]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a13      	ldr	r2, [pc, #76]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4904      	ldr	r1, [pc, #16]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
 8002450:	42420440 	.word	0x42420440

08002454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b08d      	sub	sp, #52	; 0x34
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800245c:	4b6b      	ldr	r3, [pc, #428]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800245e:	f107 040c 	add.w	r4, r7, #12
 8002462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3b01      	subs	r3, #1
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f200 80b6 	bhi.w	80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800248c:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	08002577 	.word	0x08002577
 8002498:	080025dd 	.word	0x080025dd
 800249c:	080025f9 	.word	0x080025f9
 80024a0:	08002567 	.word	0x08002567
 80024a4:	080025f9 	.word	0x080025f9
 80024a8:	080025f9 	.word	0x080025f9
 80024ac:	080025f9 	.word	0x080025f9
 80024b0:	0800256f 	.word	0x0800256f
 80024b4:	080025f9 	.word	0x080025f9
 80024b8:	080025f9 	.word	0x080025f9
 80024bc:	080025f9 	.word	0x080025f9
 80024c0:	080025f9 	.word	0x080025f9
 80024c4:	080025f9 	.word	0x080025f9
 80024c8:	080025f9 	.word	0x080025f9
 80024cc:	080025f9 	.word	0x080025f9
 80024d0:	080024d5 	.word	0x080024d5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 808a 	beq.w	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024f4:	4413      	add	r3, r2
 80024f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024fa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0c5b      	lsrs	r3, r3, #17
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002514:	4413      	add	r3, r2
 8002516:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002526:	4a3c      	ldr	r2, [pc, #240]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fbb2 f2f3 	udiv	r2, r2, r3
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002536:	e004      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	4a38      	ldr	r2, [pc, #224]	; (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d102      	bne.n	8002556 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002554:	e052      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4a31      	ldr	r2, [pc, #196]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002564:	e04a      	b.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002566:	f7ff fe0d 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800256a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800256c:	e049      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800256e:	f7ff fe09 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002572:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002574:	e045      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002576:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002586:	d108      	bne.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
 8002598:	e01f      	b.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d109      	bne.n	80025ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80025b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b8:	e00f      	b.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025c4:	d11c      	bne.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80025d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80025d8:	e012      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80025da:	e011      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025dc:	f7ff fe52 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0b9b      	lsrs	r3, r3, #14
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	3301      	adds	r3, #1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025f6:	e004      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80025f8:	bf00      	nop
 80025fa:	e002      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80025fc:	bf00      	nop
 80025fe:	e000      	b.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002600:	bf00      	nop
    }
  }
  return (frequency);
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002604:	4618      	mov	r0, r3
 8002606:	3734      	adds	r7, #52	; 0x34
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	0800ac9c 	.word	0x0800ac9c
 8002610:	0800acac 	.word	0x0800acac
 8002614:	40021000 	.word	0x40021000
 8002618:	007a1200 	.word	0x007a1200
 800261c:	003d0900 	.word	0x003d0900
 8002620:	aaaaaaab 	.word	0xaaaaaaab

08002624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e03f      	b.n	80026b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f008 f998 	bl	800a980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa5f 	bl	8002b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800267c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800268c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_UART_IRQHandler+0x52>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f98d 	bl	8002a2a <UART_Receive_IT>
      return;
 8002710:	e0cc      	b.n	80028ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ab 	beq.w	8002870 <HAL_UART_IRQHandler+0x1b0>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_UART_IRQHandler+0x70>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a0 	beq.w	8002870 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_UART_IRQHandler+0x90>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_UART_IRQHandler+0xb0>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_UART_IRQHandler+0xd0>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_UART_IRQHandler+0xf0>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	f043 0208 	orr.w	r2, r3, #8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d078      	beq.n	80028aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d007      	beq.n	80027d2 <HAL_UART_IRQHandler+0x112>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f92c 	bl	8002a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <HAL_UART_IRQHandler+0x13a>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d031      	beq.n	800285e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f877 	bl	80028ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d023      	beq.n	8002856 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_UART_IRQHandler+0x1f4>)
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fe9a 	bl	800156c <HAL_DMA_Abort_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	e00e      	b.n	800286c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f844 	bl	80028dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	e00a      	b.n	800286c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f840 	bl	80028dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	e006      	b.n	800286c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f83c 	bl	80028dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800286a:	e01e      	b.n	80028aa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	bf00      	nop
    return;
 800286e:	e01c      	b.n	80028aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_UART_IRQHandler+0x1cc>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f863 	bl	8002950 <UART_Transmit_IT>
    return;
 800288a:	e00f      	b.n	80028ac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_UART_IRQHandler+0x1ec>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8aa 	bl	80029fa <UART_EndTransmit_IT>
    return;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_UART_IRQHandler+0x1ec>
    return;
 80028aa:	bf00      	nop
  }
}
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	08002929 	.word	0x08002929

080028b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002904:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ffca 	bl	80028dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b21      	cmp	r3, #33	; 0x21
 8002962:	d144      	bne.n	80029ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d11a      	bne.n	80029a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002982:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	621a      	str	r2, [r3, #32]
 8002996:	e00e      	b.n	80029b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	e008      	b.n	80029b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6211      	str	r1, [r2, #32]
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4619      	mov	r1, r3
 80029c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10f      	bne.n	80029ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff4c 	bl	80028b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b22      	cmp	r3, #34	; 0x22
 8002a3c:	d171      	bne.n	8002b22 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d123      	bne.n	8002a90 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	1c9a      	adds	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
 8002a72:	e029      	b.n	8002ac8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a8e:	e01b      	b.n	8002ac8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6858      	ldr	r0, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6291      	str	r1, [r2, #40]	; 0x28
 8002aa8:	b2c2      	uxtb	r2, r0
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e00c      	b.n	8002ac8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	1c58      	adds	r0, r3, #1
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	6288      	str	r0, [r1, #40]	; 0x28
 8002ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d120      	bne.n	8002b1e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0220 	bic.w	r2, r2, #32
 8002aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fed8 	bl	80028ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e002      	b.n	8002b24 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b66:	f023 030c 	bic.w	r3, r3, #12
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <UART_SetConfig+0x1ac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d14e      	bne.n	8002c32 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff fb76 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8002b98:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	0119      	lsls	r1, r3, #4
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	4419      	add	r1, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c08:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	3332      	adds	r3, #50	; 0x32
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c30:	e04d      	b.n	8002cce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7ff fb13 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8002c36:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	0119      	lsls	r1, r3, #4
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002c70:	fba3 0302 	umull	r0, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2064      	movs	r0, #100	; 0x64
 8002c78:	fb00 f303 	mul.w	r3, r0, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	3332      	adds	r3, #50	; 0x32
 8002c82:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8e:	4419      	add	r1, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009a      	lsls	r2, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002ca8:	fba3 0302 	umull	r0, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2064      	movs	r0, #100	; 0x64
 8002cb0:	fb00 f303 	mul.w	r3, r0, r3
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <UART_SetConfig+0x1b0>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	440a      	add	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	51eb851f 	.word	0x51eb851f

08002ce0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <MX_ADC1_Init+0x78>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d1c:	480d      	ldr	r0, [pc, #52]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d1e:	f7fd fef5 	bl	8000b0c <HAL_ADC_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002d28:	f007 fd1b 	bl	800a762 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d30:	2301      	movs	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_ADC1_Init+0x74>)
 8002d3e:	f7fe f983 	bl	8001048 <HAL_ADC_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d48:	f007 fd0b 	bl	800a762 <Error_Handler>
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000464 	.word	0x20000464
 8002d58:	40012400 	.word	0x40012400

08002d5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_ADC_MspInit+0x6c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d121      	bne.n	8002dc0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_ADC_MspInit+0x70>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db0:	2303      	movs	r3, #3
 8002db2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	4619      	mov	r1, r3
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <HAL_ADC_MspInit+0x74>)
 8002dbc:	f7fe fcde 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40012400 	.word	0x40012400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010800 	.word	0x40010800

08002dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4a3f      	ldr	r2, [pc, #252]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <MX_GPIO_Init+0x130>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e36:	4834      	ldr	r0, [pc, #208]	; (8002f08 <MX_GPIO_Init+0x134>)
 8002e38:	f7fe fe0a 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2104      	movs	r1, #4
 8002e40:	4832      	ldr	r0, [pc, #200]	; (8002f0c <MX_GPIO_Init+0x138>)
 8002e42:	f7fe fe05 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8002e46:	2301      	movs	r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <MX_GPIO_Init+0x13c>)
 8002e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	4619      	mov	r1, r3
 8002e58:	482b      	ldr	r0, [pc, #172]	; (8002f08 <MX_GPIO_Init+0x134>)
 8002e5a:	f7fe fc8f 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e62:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <MX_GPIO_Init+0x13c>)
 8002e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4828      	ldr	r0, [pc, #160]	; (8002f14 <MX_GPIO_Init+0x140>)
 8002e72:	f7fe fc83 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	481e      	ldr	r0, [pc, #120]	; (8002f08 <MX_GPIO_Init+0x134>)
 8002e90:	f7fe fc74 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_GPIO_Init+0x13c>)
 8002e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	f107 0310 	add.w	r3, r7, #16
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4817      	ldr	r0, [pc, #92]	; (8002f08 <MX_GPIO_Init+0x134>)
 8002eaa:	f7fe fc67 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4811      	ldr	r0, [pc, #68]	; (8002f0c <MX_GPIO_Init+0x138>)
 8002ec6:	f7fe fc59 	bl	800177c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2101      	movs	r1, #1
 8002ece:	2006      	movs	r0, #6
 8002ed0:	f7fe fb15 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ed4:	2006      	movs	r0, #6
 8002ed6:	f7fe fb2e 	bl	8001536 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2101      	movs	r1, #1
 8002ede:	2017      	movs	r0, #23
 8002ee0:	f7fe fb0d 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ee4:	2017      	movs	r0, #23
 8002ee6:	f7fe fb26 	bl	8001536 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002eea:	2202      	movs	r2, #2
 8002eec:	2101      	movs	r1, #1
 8002eee:	2028      	movs	r0, #40	; 0x28
 8002ef0:	f7fe fb05 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ef4:	2028      	movs	r0, #40	; 0x28
 8002ef6:	f7fe fb1e 	bl	8001536 <HAL_NVIC_EnableIRQ>

}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	10110000 	.word	0x10110000
 8002f14:	40011000 	.word	0x40011000

08002f18 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <LCD_WR_REG+0x40>)
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LCD_WR_REG+0x40>)
 8002f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f30:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <LCD_WR_REG+0x44>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <LCD_WR_REG+0x40>)
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <LCD_WR_REG+0x40>)
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <LCD_WR_REG+0x40>)
 8002f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4a:	611a      	str	r2, [r3, #16]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40010c00 	.word	0x40010c00

08002f60 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <LCD_WR_DATAX+0x40>)
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <LCD_WR_DATAX+0x40>)
 8002f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f78:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <LCD_WR_DATAX+0x44>)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <LCD_WR_DATAX+0x40>)
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <LCD_WR_DATAX+0x40>)
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <LCD_WR_DATAX+0x40>)
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	611a      	str	r2, [r3, #16]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	40010c00 	.word	0x40010c00

08002fa8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <LCD_RD_DATA+0x7c>)
 8002fb0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002fb4:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <LCD_RD_DATA+0x7c>)
 8002fb8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002fbc:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <LCD_RD_DATA+0x7c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <LCD_RD_DATA+0x80>)
 8002fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fca:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <LCD_RD_DATA+0x80>)
 8002fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd2:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <LCD_RD_DATA+0x80>)
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <LCD_RD_DATA+0x84>)
 8002fdc:	889b      	ldrh	r3, [r3, #4]
 8002fde:	f648 1289 	movw	r2, #35209	; 0x8989
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d102      	bne.n	8002fec <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fd fd6e 	bl	8000ac8 <HAL_Delay>
	t = DATAIN
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <LCD_RD_DATA+0x7c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <LCD_RD_DATA+0x80>)
 8002ff4:	2240      	movs	r2, #64	; 0x40
 8002ff6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <LCD_RD_DATA+0x80>)
 8002ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffe:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <LCD_RD_DATA+0x7c>)
 8003002:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003006:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <LCD_RD_DATA+0x7c>)
 800300a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800300e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <LCD_RD_DATA+0x7c>)
 8003012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003016:	60da      	str	r2, [r3, #12]
	return t;
 8003018:	88fb      	ldrh	r3, [r7, #6]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40010c00 	.word	0x40010c00
 8003028:	40011000 	.word	0x40011000
 800302c:	20000494 	.word	0x20000494

08003030 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	460a      	mov	r2, r1
 800303a:	80fb      	strh	r3, [r7, #6]
 800303c:	4613      	mov	r3, r2
 800303e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff68 	bl	8002f18 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <LCD_WriteReg+0x4c>)
 800304a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800304e:	611a      	str	r2, [r3, #16]
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <LCD_WriteReg+0x4c>)
 8003052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <LCD_WriteReg+0x50>)
 800305a:	88bb      	ldrh	r3, [r7, #4]
 800305c:	60d3      	str	r3, [r2, #12]
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <LCD_WriteReg+0x4c>)
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	615a      	str	r2, [r3, #20]
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <LCD_WriteReg+0x4c>)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <LCD_WriteReg+0x4c>)
 800306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003070:	611a      	str	r2, [r3, #16]
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40011000 	.word	0x40011000
 8003080:	40010c00 	.word	0x40010c00

08003084 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff41 	bl	8002f18 <LCD_WR_REG>
	return LCD_RD_DATA();
 8003096:	f7ff ff87 	bl	8002fa8 <LCD_RD_DATA>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <LCD_WriteRAM_Prepare+0x14>)
 80030aa:	891b      	ldrh	r3, [r3, #8]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff33 	bl	8002f18 <LCD_WR_REG>
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000494 	.word	0x20000494

080030bc <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	460a      	mov	r2, r1
 80030c6:	80fb      	strh	r3, [r7, #6]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80030cc:	4b73      	ldr	r3, [pc, #460]	; (800329c <LCD_SetCursor+0x1e0>)
 80030ce:	889b      	ldrh	r3, [r3, #4]
 80030d0:	f249 3241 	movw	r2, #37697	; 0x9341
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d005      	beq.n	80030e4 <LCD_SetCursor+0x28>
 80030d8:	4b70      	ldr	r3, [pc, #448]	; (800329c <LCD_SetCursor+0x1e0>)
 80030da:	889b      	ldrh	r3, [r3, #4]
 80030dc:	f245 3210 	movw	r2, #21264	; 0x5310
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d164      	bne.n	80031ae <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 80030e4:	4b6d      	ldr	r3, [pc, #436]	; (800329c <LCD_SetCursor+0x1e0>)
 80030e6:	895b      	ldrh	r3, [r3, #10]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff15 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80030f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f4:	611a      	str	r2, [r3, #16]
 80030f6:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80030f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	b29a      	uxth	r2, r3
 8003104:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <LCD_SetCursor+0x1e8>)
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	615a      	str	r2, [r3, #20]
 800310e:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800311e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003122:	611a      	str	r2, [r3, #16]
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312a:	615a      	str	r2, [r3, #20]
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <LCD_SetCursor+0x1e8>)
 8003130:	b2db      	uxtb	r3, r3
 8003132:	60d3      	str	r3, [r2, #12]
 8003134:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	615a      	str	r2, [r3, #20]
 800313a:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003148:	4b54      	ldr	r3, [pc, #336]	; (800329c <LCD_SetCursor+0x1e0>)
 800314a:	899b      	ldrh	r3, [r3, #12]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fee3 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	611a      	str	r2, [r3, #16]
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	615a      	str	r2, [r3, #20]
 8003162:	88bb      	ldrh	r3, [r7, #4]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <LCD_SetCursor+0x1e8>)
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	611a      	str	r2, [r3, #16]
 8003178:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003186:	611a      	str	r2, [r3, #16]
 8003188:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	615a      	str	r2, [r3, #20]
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	4a44      	ldr	r2, [pc, #272]	; (80032a4 <LCD_SetCursor+0x1e8>)
 8003194:	b2db      	uxtb	r3, r3
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	615a      	str	r2, [r3, #20]
 800319e:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	611a      	str	r2, [r3, #16]
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 80031ac:	e248      	b.n	8003640 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <LCD_SetCursor+0x1e0>)
 80031b0:	889b      	ldrh	r3, [r3, #4]
 80031b2:	f646 0204 	movw	r2, #26628	; 0x6804
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d176      	bne.n	80032a8 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 80031ba:	4b38      	ldr	r3, [pc, #224]	; (800329c <LCD_SetCursor+0x1e0>)
 80031bc:	799b      	ldrb	r3, [r3, #6]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <LCD_SetCursor+0x1e0>)
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <LCD_SetCursor+0x1e0>)
 80031d2:	895b      	ldrh	r3, [r3, #10]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe9f 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <LCD_SetCursor+0x1e8>)
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	615a      	str	r2, [r3, #20]
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <LCD_SetCursor+0x1e4>)
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	611a      	str	r2, [r3, #16]
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800320a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320e:	611a      	str	r2, [r3, #16]
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <LCD_SetCursor+0x1e8>)
 800321c:	b2db      	uxtb	r3, r3
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	615a      	str	r2, [r3, #20]
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	611a      	str	r2, [r3, #16]
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800322e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003232:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <LCD_SetCursor+0x1e0>)
 8003236:	899b      	ldrh	r3, [r3, #12]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe6d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003244:	611a      	str	r2, [r3, #16]
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	88bb      	ldrh	r3, [r7, #4]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b29a      	uxth	r2, r3
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <LCD_SetCursor+0x1e8>)
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	615a      	str	r2, [r3, #20]
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	611a      	str	r2, [r3, #16]
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800326e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	88bb      	ldrh	r3, [r7, #4]
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <LCD_SetCursor+0x1e8>)
 8003280:	b2db      	uxtb	r3, r3
 8003282:	60d3      	str	r3, [r2, #12]
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <LCD_SetCursor+0x1e4>)
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <LCD_SetCursor+0x1e4>)
 8003292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003296:	611a      	str	r2, [r3, #16]
}
 8003298:	e1d2      	b.n	8003640 <LCD_SetCursor+0x584>
 800329a:	bf00      	nop
 800329c:	20000494 	.word	0x20000494
 80032a0:	40011000 	.word	0x40011000
 80032a4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80032a8:	4b99      	ldr	r3, [pc, #612]	; (8003510 <LCD_SetCursor+0x454>)
 80032aa:	889b      	ldrh	r3, [r3, #4]
 80032ac:	f641 1263 	movw	r2, #6499	; 0x1963
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f040 8133 	bne.w	800351c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 80032b6:	4b96      	ldr	r3, [pc, #600]	; (8003510 <LCD_SetCursor+0x454>)
 80032b8:	799b      	ldrb	r3, [r3, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d163      	bne.n	8003386 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 80032be:	4b94      	ldr	r3, [pc, #592]	; (8003510 <LCD_SetCursor+0x454>)
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80032cc:	4b90      	ldr	r3, [pc, #576]	; (8003510 <LCD_SetCursor+0x454>)
 80032ce:	895b      	ldrh	r3, [r3, #10]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fe21 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80032d6:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <LCD_SetCursor+0x458>)
 80032d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	4b8d      	ldr	r3, [pc, #564]	; (8003514 <LCD_SetCursor+0x458>)
 80032e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <LCD_SetCursor+0x45c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	4b89      	ldr	r3, [pc, #548]	; (8003514 <LCD_SetCursor+0x458>)
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	615a      	str	r2, [r3, #20]
 80032f2:	4b88      	ldr	r3, [pc, #544]	; (8003514 <LCD_SetCursor+0x458>)
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	4b86      	ldr	r3, [pc, #536]	; (8003514 <LCD_SetCursor+0x458>)
 80032fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fe:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003300:	4b84      	ldr	r3, [pc, #528]	; (8003514 <LCD_SetCursor+0x458>)
 8003302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	4b82      	ldr	r3, [pc, #520]	; (8003514 <LCD_SetCursor+0x458>)
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	615a      	str	r2, [r3, #20]
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <LCD_SetCursor+0x45c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <LCD_SetCursor+0x458>)
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	615a      	str	r2, [r3, #20]
 800331c:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <LCD_SetCursor+0x458>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <LCD_SetCursor+0x458>)
 8003324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003328:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <LCD_SetCursor+0x458>)
 800332c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	4b78      	ldr	r3, [pc, #480]	; (8003514 <LCD_SetCursor+0x458>)
 8003334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b75      	ldr	r3, [pc, #468]	; (8003518 <LCD_SetCursor+0x45c>)
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	4b73      	ldr	r3, [pc, #460]	; (8003514 <LCD_SetCursor+0x458>)
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	615a      	str	r2, [r3, #20]
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <LCD_SetCursor+0x458>)
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	611a      	str	r2, [r3, #16]
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <LCD_SetCursor+0x458>)
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8003358:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <LCD_SetCursor+0x458>)
 800335a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <LCD_SetCursor+0x458>)
 8003362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	4a6b      	ldr	r2, [pc, #428]	; (8003518 <LCD_SetCursor+0x45c>)
 800336c:	b2db      	uxtb	r3, r3
 800336e:	60d3      	str	r3, [r2, #12]
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <LCD_SetCursor+0x458>)
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <LCD_SetCursor+0x458>)
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	611a      	str	r2, [r3, #16]
 800337c:	4b65      	ldr	r3, [pc, #404]	; (8003514 <LCD_SetCursor+0x458>)
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	611a      	str	r2, [r3, #16]
 8003384:	e061      	b.n	800344a <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <LCD_SetCursor+0x454>)
 8003388:	895b      	ldrh	r3, [r3, #10]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fdc4 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <LCD_SetCursor+0x458>)
 8003392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003396:	611a      	str	r2, [r3, #16]
 8003398:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <LCD_SetCursor+0x458>)
 800339a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339e:	615a      	str	r2, [r3, #20]
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	4b5c      	ldr	r3, [pc, #368]	; (8003518 <LCD_SetCursor+0x45c>)
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <LCD_SetCursor+0x458>)
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	615a      	str	r2, [r3, #20]
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <LCD_SetCursor+0x458>)
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	4b57      	ldr	r3, [pc, #348]	; (8003514 <LCD_SetCursor+0x458>)
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <LCD_SetCursor+0x458>)
 80033c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	4b53      	ldr	r3, [pc, #332]	; (8003514 <LCD_SetCursor+0x458>)
 80033c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <LCD_SetCursor+0x45c>)
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	60d3      	str	r3, [r2, #12]
 80033d6:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <LCD_SetCursor+0x458>)
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	615a      	str	r2, [r3, #20]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <LCD_SetCursor+0x458>)
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	611a      	str	r2, [r3, #16]
 80033e2:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <LCD_SetCursor+0x458>)
 80033e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80033ea:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <LCD_SetCursor+0x458>)
 80033ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	4b48      	ldr	r3, [pc, #288]	; (8003514 <LCD_SetCursor+0x458>)
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	615a      	str	r2, [r3, #20]
 80033fa:	4b45      	ldr	r3, [pc, #276]	; (8003510 <LCD_SetCursor+0x454>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	3b01      	subs	r3, #1
 8003400:	121a      	asrs	r2, r3, #8
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <LCD_SetCursor+0x45c>)
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <LCD_SetCursor+0x458>)
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	615a      	str	r2, [r3, #20]
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <LCD_SetCursor+0x458>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <LCD_SetCursor+0x458>)
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <LCD_SetCursor+0x458>)
 800341c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <LCD_SetCursor+0x458>)
 8003424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003428:	615a      	str	r2, [r3, #20]
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <LCD_SetCursor+0x454>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a39      	ldr	r2, [pc, #228]	; (8003518 <LCD_SetCursor+0x45c>)
 8003432:	b2db      	uxtb	r3, r3
 8003434:	60d3      	str	r3, [r2, #12]
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <LCD_SetCursor+0x458>)
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <LCD_SetCursor+0x458>)
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <LCD_SetCursor+0x458>)
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <LCD_SetCursor+0x454>)
 800344c:	899b      	ldrh	r3, [r3, #12]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fd62 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <LCD_SetCursor+0x458>)
 8003456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <LCD_SetCursor+0x458>)
 800345e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	88bb      	ldrh	r3, [r7, #4]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <LCD_SetCursor+0x45c>)
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <LCD_SetCursor+0x458>)
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <LCD_SetCursor+0x458>)
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <LCD_SetCursor+0x458>)
 800347c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003480:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <LCD_SetCursor+0x458>)
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <LCD_SetCursor+0x458>)
 800348c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	4a20      	ldr	r2, [pc, #128]	; (8003518 <LCD_SetCursor+0x45c>)
 8003496:	b2db      	uxtb	r3, r3
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <LCD_SetCursor+0x458>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	615a      	str	r2, [r3, #20]
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <LCD_SetCursor+0x458>)
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <LCD_SetCursor+0x458>)
 80034a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <LCD_SetCursor+0x458>)
 80034b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <LCD_SetCursor+0x458>)
 80034b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <LCD_SetCursor+0x454>)
 80034c0:	885b      	ldrh	r3, [r3, #2]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	121a      	asrs	r2, r3, #8
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <LCD_SetCursor+0x45c>)
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <LCD_SetCursor+0x458>)
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	615a      	str	r2, [r3, #20]
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <LCD_SetCursor+0x458>)
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <LCD_SetCursor+0x458>)
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <LCD_SetCursor+0x458>)
 80034e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e4:	611a      	str	r2, [r3, #16]
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <LCD_SetCursor+0x458>)
 80034e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <LCD_SetCursor+0x454>)
 80034f0:	885b      	ldrh	r3, [r3, #2]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <LCD_SetCursor+0x45c>)
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	60d3      	str	r3, [r2, #12]
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <LCD_SetCursor+0x458>)
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	615a      	str	r2, [r3, #20]
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <LCD_SetCursor+0x458>)
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	4b03      	ldr	r3, [pc, #12]	; (8003514 <LCD_SetCursor+0x458>)
 8003508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350c:	611a      	str	r2, [r3, #16]
}
 800350e:	e097      	b.n	8003640 <LCD_SetCursor+0x584>
 8003510:	20000494 	.word	0x20000494
 8003514:	40011000 	.word	0x40011000
 8003518:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 800351c:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <LCD_SetCursor+0x58c>)
 800351e:	889b      	ldrh	r3, [r3, #4]
 8003520:	f245 5210 	movw	r2, #21776	; 0x5510
 8003524:	4293      	cmp	r3, r2
 8003526:	d172      	bne.n	800360e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <LCD_SetCursor+0x58c>)
 800352a:	895b      	ldrh	r3, [r3, #10]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fcf3 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <LCD_SetCursor+0x590>)
 8003534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	4b44      	ldr	r3, [pc, #272]	; (800364c <LCD_SetCursor+0x590>)
 800353c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003540:	615a      	str	r2, [r3, #20]
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <LCD_SetCursor+0x594>)
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <LCD_SetCursor+0x590>)
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	615a      	str	r2, [r3, #20]
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <LCD_SetCursor+0x590>)
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	611a      	str	r2, [r3, #16]
 8003558:	4b3c      	ldr	r3, [pc, #240]	; (800364c <LCD_SetCursor+0x590>)
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <LCD_SetCursor+0x58c>)
 8003562:	895b      	ldrh	r3, [r3, #10]
 8003564:	3301      	adds	r3, #1
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fcd5 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <LCD_SetCursor+0x590>)
 8003570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	4b35      	ldr	r3, [pc, #212]	; (800364c <LCD_SetCursor+0x590>)
 8003578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	4a33      	ldr	r2, [pc, #204]	; (8003650 <LCD_SetCursor+0x594>)
 8003582:	b2db      	uxtb	r3, r3
 8003584:	60d3      	str	r3, [r2, #12]
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <LCD_SetCursor+0x590>)
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	4b2f      	ldr	r3, [pc, #188]	; (800364c <LCD_SetCursor+0x590>)
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <LCD_SetCursor+0x590>)
 8003594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003598:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <LCD_SetCursor+0x58c>)
 800359c:	899b      	ldrh	r3, [r3, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fcba 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <LCD_SetCursor+0x590>)
 80035a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <LCD_SetCursor+0x590>)
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	615a      	str	r2, [r3, #20]
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	4b25      	ldr	r3, [pc, #148]	; (8003650 <LCD_SetCursor+0x594>)
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <LCD_SetCursor+0x590>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	4b21      	ldr	r3, [pc, #132]	; (800364c <LCD_SetCursor+0x590>)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <LCD_SetCursor+0x590>)
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <LCD_SetCursor+0x58c>)
 80035d4:	899b      	ldrh	r3, [r3, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fc9c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <LCD_SetCursor+0x590>)
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	611a      	str	r2, [r3, #16]
 80035e8:	4b18      	ldr	r3, [pc, #96]	; (800364c <LCD_SetCursor+0x590>)
 80035ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	88bb      	ldrh	r3, [r7, #4]
 80035f2:	4a17      	ldr	r2, [pc, #92]	; (8003650 <LCD_SetCursor+0x594>)
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <LCD_SetCursor+0x590>)
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <LCD_SetCursor+0x590>)
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	611a      	str	r2, [r3, #16]
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <LCD_SetCursor+0x590>)
 8003606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360a:	611a      	str	r2, [r3, #16]
}
 800360c:	e018      	b.n	8003640 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <LCD_SetCursor+0x58c>)
 8003610:	799b      	ldrb	r3, [r3, #6]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <LCD_SetCursor+0x58c>)
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <LCD_SetCursor+0x58c>)
 8003626:	895b      	ldrh	r3, [r3, #10]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fcff 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <LCD_SetCursor+0x58c>)
 8003634:	899b      	ldrh	r3, [r3, #12]
 8003636:	88ba      	ldrh	r2, [r7, #4]
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fcf8 	bl	8003030 <LCD_WriteReg>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000494 	.word	0x20000494
 800364c:	40011000 	.word	0x40011000
 8003650:	40010c00 	.word	0x40010c00

08003654 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8003666:	4b78      	ldr	r3, [pc, #480]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003668:	799b      	ldrb	r3, [r3, #6]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10b      	bne.n	8003686 <LCD_Scan_Dir+0x32>
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003670:	889b      	ldrh	r3, [r3, #4]
 8003672:	f646 0204 	movw	r2, #26628	; 0x6804
 8003676:	4293      	cmp	r3, r2
 8003678:	d005      	beq.n	8003686 <LCD_Scan_Dir+0x32>
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 800367c:	889b      	ldrh	r3, [r3, #4]
 800367e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003682:	4293      	cmp	r3, r2
 8003684:	d109      	bne.n	800369a <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8003686:	4b70      	ldr	r3, [pc, #448]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003688:	799b      	ldrb	r3, [r3, #6]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d134      	bne.n	80036f8 <LCD_Scan_Dir+0xa4>
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003690:	889b      	ldrh	r3, [r3, #4]
 8003692:	f641 1263 	movw	r2, #6499	; 0x1963
 8003696:	4293      	cmp	r3, r2
 8003698:	d12e      	bne.n	80036f8 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2b07      	cmp	r3, #7
 800369e:	d82b      	bhi.n	80036f8 <LCD_Scan_Dir+0xa4>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <LCD_Scan_Dir+0x54>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036c9 	.word	0x080036c9
 80036ac:	080036cf 	.word	0x080036cf
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	080036db 	.word	0x080036db
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	080036e7 	.word	0x080036e7
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	080036f3 	.word	0x080036f3
		{
		case 0:
			dir = 6;
 80036c8:	2306      	movs	r3, #6
 80036ca:	71fb      	strb	r3, [r7, #7]
			break;
 80036cc:	e014      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80036ce:	2307      	movs	r3, #7
 80036d0:	71fb      	strb	r3, [r7, #7]
			break;
 80036d2:	e011      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80036d4:	2304      	movs	r3, #4
 80036d6:	71fb      	strb	r3, [r7, #7]
			break;
 80036d8:	e00e      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80036da:	2305      	movs	r3, #5
 80036dc:	71fb      	strb	r3, [r7, #7]
			break;
 80036de:	e00b      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	71fb      	strb	r3, [r7, #7]
			break;
 80036e4:	e008      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]
			break;
 80036ea:	e005      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80036ec:	2303      	movs	r3, #3
 80036ee:	71fb      	strb	r3, [r7, #7]
			break;
 80036f0:	e002      	b.n	80036f8 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80036f2:	2302      	movs	r3, #2
 80036f4:	71fb      	strb	r3, [r7, #7]
			break;
 80036f6:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80036fa:	889b      	ldrh	r3, [r3, #4]
 80036fc:	f249 3241 	movw	r2, #37697	; 0x9341
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <LCD_Scan_Dir+0xe2>
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003706:	889b      	ldrh	r3, [r3, #4]
 8003708:	f646 0204 	movw	r2, #26628	; 0x6804
 800370c:	4293      	cmp	r3, r2
 800370e:	d012      	beq.n	8003736 <LCD_Scan_Dir+0xe2>
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003712:	889b      	ldrh	r3, [r3, #4]
 8003714:	f245 3210 	movw	r2, #21264	; 0x5310
 8003718:	4293      	cmp	r3, r2
 800371a:	d00c      	beq.n	8003736 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800371c:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 800371e:	889b      	ldrh	r3, [r3, #4]
 8003720:	f245 5210 	movw	r2, #21776	; 0x5510
 8003724:	4293      	cmp	r3, r2
 8003726:	d006      	beq.n	8003736 <LCD_Scan_Dir+0xe2>
 8003728:	4b47      	ldr	r3, [pc, #284]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003730:	4293      	cmp	r3, r2
 8003732:	f040 8250 	bne.w	8003bd6 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b07      	cmp	r3, #7
 800373a:	d836      	bhi.n	80037aa <LCD_Scan_Dir+0x156>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <LCD_Scan_Dir+0xf0>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	080037ab 	.word	0x080037ab
 8003748:	08003765 	.word	0x08003765
 800374c:	0800376f 	.word	0x0800376f
 8003750:	08003779 	.word	0x08003779
 8003754:	08003783 	.word	0x08003783
 8003758:	0800378d 	.word	0x0800378d
 800375c:	08003797 	.word	0x08003797
 8003760:	080037a1 	.word	0x080037a1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	81fb      	strh	r3, [r7, #14]
			break;
 800376c:	e01d      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003774:	81fb      	strh	r3, [r7, #14]
			break;
 8003776:	e018      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003778:	89fb      	ldrh	r3, [r7, #14]
 800377a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800377e:	81fb      	strh	r3, [r7, #14]
			break;
 8003780:	e013      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	81fb      	strh	r3, [r7, #14]
			break;
 800378a:	e00e      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003792:	81fb      	strh	r3, [r7, #14]
			break;
 8003794:	e009      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003796:	89fb      	ldrh	r3, [r7, #14]
 8003798:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800379c:	81fb      	strh	r3, [r7, #14]
			break;
 800379e:	e004      	b.n	80037aa <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80037a6:	81fb      	strh	r3, [r7, #14]
			break;
 80037a8:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80037ac:	889b      	ldrh	r3, [r3, #4]
 80037ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d103      	bne.n	80037be <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80037b6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80037ba:	81bb      	strh	r3, [r7, #12]
 80037bc:	e001      	b.n	80037c2 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80037be:	2336      	movs	r3, #54	; 0x36
 80037c0:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	f245 3210 	movw	r2, #21264	; 0x5310
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <LCD_Scan_Dir+0x19a>
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80037d0:	889b      	ldrh	r3, [r3, #4]
 80037d2:	f245 5210 	movw	r2, #21776	; 0x5510
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <LCD_Scan_Dir+0x19a>
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80037dc:	889b      	ldrh	r3, [r3, #4]
 80037de:	f641 1263 	movw	r2, #6499	; 0x1963
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 80037f0:	889b      	ldrh	r3, [r3, #4]
 80037f2:	f646 0204 	movw	r2, #26628	; 0x6804
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80037fa:	89fb      	ldrh	r3, [r7, #14]
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003802:	89fa      	ldrh	r2, [r7, #14]
 8003804:	89bb      	ldrh	r3, [r7, #12]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fc11 	bl	8003030 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003810:	889b      	ldrh	r3, [r3, #4]
 8003812:	f641 1263 	movw	r2, #6499	; 0x1963
 8003816:	4293      	cmp	r3, r2
 8003818:	d028      	beq.n	800386c <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800381a:	89fb      	ldrh	r3, [r7, #14]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 800382a:	885b      	ldrh	r3, [r3, #2]
 800382c:	429a      	cmp	r2, r3
 800382e:	d21d      	bcs.n	800386c <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003838:	885a      	ldrh	r2, [r3, #2]
 800383a:	4b03      	ldr	r3, [pc, #12]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 800383c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800383e:	4a02      	ldr	r2, [pc, #8]	; (8003848 <LCD_Scan_Dir+0x1f4>)
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	8053      	strh	r3, [r2, #2]
 8003844:	e012      	b.n	800386c <LCD_Scan_Dir+0x218>
 8003846:	bf00      	nop
 8003848:	20000494 	.word	0x20000494
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 800384c:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	4b7e      	ldr	r3, [pc, #504]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003852:	885b      	ldrh	r3, [r3, #2]
 8003854:	429a      	cmp	r2, r3
 8003856:	d909      	bls.n	800386c <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003858:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800385e:	4b7b      	ldr	r3, [pc, #492]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003860:	885a      	ldrh	r2, [r3, #2]
 8003862:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003864:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003866:	4a79      	ldr	r2, [pc, #484]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 800386c:	4b77      	ldr	r3, [pc, #476]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 800386e:	889b      	ldrh	r3, [r3, #4]
 8003870:	f245 5210 	movw	r2, #21776	; 0x5510
 8003874:	4293      	cmp	r3, r2
 8003876:	f040 80ef 	bne.w	8003a58 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800387a:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 800387c:	895b      	ldrh	r3, [r3, #10]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fb4a 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003884:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388a:	611a      	str	r2, [r3, #16]
 800388c:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800388e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003892:	615a      	str	r2, [r3, #20]
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <LCD_Scan_Dir+0x400>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	615a      	str	r2, [r3, #20]
 80038a0:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	611a      	str	r2, [r3, #16]
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ac:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80038ae:	4b67      	ldr	r3, [pc, #412]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 80038b0:	895b      	ldrh	r3, [r3, #10]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fb2e 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <LCD_Scan_Dir+0x400>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	615a      	str	r2, [r3, #20]
 80038d8:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	611a      	str	r2, [r3, #16]
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80038e6:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 80038e8:	895b      	ldrh	r3, [r3, #10]
 80038ea:	3302      	adds	r3, #2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb12 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80038f4:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fa:	611a      	str	r2, [r3, #16]
 80038fc:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	615a      	str	r2, [r3, #20]
 8003904:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	121a      	asrs	r2, r3, #8
 800390c:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <LCD_Scan_Dir+0x400>)
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	615a      	str	r2, [r3, #20]
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	611a      	str	r2, [r3, #16]
 800391c:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800391e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003922:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003924:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003926:	895b      	ldrh	r3, [r3, #10]
 8003928:	3303      	adds	r3, #3
 800392a:	b29b      	uxth	r3, r3
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff faf3 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800393c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003940:	615a      	str	r2, [r3, #20]
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	3b01      	subs	r3, #1
 8003948:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <LCD_Scan_Dir+0x400>)
 800394a:	b2db      	uxtb	r3, r3
 800394c:	60d3      	str	r3, [r2, #12]
 800394e:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	615a      	str	r2, [r3, #20]
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	611a      	str	r2, [r3, #16]
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800395c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003960:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003962:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003964:	899b      	ldrh	r3, [r3, #12]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fad6 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800396c:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800396e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003972:	611a      	str	r2, [r3, #16]
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397a:	615a      	str	r2, [r3, #20]
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <LCD_Scan_Dir+0x400>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8003996:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003998:	899b      	ldrh	r3, [r3, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff faba 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039aa:	611a      	str	r2, [r3, #16]
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <LCD_Scan_Dir+0x400>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	615a      	str	r2, [r3, #20]
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 80039d0:	899b      	ldrh	r3, [r3, #12]
 80039d2:	3302      	adds	r3, #2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fa9e 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e2:	611a      	str	r2, [r3, #16]
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ea:	615a      	str	r2, [r3, #20]
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 80039ee:	885b      	ldrh	r3, [r3, #2]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	121a      	asrs	r2, r3, #8
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <LCD_Scan_Dir+0x400>)
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	615a      	str	r2, [r3, #20]
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	611a      	str	r2, [r3, #16]
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a0a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003a0e:	899b      	ldrh	r3, [r3, #12]
 8003a10:	3303      	adds	r3, #3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fa7f 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a20:	611a      	str	r2, [r3, #16]
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a28:	615a      	str	r2, [r3, #20]
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <LCD_Scan_Dir+0x3f8>)
 8003a2c:	885b      	ldrh	r3, [r3, #2]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <LCD_Scan_Dir+0x400>)
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	60d3      	str	r3, [r2, #12]
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	615a      	str	r2, [r3, #20]
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <LCD_Scan_Dir+0x3fc>)
 8003a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a48:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003a4a:	e10a      	b.n	8003c62 <LCD_Scan_Dir+0x60e>
 8003a4c:	20000494 	.word	0x20000494
 8003a50:	40011000 	.word	0x40011000
 8003a54:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8003a58:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003a5a:	895b      	ldrh	r3, [r3, #10]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa5b 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003a62:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	615a      	str	r2, [r3, #20]
 8003a72:	4b80      	ldr	r3, [pc, #512]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	4b7d      	ldr	r3, [pc, #500]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	615a      	str	r2, [r3, #20]
 8003a7e:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	4b7a      	ldr	r3, [pc, #488]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003a8c:	4b78      	ldr	r3, [pc, #480]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	4b76      	ldr	r3, [pc, #472]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9a:	615a      	str	r2, [r3, #20]
 8003a9c:	4b75      	ldr	r3, [pc, #468]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	615a      	str	r2, [r3, #20]
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	121a      	asrs	r2, r3, #8
 8003ace:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	615a      	str	r2, [r3, #20]
 8003ad8:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003ae6:	4b62      	ldr	r3, [pc, #392]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af4:	615a      	str	r2, [r3, #20]
 8003af6:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	60d3      	str	r3, [r2, #12]
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	615a      	str	r2, [r3, #20]
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	4b58      	ldr	r3, [pc, #352]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b14:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003b16:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003b18:	899b      	ldrh	r3, [r3, #12]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f9fc 	bl	8002f18 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b26:	611a      	str	r2, [r3, #16]
 8003b28:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2e:	615a      	str	r2, [r3, #20]
 8003b30:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	4b4e      	ldr	r3, [pc, #312]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	615a      	str	r2, [r3, #20]
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	611a      	str	r2, [r3, #16]
 8003b42:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b48:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003b4a:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	615a      	str	r2, [r3, #20]
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	611a      	str	r2, [r3, #16]
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003b74:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003b86:	885b      	ldrh	r3, [r3, #2]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	121a      	asrs	r2, r3, #8
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	611a      	str	r2, [r3, #16]
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003baa:	611a      	str	r2, [r3, #16]
 8003bac:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb2:	615a      	str	r2, [r3, #20]
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <LCD_Scan_Dir+0x618>)
 8003bb6:	885b      	ldrh	r3, [r3, #2]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <LCD_Scan_Dir+0x620>)
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	60d3      	str	r3, [r2, #12]
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	615a      	str	r2, [r3, #20]
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	611a      	str	r2, [r3, #16]
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <LCD_Scan_Dir+0x61c>)
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003bd4:	e045      	b.n	8003c62 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	d836      	bhi.n	8003c4a <LCD_Scan_Dir+0x5f6>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <LCD_Scan_Dir+0x590>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c05 	.word	0x08003c05
 8003be8:	08003c0f 	.word	0x08003c0f
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c4b 	.word	0x08003c4b
 8003bf4:	08003c23 	.word	0x08003c23
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c37 	.word	0x08003c37
 8003c00:	08003c41 	.word	0x08003c41
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003c0a:	81fb      	strh	r3, [r7, #14]
			break;
 8003c0c:	e01d      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	f043 0310 	orr.w	r3, r3, #16
 8003c14:	81fb      	strh	r3, [r7, #14]
			break;
 8003c16:	e018      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	f043 0320 	orr.w	r3, r3, #32
 8003c1e:	81fb      	strh	r3, [r7, #14]
			break;
 8003c20:	e013      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003c22:	89fb      	ldrh	r3, [r7, #14]
 8003c24:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003c28:	81fb      	strh	r3, [r7, #14]
			break;
 8003c2a:	e00e      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003c32:	81fb      	strh	r3, [r7, #14]
			break;
 8003c34:	e009      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003c36:	89fb      	ldrh	r3, [r7, #14]
 8003c38:	f043 0318 	orr.w	r3, r3, #24
 8003c3c:	81fb      	strh	r3, [r7, #14]
			break;
 8003c3e:	e004      	b.n	8003c4a <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	f043 0308 	orr.w	r3, r3, #8
 8003c46:	81fb      	strh	r3, [r7, #14]
			break;
 8003c48:	bf00      	nop
		}
		dirreg = 0X03;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c54:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003c56:	89fa      	ldrh	r2, [r7, #14]
 8003c58:	89bb      	ldrh	r3, [r7, #12]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff f9e7 	bl	8003030 <LCD_WriteReg>
	}
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000494 	.word	0x20000494
 8003c70:	40011000 	.word	0x40011000
 8003c74:	40010c00 	.word	0x40010c00

08003c78 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460a      	mov	r2, r1
 8003c82:	80fb      	strh	r3, [r7, #6]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8003c88:	88ba      	ldrh	r2, [r7, #4]
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fa14 	bl	80030bc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8003c94:	f7ff fa06 	bl	80030a4 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <LCD_DrawPoint+0x54>)
 8003c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <LCD_DrawPoint+0x54>)
 8003ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca6:	615a      	str	r2, [r3, #20]
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <LCD_DrawPoint+0x58>)
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <LCD_DrawPoint+0x5c>)
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <LCD_DrawPoint+0x54>)
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	615a      	str	r2, [r3, #20]
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <LCD_DrawPoint+0x54>)
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	611a      	str	r2, [r3, #16]
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <LCD_DrawPoint+0x54>)
 8003cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc2:	611a      	str	r2, [r3, #16]
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	200000b4 	.word	0x200000b4
 8003cd4:	40010c00 	.word	0x40010c00

08003cd8 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	80bb      	strh	r3, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003cea:	4b75      	ldr	r3, [pc, #468]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003cec:	889b      	ldrh	r3, [r3, #4]
 8003cee:	f249 3241 	movw	r2, #37697	; 0x9341
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d005      	beq.n	8003d02 <LCD_Fast_DrawPoint+0x2a>
 8003cf6:	4b72      	ldr	r3, [pc, #456]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003cf8:	889b      	ldrh	r3, [r3, #4]
 8003cfa:	f245 3210 	movw	r2, #21264	; 0x5310
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d164      	bne.n	8003dcc <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003d04:	895b      	ldrh	r3, [r3, #10]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff f906 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003d0c:	4b6d      	ldr	r3, [pc, #436]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	615a      	str	r2, [r3, #20]
 8003d2c:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003d3a:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	4b60      	ldr	r3, [pc, #384]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	615a      	str	r2, [r3, #20]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	4a5e      	ldr	r2, [pc, #376]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	60d3      	str	r3, [r2, #12]
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	615a      	str	r2, [r3, #20]
 8003d58:	4b5a      	ldr	r3, [pc, #360]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
 8003d5e:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003d66:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003d68:	899b      	ldrh	r3, [r3, #12]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f8d4 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003d70:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7e:	615a      	str	r2, [r3, #20]
 8003d80:	88bb      	ldrh	r3, [r7, #4]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	4b4e      	ldr	r3, [pc, #312]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	615a      	str	r2, [r3, #20]
 8003d90:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	611a      	str	r2, [r3, #16]
 8003d96:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003d9e:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	615a      	str	r2, [r3, #20]
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	60d3      	str	r3, [r2, #12]
 8003db6:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003db8:	2280      	movs	r2, #128	; 0x80
 8003dba:	615a      	str	r2, [r3, #20]
 8003dbc:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	611a      	str	r2, [r3, #16]
 8003dc2:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	e1e6      	b.n	800419a <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8003dcc:	4b3c      	ldr	r3, [pc, #240]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	f245 5210 	movw	r2, #21776	; 0x5510
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d179      	bne.n	8003ecc <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003dda:	895b      	ldrh	r3, [r3, #10]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff f89b 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df0:	615a      	str	r2, [r3, #20]
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	615a      	str	r2, [r3, #20]
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	611a      	str	r2, [r3, #16]
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003e12:	895b      	ldrh	r3, [r3, #10]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f87d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e24:	611a      	str	r2, [r3, #16]
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2c:	615a      	str	r2, [r3, #20]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	60d3      	str	r3, [r2, #12]
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	615a      	str	r2, [r3, #20]
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	611a      	str	r2, [r3, #16]
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003e4c:	899b      	ldrh	r3, [r3, #12]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f862 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5a:	611a      	str	r2, [r3, #16]
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	615a      	str	r2, [r3, #20]
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e80:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <LCD_Fast_DrawPoint+0x1e8>)
 8003e84:	899b      	ldrh	r3, [r3, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f844 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e96:	611a      	str	r2, [r3, #16]
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	88bb      	ldrh	r3, [r7, #4]
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <LCD_Fast_DrawPoint+0x1f0>)
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	60d3      	str	r3, [r2, #12]
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	615a      	str	r2, [r3, #20]
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	611a      	str	r2, [r3, #16]
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <LCD_Fast_DrawPoint+0x1ec>)
 8003eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eba:	611a      	str	r2, [r3, #16]
 8003ebc:	e16d      	b.n	800419a <LCD_Fast_DrawPoint+0x4c2>
 8003ebe:	bf00      	nop
 8003ec0:	20000494 	.word	0x20000494
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8003ecc:	4b68      	ldr	r3, [pc, #416]	; (8004070 <LCD_Fast_DrawPoint+0x398>)
 8003ece:	889b      	ldrh	r3, [r3, #4]
 8003ed0:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f040 80d1 	bne.w	800407c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8003eda:	4b65      	ldr	r3, [pc, #404]	; (8004070 <LCD_Fast_DrawPoint+0x398>)
 8003edc:	799b      	ldrb	r3, [r3, #6]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <LCD_Fast_DrawPoint+0x398>)
 8003ee4:	881a      	ldrh	r2, [r3, #0]
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003ef0:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <LCD_Fast_DrawPoint+0x398>)
 8003ef2:	895b      	ldrh	r3, [r3, #10]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f80f 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003efa:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f08:	615a      	str	r2, [r3, #20]
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	615a      	str	r2, [r3, #20]
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	611a      	str	r2, [r3, #16]
 8003f20:	4b54      	ldr	r3, [pc, #336]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003f28:	4b52      	ldr	r3, [pc, #328]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f2e:	611a      	str	r2, [r3, #16]
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	615a      	str	r2, [r3, #20]
 8003f46:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	4b49      	ldr	r3, [pc, #292]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8003f54:	4b47      	ldr	r3, [pc, #284]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f5a:	611a      	str	r2, [r3, #16]
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f62:	615a      	str	r2, [r3, #20]
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	4b43      	ldr	r3, [pc, #268]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	615a      	str	r2, [r3, #20]
 8003f74:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003f82:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f90:	615a      	str	r2, [r3, #20]
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	60d3      	str	r3, [r2, #12]
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003f9c:	2280      	movs	r2, #128	; 0x80
 8003f9e:	615a      	str	r2, [r3, #20]
 8003fa0:	4b34      	ldr	r3, [pc, #208]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003fae:	4b30      	ldr	r3, [pc, #192]	; (8004070 <LCD_Fast_DrawPoint+0x398>)
 8003fb0:	899b      	ldrh	r3, [r3, #12]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ffb0 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fbe:	611a      	str	r2, [r3, #16]
 8003fc0:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc6:	615a      	str	r2, [r3, #20]
 8003fc8:	88bb      	ldrh	r3, [r7, #4]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	615a      	str	r2, [r3, #20]
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	615a      	str	r2, [r3, #20]
 8003ff6:	88bb      	ldrh	r3, [r7, #4]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	60d3      	str	r3, [r2, #12]
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	615a      	str	r2, [r3, #20]
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800400c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004010:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	615a      	str	r2, [r3, #20]
 8004022:	88bb      	ldrh	r3, [r7, #4]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	615a      	str	r2, [r3, #20]
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	611a      	str	r2, [r3, #16]
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800403a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004046:	611a      	str	r2, [r3, #16]
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800404a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404e:	615a      	str	r2, [r3, #20]
 8004050:	88bb      	ldrh	r3, [r7, #4]
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <LCD_Fast_DrawPoint+0x3a0>)
 8004054:	b2db      	uxtb	r3, r3
 8004056:	60d3      	str	r3, [r2, #12]
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <LCD_Fast_DrawPoint+0x39c>)
 8004066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406a:	611a      	str	r2, [r3, #16]
 800406c:	e095      	b.n	800419a <LCD_Fast_DrawPoint+0x4c2>
 800406e:	bf00      	nop
 8004070:	20000494 	.word	0x20000494
 8004074:	40011000 	.word	0x40011000
 8004078:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 800407c:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 800407e:	889b      	ldrh	r3, [r3, #4]
 8004080:	f646 0204 	movw	r2, #26628	; 0x6804
 8004084:	4293      	cmp	r3, r2
 8004086:	d16f      	bne.n	8004168 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8004088:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 800408a:	799b      	ldrb	r3, [r3, #6]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800409e:	4b56      	ldr	r3, [pc, #344]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 80040a0:	895b      	ldrh	r3, [r3, #10]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe ff38 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80040a8:	4b54      	ldr	r3, [pc, #336]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ae:	611a      	str	r2, [r3, #16]
 80040b0:	4b52      	ldr	r3, [pc, #328]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b6:	615a      	str	r2, [r3, #20]
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b29a      	uxth	r2, r3
 80040be:	4b50      	ldr	r3, [pc, #320]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	615a      	str	r2, [r3, #20]
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	611a      	str	r2, [r3, #16]
 80040ce:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80040d6:	4b49      	ldr	r3, [pc, #292]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e4:	615a      	str	r2, [r3, #20]
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	4a45      	ldr	r2, [pc, #276]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	60d3      	str	r3, [r2, #12]
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	615a      	str	r2, [r3, #20]
 80040f4:	4b41      	ldr	r3, [pc, #260]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	611a      	str	r2, [r3, #16]
 80040fa:	4b40      	ldr	r3, [pc, #256]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80040fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004100:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 8004104:	899b      	ldrh	r3, [r3, #12]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe ff06 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 800410e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004112:	611a      	str	r2, [r3, #16]
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29a      	uxth	r2, r3
 8004122:	4b37      	ldr	r3, [pc, #220]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	4b35      	ldr	r3, [pc, #212]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	615a      	str	r2, [r3, #20]
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	611a      	str	r2, [r3, #16]
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004138:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800413a:	4b30      	ldr	r3, [pc, #192]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 800413c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004148:	615a      	str	r2, [r3, #20]
 800414a:	88bb      	ldrh	r3, [r7, #4]
 800414c:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 800414e:	b2db      	uxtb	r3, r3
 8004150:	60d3      	str	r3, [r2, #12]
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	615a      	str	r2, [r3, #20]
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 8004160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e018      	b.n	800419a <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 800416a:	799b      	ldrb	r3, [r3, #6]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 8004180:	895b      	ldrh	r3, [r3, #10]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe ff52 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 800418c:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 800418e:	899b      	ldrh	r3, [r3, #12]
 8004190:	88ba      	ldrh	r2, [r7, #4]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe ff4b 	bl	8003030 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 800419c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a8:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <LCD_Fast_DrawPoint+0x520>)
 80041ac:	891a      	ldrh	r2, [r3, #8]
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 80041b0:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041cc:	611a      	str	r2, [r3, #16]
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d4:	615a      	str	r2, [r3, #20]
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <LCD_Fast_DrawPoint+0x528>)
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	60d3      	str	r3, [r2, #12]
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	615a      	str	r2, [r3, #20]
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041e4:	2280      	movs	r2, #128	; 0x80
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <LCD_Fast_DrawPoint+0x524>)
 80041ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ee:	611a      	str	r2, [r3, #16]
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000494 	.word	0x20000494
 80041fc:	40011000 	.word	0x40011000
 8004200:	40010c00 	.word	0x40010c00
 8004204:	00000000 	.word	0x00000000

08004208 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8004212:	20be      	movs	r0, #190	; 0xbe
 8004214:	f7fe fe80 	bl	8002f18 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800421a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800421e:	611a      	str	r2, [r3, #16]
 8004220:	4b49      	ldr	r3, [pc, #292]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	615a      	str	r2, [r3, #20]
 8004228:	4b48      	ldr	r3, [pc, #288]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 800422a:	2205      	movs	r2, #5
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	615a      	str	r2, [r3, #20]
 8004234:	4b44      	ldr	r3, [pc, #272]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	4b43      	ldr	r3, [pc, #268]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004240:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004248:	611a      	str	r2, [r3, #16]
 800424a:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800424c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004250:	615a      	str	r2, [r3, #20]
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc f939 	bl	80004cc <__aeabi_i2d>
 800425a:	a339      	add	r3, pc, #228	; (adr r3, 8004340 <LCD_SSD_BackLightSet+0x138>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fc f99e 	bl	80005a0 <__aeabi_dmul>
 8004264:	4603      	mov	r3, r0
 8004266:	460c      	mov	r4, r1
 8004268:	461a      	mov	r2, r3
 800426a:	4623      	mov	r3, r4
 800426c:	4c37      	ldr	r4, [pc, #220]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f7fc fba7 	bl	80009c4 <__aeabi_d2uiz>
 8004276:	4603      	mov	r3, r0
 8004278:	60e3      	str	r3, [r4, #12]
 800427a:	4b33      	ldr	r3, [pc, #204]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004294:	611a      	str	r2, [r3, #16]
 8004296:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	4b28      	ldr	r3, [pc, #160]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	615a      	str	r2, [r3, #20]
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	611a      	str	r2, [r3, #16]
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 80042b8:	4b23      	ldr	r3, [pc, #140]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042be:	611a      	str	r2, [r3, #16]
 80042c0:	4b21      	ldr	r3, [pc, #132]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c6:	615a      	str	r2, [r3, #20]
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 80042ca:	22ff      	movs	r2, #255	; 0xff
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	615a      	str	r2, [r3, #20]
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042d6:	2280      	movs	r2, #128	; 0x80
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80042e2:	4b19      	ldr	r3, [pc, #100]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e8:	611a      	str	r2, [r3, #16]
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f0:	615a      	str	r2, [r3, #20]
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	615a      	str	r2, [r3, #20]
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	611a      	str	r2, [r3, #16]
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800430e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004312:	611a      	str	r2, [r3, #16]
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431a:	615a      	str	r2, [r3, #20]
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <LCD_SSD_BackLightSet+0x144>)
 800431e:	2200      	movs	r2, #0
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	615a      	str	r2, [r3, #20]
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <LCD_SSD_BackLightSet+0x140>)
 8004330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004334:	611a      	str	r2, [r3, #16]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bd90      	pop	{r4, r7, pc}
 800433e:	bf00      	nop
 8004340:	66666666 	.word	0x66666666
 8004344:	40046666 	.word	0x40046666
 8004348:	40011000 	.word	0x40011000
 800434c:	40010c00 	.word	0x40010c00

08004350 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d177      	bne.n	8004450 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8004360:	4b80      	ldr	r3, [pc, #512]	; (8004564 <LCD_Display_Dir+0x214>)
 8004362:	2200      	movs	r2, #0
 8004364:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8004366:	4b7f      	ldr	r3, [pc, #508]	; (8004564 <LCD_Display_Dir+0x214>)
 8004368:	22f0      	movs	r2, #240	; 0xf0
 800436a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 800436c:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <LCD_Display_Dir+0x214>)
 800436e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004372:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004374:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <LCD_Display_Dir+0x214>)
 8004376:	889b      	ldrh	r3, [r3, #4]
 8004378:	f249 3241 	movw	r2, #37697	; 0x9341
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <LCD_Display_Dir+0x48>
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <LCD_Display_Dir+0x214>)
 8004382:	889b      	ldrh	r3, [r3, #4]
 8004384:	f646 0204 	movw	r2, #26628	; 0x6804
 8004388:	4293      	cmp	r3, r2
 800438a:	d005      	beq.n	8004398 <LCD_Display_Dir+0x48>
 800438c:	4b75      	ldr	r3, [pc, #468]	; (8004564 <LCD_Display_Dir+0x214>)
 800438e:	889b      	ldrh	r3, [r3, #4]
 8004390:	f245 3210 	movw	r2, #21264	; 0x5310
 8004394:	4293      	cmp	r3, r2
 8004396:	d11e      	bne.n	80043d6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8004398:	4b72      	ldr	r3, [pc, #456]	; (8004564 <LCD_Display_Dir+0x214>)
 800439a:	222c      	movs	r2, #44	; 0x2c
 800439c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800439e:	4b71      	ldr	r3, [pc, #452]	; (8004564 <LCD_Display_Dir+0x214>)
 80043a0:	222a      	movs	r2, #42	; 0x2a
 80043a2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80043a4:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <LCD_Display_Dir+0x214>)
 80043a6:	222b      	movs	r2, #43	; 0x2b
 80043a8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80043aa:	4b6e      	ldr	r3, [pc, #440]	; (8004564 <LCD_Display_Dir+0x214>)
 80043ac:	889b      	ldrh	r3, [r3, #4]
 80043ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d006      	beq.n	80043c4 <LCD_Display_Dir+0x74>
 80043b6:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <LCD_Display_Dir+0x214>)
 80043b8:	889b      	ldrh	r3, [r3, #4]
 80043ba:	f245 3210 	movw	r2, #21264	; 0x5310
 80043be:	4293      	cmp	r3, r2
 80043c0:	f040 80c7 	bne.w	8004552 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 80043c4:	4b67      	ldr	r3, [pc, #412]	; (8004564 <LCD_Display_Dir+0x214>)
 80043c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043ca:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80043cc:	4b65      	ldr	r3, [pc, #404]	; (8004564 <LCD_Display_Dir+0x214>)
 80043ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80043d2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80043d4:	e0bd      	b.n	8004552 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <LCD_Display_Dir+0x214>)
 80043d8:	889b      	ldrh	r3, [r3, #4]
 80043da:	f245 5210 	movw	r2, #21776	; 0x5510
 80043de:	4293      	cmp	r3, r2
 80043e0:	d114      	bne.n	800440c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80043e2:	4b60      	ldr	r3, [pc, #384]	; (8004564 <LCD_Display_Dir+0x214>)
 80043e4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80043e8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80043ea:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <LCD_Display_Dir+0x214>)
 80043ec:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80043f0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <LCD_Display_Dir+0x214>)
 80043f4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80043f8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80043fa:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <LCD_Display_Dir+0x214>)
 80043fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004400:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8004402:	4b58      	ldr	r3, [pc, #352]	; (8004564 <LCD_Display_Dir+0x214>)
 8004404:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004408:	805a      	strh	r2, [r3, #2]
 800440a:	e0a3      	b.n	8004554 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800440c:	4b55      	ldr	r3, [pc, #340]	; (8004564 <LCD_Display_Dir+0x214>)
 800440e:	889b      	ldrh	r3, [r3, #4]
 8004410:	f641 1263 	movw	r2, #6499	; 0x1963
 8004414:	4293      	cmp	r3, r2
 8004416:	d111      	bne.n	800443c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004418:	4b52      	ldr	r3, [pc, #328]	; (8004564 <LCD_Display_Dir+0x214>)
 800441a:	222c      	movs	r2, #44	; 0x2c
 800441c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <LCD_Display_Dir+0x214>)
 8004420:	222b      	movs	r2, #43	; 0x2b
 8004422:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8004424:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <LCD_Display_Dir+0x214>)
 8004426:	222a      	movs	r2, #42	; 0x2a
 8004428:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800442a:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <LCD_Display_Dir+0x214>)
 800442c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004430:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8004432:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <LCD_Display_Dir+0x214>)
 8004434:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004438:	805a      	strh	r2, [r3, #2]
 800443a:	e08b      	b.n	8004554 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800443c:	4b49      	ldr	r3, [pc, #292]	; (8004564 <LCD_Display_Dir+0x214>)
 800443e:	2222      	movs	r2, #34	; 0x22
 8004440:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <LCD_Display_Dir+0x214>)
 8004444:	2220      	movs	r2, #32
 8004446:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <LCD_Display_Dir+0x214>)
 800444a:	2221      	movs	r2, #33	; 0x21
 800444c:	819a      	strh	r2, [r3, #12]
 800444e:	e081      	b.n	8004554 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8004450:	4b44      	ldr	r3, [pc, #272]	; (8004564 <LCD_Display_Dir+0x214>)
 8004452:	2201      	movs	r2, #1
 8004454:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8004456:	4b43      	ldr	r3, [pc, #268]	; (8004564 <LCD_Display_Dir+0x214>)
 8004458:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800445c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <LCD_Display_Dir+0x214>)
 8004460:	22f0      	movs	r2, #240	; 0xf0
 8004462:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8004464:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <LCD_Display_Dir+0x214>)
 8004466:	889b      	ldrh	r3, [r3, #4]
 8004468:	f249 3241 	movw	r2, #37697	; 0x9341
 800446c:	4293      	cmp	r3, r2
 800446e:	d005      	beq.n	800447c <LCD_Display_Dir+0x12c>
 8004470:	4b3c      	ldr	r3, [pc, #240]	; (8004564 <LCD_Display_Dir+0x214>)
 8004472:	889b      	ldrh	r3, [r3, #4]
 8004474:	f245 3210 	movw	r2, #21264	; 0x5310
 8004478:	4293      	cmp	r3, r2
 800447a:	d109      	bne.n	8004490 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800447c:	4b39      	ldr	r3, [pc, #228]	; (8004564 <LCD_Display_Dir+0x214>)
 800447e:	222c      	movs	r2, #44	; 0x2c
 8004480:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <LCD_Display_Dir+0x214>)
 8004484:	222a      	movs	r2, #42	; 0x2a
 8004486:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004488:	4b36      	ldr	r3, [pc, #216]	; (8004564 <LCD_Display_Dir+0x214>)
 800448a:	222b      	movs	r2, #43	; 0x2b
 800448c:	819a      	strh	r2, [r3, #12]
 800448e:	e04b      	b.n	8004528 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <LCD_Display_Dir+0x214>)
 8004492:	889b      	ldrh	r3, [r3, #4]
 8004494:	f646 0204 	movw	r2, #26628	; 0x6804
 8004498:	4293      	cmp	r3, r2
 800449a:	d109      	bne.n	80044b0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800449c:	4b31      	ldr	r3, [pc, #196]	; (8004564 <LCD_Display_Dir+0x214>)
 800449e:	222c      	movs	r2, #44	; 0x2c
 80044a0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <LCD_Display_Dir+0x214>)
 80044a4:	222b      	movs	r2, #43	; 0x2b
 80044a6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80044a8:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <LCD_Display_Dir+0x214>)
 80044aa:	222a      	movs	r2, #42	; 0x2a
 80044ac:	819a      	strh	r2, [r3, #12]
 80044ae:	e03b      	b.n	8004528 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <LCD_Display_Dir+0x214>)
 80044b2:	889b      	ldrh	r3, [r3, #4]
 80044b4:	f245 5210 	movw	r2, #21776	; 0x5510
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d114      	bne.n	80044e6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <LCD_Display_Dir+0x214>)
 80044be:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80044c2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <LCD_Display_Dir+0x214>)
 80044c6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80044ca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <LCD_Display_Dir+0x214>)
 80044ce:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80044d2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80044d4:	4b23      	ldr	r3, [pc, #140]	; (8004564 <LCD_Display_Dir+0x214>)
 80044d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044da:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <LCD_Display_Dir+0x214>)
 80044de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80044e2:	805a      	strh	r2, [r3, #2]
 80044e4:	e020      	b.n	8004528 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <LCD_Display_Dir+0x214>)
 80044e8:	889b      	ldrh	r3, [r3, #4]
 80044ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <LCD_Display_Dir+0x214>)
 80044f4:	222c      	movs	r2, #44	; 0x2c
 80044f6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <LCD_Display_Dir+0x214>)
 80044fa:	222a      	movs	r2, #42	; 0x2a
 80044fc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <LCD_Display_Dir+0x214>)
 8004500:	222b      	movs	r2, #43	; 0x2b
 8004502:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <LCD_Display_Dir+0x214>)
 8004506:	f44f 7248 	mov.w	r2, #800	; 0x320
 800450a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <LCD_Display_Dir+0x214>)
 800450e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004512:	805a      	strh	r2, [r3, #2]
 8004514:	e008      	b.n	8004528 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <LCD_Display_Dir+0x214>)
 8004518:	2222      	movs	r2, #34	; 0x22
 800451a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <LCD_Display_Dir+0x214>)
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <LCD_Display_Dir+0x214>)
 8004524:	2220      	movs	r2, #32
 8004526:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <LCD_Display_Dir+0x214>)
 800452a:	889b      	ldrh	r3, [r3, #4]
 800452c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004530:	4293      	cmp	r3, r2
 8004532:	d005      	beq.n	8004540 <LCD_Display_Dir+0x1f0>
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <LCD_Display_Dir+0x214>)
 8004536:	889b      	ldrh	r3, [r3, #4]
 8004538:	f245 3210 	movw	r2, #21264	; 0x5310
 800453c:	4293      	cmp	r3, r2
 800453e:	d109      	bne.n	8004554 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <LCD_Display_Dir+0x214>)
 8004542:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004546:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <LCD_Display_Dir+0x214>)
 800454a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800454e:	805a      	strh	r2, [r3, #2]
 8004550:	e000      	b.n	8004554 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004552:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8004554:	2000      	movs	r0, #0
 8004556:	f7ff f87d 	bl	8003654 <LCD_Scan_Dir>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000494 	.word	0x20000494

08004568 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 800456e:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <LCD_Init+0x248>)
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4a8f      	ldr	r2, [pc, #572]	; (80047b0 <LCD_Init+0x248>)
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	6193      	str	r3, [r2, #24]
 800457a:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <LCD_Init+0x248>)
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8004586:	4b8a      	ldr	r3, [pc, #552]	; (80047b0 <LCD_Init+0x248>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	4a89      	ldr	r2, [pc, #548]	; (80047b0 <LCD_Init+0x248>)
 800458c:	f043 0310 	orr.w	r3, r3, #16
 8004590:	6193      	str	r3, [r2, #24]
 8004592:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <LCD_Init+0x248>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 800459e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80045a2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80045a4:	2301      	movs	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80045a8:	2301      	movs	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80045ac:	2303      	movs	r3, #3
 80045ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4619      	mov	r1, r3
 80045b6:	487f      	ldr	r0, [pc, #508]	; (80047b4 <LCD_Init+0x24c>)
 80045b8:	f7fd f8e0 	bl	800177c <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80045bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	4619      	mov	r1, r3
 80045c8:	487b      	ldr	r0, [pc, #492]	; (80047b8 <LCD_Init+0x250>)
 80045ca:	f7fd f8d7 	bl	800177c <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80045ce:	2032      	movs	r0, #50	; 0x32
 80045d0:	f7fc fa7a 	bl	8000ac8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80045d4:	2101      	movs	r1, #1
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fe fd2a 	bl	8003030 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80045dc:	2032      	movs	r0, #50	; 0x32
 80045de:	f7fc fa73 	bl	8000ac8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7fe fd4e 	bl	8003084 <LCD_ReadReg>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b73      	ldr	r3, [pc, #460]	; (80047bc <LCD_Init+0x254>)
 80045ee:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80045f0:	4b72      	ldr	r3, [pc, #456]	; (80047bc <LCD_Init+0x254>)
 80045f2:	889b      	ldrh	r3, [r3, #4]
 80045f4:	2bfe      	cmp	r3, #254	; 0xfe
 80045f6:	d90b      	bls.n	8004610 <LCD_Init+0xa8>
 80045f8:	4b70      	ldr	r3, [pc, #448]	; (80047bc <LCD_Init+0x254>)
 80045fa:	889b      	ldrh	r3, [r3, #4]
 80045fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004600:	4293      	cmp	r3, r2
 8004602:	d005      	beq.n	8004610 <LCD_Init+0xa8>
 8004604:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <LCD_Init+0x254>)
 8004606:	889b      	ldrh	r3, [r3, #4]
 8004608:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800460c:	f040 80c8 	bne.w	80047a0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8004610:	20d3      	movs	r0, #211	; 0xd3
 8004612:	f7fe fc81 	bl	8002f18 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8004616:	f7fe fcc7 	bl	8002fa8 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800461a:	f7fe fcc5 	bl	8002fa8 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800461e:	f7fe fcc3 	bl	8002fa8 <LCD_RD_DATA>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <LCD_Init+0x254>)
 8004628:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800462a:	4b64      	ldr	r3, [pc, #400]	; (80047bc <LCD_Init+0x254>)
 800462c:	889b      	ldrh	r3, [r3, #4]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b29a      	uxth	r2, r3
 8004632:	4b62      	ldr	r3, [pc, #392]	; (80047bc <LCD_Init+0x254>)
 8004634:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8004636:	f7fe fcb7 	bl	8002fa8 <LCD_RD_DATA>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <LCD_Init+0x254>)
 8004640:	889b      	ldrh	r3, [r3, #4]
 8004642:	4313      	orrs	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <LCD_Init+0x254>)
 8004648:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800464a:	4b5c      	ldr	r3, [pc, #368]	; (80047bc <LCD_Init+0x254>)
 800464c:	889b      	ldrh	r3, [r3, #4]
 800464e:	f249 3241 	movw	r2, #37697	; 0x9341
 8004652:	4293      	cmp	r3, r2
 8004654:	f000 80a4 	beq.w	80047a0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004658:	20bf      	movs	r0, #191	; 0xbf
 800465a:	f7fe fc5d 	bl	8002f18 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800465e:	f7fe fca3 	bl	8002fa8 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8004662:	f7fe fca1 	bl	8002fa8 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8004666:	f7fe fc9f 	bl	8002fa8 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800466a:	f7fe fc9d 	bl	8002fa8 <LCD_RD_DATA>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	4b52      	ldr	r3, [pc, #328]	; (80047bc <LCD_Init+0x254>)
 8004674:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8004676:	4b51      	ldr	r3, [pc, #324]	; (80047bc <LCD_Init+0x254>)
 8004678:	889b      	ldrh	r3, [r3, #4]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b29a      	uxth	r2, r3
 800467e:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <LCD_Init+0x254>)
 8004680:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8004682:	f7fe fc91 	bl	8002fa8 <LCD_RD_DATA>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <LCD_Init+0x254>)
 800468c:	889b      	ldrh	r3, [r3, #4]
 800468e:	4313      	orrs	r3, r2
 8004690:	b29a      	uxth	r2, r3
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <LCD_Init+0x254>)
 8004694:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <LCD_Init+0x254>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	f646 0204 	movw	r2, #26628	; 0x6804
 800469e:	4293      	cmp	r3, r2
 80046a0:	d07e      	beq.n	80047a0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80046a2:	20d4      	movs	r0, #212	; 0xd4
 80046a4:	f7fe fc38 	bl	8002f18 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80046a8:	f7fe fc7e 	bl	8002fa8 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80046ac:	f7fe fc7c 	bl	8002fa8 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80046b0:	f7fe fc7a 	bl	8002fa8 <LCD_RD_DATA>
 80046b4:	4603      	mov	r3, r0
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b40      	ldr	r3, [pc, #256]	; (80047bc <LCD_Init+0x254>)
 80046ba:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80046bc:	4b3f      	ldr	r3, [pc, #252]	; (80047bc <LCD_Init+0x254>)
 80046be:	889b      	ldrh	r3, [r3, #4]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <LCD_Init+0x254>)
 80046c6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80046c8:	f7fe fc6e 	bl	8002fa8 <LCD_RD_DATA>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <LCD_Init+0x254>)
 80046d2:	889b      	ldrh	r3, [r3, #4]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	4b38      	ldr	r3, [pc, #224]	; (80047bc <LCD_Init+0x254>)
 80046da:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80046dc:	4b37      	ldr	r3, [pc, #220]	; (80047bc <LCD_Init+0x254>)
 80046de:	889b      	ldrh	r3, [r3, #4]
 80046e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d05b      	beq.n	80047a0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80046e8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80046ec:	f7fe fc14 	bl	8002f18 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80046f0:	f7fe fc5a 	bl	8002fa8 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80046f4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80046f8:	f7fe fc0e 	bl	8002f18 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80046fc:	f7fe fc54 	bl	8002fa8 <LCD_RD_DATA>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <LCD_Init+0x254>)
 8004706:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <LCD_Init+0x254>)
 800470a:	889b      	ldrh	r3, [r3, #4]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	b29a      	uxth	r2, r3
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <LCD_Init+0x254>)
 8004712:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8004714:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004718:	f7fe fbfe 	bl	8002f18 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800471c:	f7fe fc44 	bl	8002fa8 <LCD_RD_DATA>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <LCD_Init+0x254>)
 8004726:	889b      	ldrh	r3, [r3, #4]
 8004728:	4313      	orrs	r3, r2
 800472a:	b29a      	uxth	r2, r3
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <LCD_Init+0x254>)
 800472e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004730:	4b22      	ldr	r3, [pc, #136]	; (80047bc <LCD_Init+0x254>)
 8004732:	889b      	ldrh	r3, [r3, #4]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004738:	d103      	bne.n	8004742 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <LCD_Init+0x254>)
 800473c:	f245 5210 	movw	r2, #21776	; 0x5510
 8004740:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8004742:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <LCD_Init+0x254>)
 8004744:	889b      	ldrh	r3, [r3, #4]
 8004746:	f245 5210 	movw	r2, #21776	; 0x5510
 800474a:	4293      	cmp	r3, r2
 800474c:	d028      	beq.n	80047a0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800474e:	20a1      	movs	r0, #161	; 0xa1
 8004750:	f7fe fbe2 	bl	8002f18 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8004754:	f7fe fc28 	bl	8002fa8 <LCD_RD_DATA>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	4b17      	ldr	r3, [pc, #92]	; (80047bc <LCD_Init+0x254>)
 800475e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004760:	f7fe fc22 	bl	8002fa8 <LCD_RD_DATA>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <LCD_Init+0x254>)
 800476a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <LCD_Init+0x254>)
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <LCD_Init+0x254>)
 8004776:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004778:	f7fe fc16 	bl	8002fa8 <LCD_RD_DATA>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <LCD_Init+0x254>)
 8004782:	889b      	ldrh	r3, [r3, #4]
 8004784:	4313      	orrs	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <LCD_Init+0x254>)
 800478a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <LCD_Init+0x254>)
 800478e:	889b      	ldrh	r3, [r3, #4]
 8004790:	f245 7261 	movw	r2, #22369	; 0x5761
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <LCD_Init+0x254>)
 800479a:	f641 1263 	movw	r2, #6499	; 0x1963
 800479e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <LCD_Init+0x254>)
 80047a2:	889b      	ldrh	r3, [r3, #4]
 80047a4:	f249 3241 	movw	r2, #37697	; 0x9341
 80047a8:	4293      	cmp	r3, r2
 80047aa:	f040 811f 	bne.w	80049ec <LCD_Init+0x484>
 80047ae:	e007      	b.n	80047c0 <LCD_Init+0x258>
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	20000494 	.word	0x20000494
			{
		LCD_WR_REG(0xCF);
 80047c0:	20cf      	movs	r0, #207	; 0xcf
 80047c2:	f7fe fba9 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7fe fbca 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80047cc:	20c1      	movs	r0, #193	; 0xc1
 80047ce:	f7fe fbc7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80047d2:	2030      	movs	r0, #48	; 0x30
 80047d4:	f7fe fbc4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80047d8:	20ed      	movs	r0, #237	; 0xed
 80047da:	f7fe fb9d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80047de:	2064      	movs	r0, #100	; 0x64
 80047e0:	f7fe fbbe 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80047e4:	2003      	movs	r0, #3
 80047e6:	f7fe fbbb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80047ea:	2012      	movs	r0, #18
 80047ec:	f7fe fbb8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80047f0:	2081      	movs	r0, #129	; 0x81
 80047f2:	f7fe fbb5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80047f6:	20e8      	movs	r0, #232	; 0xe8
 80047f8:	f7fe fb8e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80047fc:	2085      	movs	r0, #133	; 0x85
 80047fe:	f7fe fbaf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004802:	2010      	movs	r0, #16
 8004804:	f7fe fbac 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004808:	207a      	movs	r0, #122	; 0x7a
 800480a:	f7fe fba9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800480e:	20cb      	movs	r0, #203	; 0xcb
 8004810:	f7fe fb82 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8004814:	2039      	movs	r0, #57	; 0x39
 8004816:	f7fe fba3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800481a:	202c      	movs	r0, #44	; 0x2c
 800481c:	f7fe fba0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004820:	2000      	movs	r0, #0
 8004822:	f7fe fb9d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004826:	2034      	movs	r0, #52	; 0x34
 8004828:	f7fe fb9a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800482c:	2002      	movs	r0, #2
 800482e:	f7fe fb97 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8004832:	20f7      	movs	r0, #247	; 0xf7
 8004834:	f7fe fb70 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004838:	2020      	movs	r0, #32
 800483a:	f7fe fb91 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800483e:	20ea      	movs	r0, #234	; 0xea
 8004840:	f7fe fb6a 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004844:	2000      	movs	r0, #0
 8004846:	f7fe fb8b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7fe fb88 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004850:	20c0      	movs	r0, #192	; 0xc0
 8004852:	f7fe fb61 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8004856:	201b      	movs	r0, #27
 8004858:	f7fe fb82 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800485c:	20c1      	movs	r0, #193	; 0xc1
 800485e:	f7fe fb5b 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8004862:	2001      	movs	r0, #1
 8004864:	f7fe fb7c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004868:	20c5      	movs	r0, #197	; 0xc5
 800486a:	f7fe fb55 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800486e:	2030      	movs	r0, #48	; 0x30
 8004870:	f7fe fb76 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8004874:	2030      	movs	r0, #48	; 0x30
 8004876:	f7fe fb73 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800487a:	20c7      	movs	r0, #199	; 0xc7
 800487c:	f7fe fb4c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004880:	20b7      	movs	r0, #183	; 0xb7
 8004882:	f7fe fb6d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8004886:	2036      	movs	r0, #54	; 0x36
 8004888:	f7fe fb46 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800488c:	2048      	movs	r0, #72	; 0x48
 800488e:	f7fe fb67 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8004892:	203a      	movs	r0, #58	; 0x3a
 8004894:	f7fe fb40 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004898:	2055      	movs	r0, #85	; 0x55
 800489a:	f7fe fb61 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800489e:	20b1      	movs	r0, #177	; 0xb1
 80048a0:	f7fe fb3a 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fe fb5b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80048aa:	201a      	movs	r0, #26
 80048ac:	f7fe fb58 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80048b0:	20b6      	movs	r0, #182	; 0xb6
 80048b2:	f7fe fb31 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80048b6:	200a      	movs	r0, #10
 80048b8:	f7fe fb52 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80048bc:	20a2      	movs	r0, #162	; 0xa2
 80048be:	f7fe fb4f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80048c2:	20f2      	movs	r0, #242	; 0xf2
 80048c4:	f7fe fb28 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7fe fb49 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80048ce:	2026      	movs	r0, #38	; 0x26
 80048d0:	f7fe fb22 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80048d4:	2001      	movs	r0, #1
 80048d6:	f7fe fb43 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80048da:	20e0      	movs	r0, #224	; 0xe0
 80048dc:	f7fe fb1c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80048e0:	200f      	movs	r0, #15
 80048e2:	f7fe fb3d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80048e6:	202a      	movs	r0, #42	; 0x2a
 80048e8:	f7fe fb3a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80048ec:	2028      	movs	r0, #40	; 0x28
 80048ee:	f7fe fb37 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80048f2:	2008      	movs	r0, #8
 80048f4:	f7fe fb34 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80048f8:	200e      	movs	r0, #14
 80048fa:	f7fe fb31 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80048fe:	2008      	movs	r0, #8
 8004900:	f7fe fb2e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004904:	2054      	movs	r0, #84	; 0x54
 8004906:	f7fe fb2b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800490a:	20a9      	movs	r0, #169	; 0xa9
 800490c:	f7fe fb28 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004910:	2043      	movs	r0, #67	; 0x43
 8004912:	f7fe fb25 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8004916:	200a      	movs	r0, #10
 8004918:	f7fe fb22 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800491c:	200f      	movs	r0, #15
 800491e:	f7fe fb1f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004922:	2000      	movs	r0, #0
 8004924:	f7fe fb1c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004928:	2000      	movs	r0, #0
 800492a:	f7fe fb19 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800492e:	2000      	movs	r0, #0
 8004930:	f7fe fb16 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004934:	2000      	movs	r0, #0
 8004936:	f7fe fb13 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800493a:	20e1      	movs	r0, #225	; 0xe1
 800493c:	f7fe faec 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004940:	2000      	movs	r0, #0
 8004942:	f7fe fb0d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8004946:	2015      	movs	r0, #21
 8004948:	f7fe fb0a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800494c:	2017      	movs	r0, #23
 800494e:	f7fe fb07 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004952:	2007      	movs	r0, #7
 8004954:	f7fe fb04 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004958:	2011      	movs	r0, #17
 800495a:	f7fe fb01 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800495e:	2006      	movs	r0, #6
 8004960:	f7fe fafe 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004964:	202b      	movs	r0, #43	; 0x2b
 8004966:	f7fe fafb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800496a:	2056      	movs	r0, #86	; 0x56
 800496c:	f7fe faf8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004970:	203c      	movs	r0, #60	; 0x3c
 8004972:	f7fe faf5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004976:	2005      	movs	r0, #5
 8004978:	f7fe faf2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800497c:	2010      	movs	r0, #16
 800497e:	f7fe faef 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004982:	200f      	movs	r0, #15
 8004984:	f7fe faec 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004988:	203f      	movs	r0, #63	; 0x3f
 800498a:	f7fe fae9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800498e:	203f      	movs	r0, #63	; 0x3f
 8004990:	f7fe fae6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004994:	200f      	movs	r0, #15
 8004996:	f7fe fae3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800499a:	202b      	movs	r0, #43	; 0x2b
 800499c:	f7fe fabc 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fe fadd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fe fada 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80049ac:	2001      	movs	r0, #1
 80049ae:	f7fe fad7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80049b2:	203f      	movs	r0, #63	; 0x3f
 80049b4:	f7fe fad4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80049b8:	202a      	movs	r0, #42	; 0x2a
 80049ba:	f7fe faad 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fe face 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fe facb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fe fac8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80049d0:	20ef      	movs	r0, #239	; 0xef
 80049d2:	f7fe fac5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80049d6:	2011      	movs	r0, #17
 80049d8:	f7fe fa9e 	bl	8002f18 <LCD_WR_REG>
		HAL_Delay(120);
 80049dc:	2078      	movs	r0, #120	; 0x78
 80049de:	f7fc f873 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80049e2:	2029      	movs	r0, #41	; 0x29
 80049e4:	f7fe fa98 	bl	8002f18 <LCD_WR_REG>
 80049e8:	f003 bcd8 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <LCD_Init+0x5e8>)
 80049ee:	889b      	ldrh	r3, [r3, #4]
 80049f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80049f4:	4293      	cmp	r3, r2
 80049f6:	f040 80ad 	bne.w	8004b54 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80049fa:	2011      	movs	r0, #17
 80049fc:	f7fe fa8c 	bl	8002f18 <LCD_WR_REG>
		HAL_Delay(20);
 8004a00:	2014      	movs	r0, #20
 8004a02:	f7fc f861 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004a06:	20d0      	movs	r0, #208	; 0xd0
 8004a08:	f7fe fa86 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8004a0c:	2007      	movs	r0, #7
 8004a0e:	f7fe faa7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004a12:	2042      	movs	r0, #66	; 0x42
 8004a14:	f7fe faa4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004a18:	201d      	movs	r0, #29
 8004a1a:	f7fe faa1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8004a1e:	20d1      	movs	r0, #209	; 0xd1
 8004a20:	f7fe fa7a 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7fe fa9b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8004a2a:	201a      	movs	r0, #26
 8004a2c:	f7fe fa98 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004a30:	2009      	movs	r0, #9
 8004a32:	f7fe fa95 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004a36:	20d2      	movs	r0, #210	; 0xd2
 8004a38:	f7fe fa6e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f7fe fa8f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8004a42:	2022      	movs	r0, #34	; 0x22
 8004a44:	f7fe fa8c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004a48:	20c0      	movs	r0, #192	; 0xc0
 8004a4a:	f7fe fa65 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8004a4e:	2010      	movs	r0, #16
 8004a50:	f7fe fa86 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004a54:	203b      	movs	r0, #59	; 0x3b
 8004a56:	f7fe fa83 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7fe fa80 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004a60:	2002      	movs	r0, #2
 8004a62:	f7fe fa7d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004a66:	2011      	movs	r0, #17
 8004a68:	f7fe fa7a 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8004a6c:	20c5      	movs	r0, #197	; 0xc5
 8004a6e:	f7fe fa53 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8004a72:	2003      	movs	r0, #3
 8004a74:	f7fe fa74 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004a78:	20c8      	movs	r0, #200	; 0xc8
 8004a7a:	f7fe fa4d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7fe fa6e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004a84:	2025      	movs	r0, #37	; 0x25
 8004a86:	f7fe fa6b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8004a8a:	2021      	movs	r0, #33	; 0x21
 8004a8c:	f7fe fa68 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8004a90:	2005      	movs	r0, #5
 8004a92:	f7fe fa65 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fe fa62 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8004a9c:	200a      	movs	r0, #10
 8004a9e:	f7fe fa5f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8004aa2:	2065      	movs	r0, #101	; 0x65
 8004aa4:	f7fe fa5c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004aa8:	2025      	movs	r0, #37	; 0x25
 8004aaa:	f7fe fa59 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8004aae:	2077      	movs	r0, #119	; 0x77
 8004ab0:	f7fe fa56 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8004ab4:	2050      	movs	r0, #80	; 0x50
 8004ab6:	f7fe fa53 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8004aba:	200f      	movs	r0, #15
 8004abc:	f7fe fa50 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7fe fa4d 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8004ac6:	20f8      	movs	r0, #248	; 0xf8
 8004ac8:	f7fe fa26 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004acc:	2001      	movs	r0, #1
 8004ace:	f7fe fa47 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8004ad2:	20fe      	movs	r0, #254	; 0xfe
 8004ad4:	f7fe fa20 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fe fa41 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004ade:	2002      	movs	r0, #2
 8004ae0:	f7fe fa3e 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8004ae4:	2020      	movs	r0, #32
 8004ae6:	f7fe fa17 	bl	8002f18 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8004aea:	2036      	movs	r0, #54	; 0x36
 8004aec:	f7fe fa14 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8004af0:	2008      	movs	r0, #8
 8004af2:	f7fe fa35 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8004af6:	203a      	movs	r0, #58	; 0x3a
 8004af8:	f7fe fa0e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8004afc:	2055      	movs	r0, #85	; 0x55
 8004afe:	f7fe fa2f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8004b02:	202b      	movs	r0, #43	; 0x2b
 8004b04:	f7fe fa08 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7fe fa29 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fe fa26 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fe fa23 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8004b1a:	203f      	movs	r0, #63	; 0x3f
 8004b1c:	f7fe fa20 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004b20:	202a      	movs	r0, #42	; 0x2a
 8004b22:	f7fe f9f9 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fe fa1a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f7fe fa17 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7fe fa14 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004b38:	20df      	movs	r0, #223	; 0xdf
 8004b3a:	f7fe fa11 	bl	8002f60 <LCD_WR_DATAX>
		HAL_Delay(120);
 8004b3e:	2078      	movs	r0, #120	; 0x78
 8004b40:	f7fb ffc2 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0X29);
 8004b44:	2029      	movs	r0, #41	; 0x29
 8004b46:	f7fe f9e7 	bl	8002f18 <LCD_WR_REG>
 8004b4a:	f003 bc27 	b.w	800839c <LCD_Init+0x3e34>
 8004b4e:	bf00      	nop
 8004b50:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0x5310) {
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <LCD_Init+0x5fc>)
 8004b56:	889b      	ldrh	r3, [r3, #4]
 8004b58:	f245 3210 	movw	r2, #21264	; 0x5310
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	f040 877c 	bne.w	8005a5a <LCD_Init+0x14f2>
 8004b62:	e001      	b.n	8004b68 <LCD_Init+0x600>
 8004b64:	20000494 	.word	0x20000494
		LCD_WR_REG(0xED);
 8004b68:	20ed      	movs	r0, #237	; 0xed
 8004b6a:	f7fe f9d5 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fe f9f6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8004b74:	20fe      	movs	r0, #254	; 0xfe
 8004b76:	f7fe f9f3 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8004b7a:	20ee      	movs	r0, #238	; 0xee
 8004b7c:	f7fe f9cc 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004b80:	20de      	movs	r0, #222	; 0xde
 8004b82:	f7fe f9ed 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004b86:	2021      	movs	r0, #33	; 0x21
 8004b88:	f7fe f9ea 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8004b8c:	20f1      	movs	r0, #241	; 0xf1
 8004b8e:	f7fe f9c3 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004b92:	2001      	movs	r0, #1
 8004b94:	f7fe f9e4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8004b98:	20df      	movs	r0, #223	; 0xdf
 8004b9a:	f7fe f9bd 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8004b9e:	2010      	movs	r0, #16
 8004ba0:	f7fe f9de 	bl	8002f60 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004ba4:	20c4      	movs	r0, #196	; 0xc4
 8004ba6:	f7fe f9b7 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8004baa:	208f      	movs	r0, #143	; 0x8f
 8004bac:	f7fe f9d8 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004bb0:	20c6      	movs	r0, #198	; 0xc6
 8004bb2:	f7fe f9b1 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fe f9d2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004bbc:	20e2      	movs	r0, #226	; 0xe2
 8004bbe:	f7fe f9cf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004bc2:	20e2      	movs	r0, #226	; 0xe2
 8004bc4:	f7fe f9cc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004bc8:	20e2      	movs	r0, #226	; 0xe2
 8004bca:	f7fe f9c9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8004bce:	20bf      	movs	r0, #191	; 0xbf
 8004bd0:	f7fe f9a2 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004bd4:	20aa      	movs	r0, #170	; 0xaa
 8004bd6:	f7fe f9c3 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8004bda:	20b0      	movs	r0, #176	; 0xb0
 8004bdc:	f7fe f99c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8004be0:	200d      	movs	r0, #13
 8004be2:	f7fe f9bd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be6:	2000      	movs	r0, #0
 8004be8:	f7fe f9ba 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8004bec:	200d      	movs	r0, #13
 8004bee:	f7fe f9b7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fe f9b4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004bf8:	2011      	movs	r0, #17
 8004bfa:	f7fe f9b1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fe f9ae 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8004c04:	2019      	movs	r0, #25
 8004c06:	f7fe f9ab 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7fe f9a8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004c10:	2021      	movs	r0, #33	; 0x21
 8004c12:	f7fe f9a5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fe f9a2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8004c1c:	202d      	movs	r0, #45	; 0x2d
 8004c1e:	f7fe f99f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7fe f99c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004c28:	203d      	movs	r0, #61	; 0x3d
 8004c2a:	f7fe f999 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7fe f996 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004c34:	205d      	movs	r0, #93	; 0x5d
 8004c36:	f7fe f993 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7fe f990 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004c40:	205d      	movs	r0, #93	; 0x5d
 8004c42:	f7fe f98d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7fe f98a 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8004c4c:	20b1      	movs	r0, #177	; 0xb1
 8004c4e:	f7fe f963 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8004c52:	2080      	movs	r0, #128	; 0x80
 8004c54:	f7fe f984 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7fe f981 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004c5e:	208b      	movs	r0, #139	; 0x8b
 8004c60:	f7fe f97e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7fe f97b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004c6a:	2096      	movs	r0, #150	; 0x96
 8004c6c:	f7fe f978 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fe f975 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8004c76:	20b2      	movs	r0, #178	; 0xb2
 8004c78:	f7fe f94e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fe f96f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c82:	2000      	movs	r0, #0
 8004c84:	f7fe f96c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004c88:	2002      	movs	r0, #2
 8004c8a:	f7fe f969 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fe f966 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7fe f963 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7fe f960 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8004ca0:	20b3      	movs	r0, #179	; 0xb3
 8004ca2:	f7fe f939 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fe f95a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fe f957 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7fe f954 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7fe f951 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7fe f94e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fe f94b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7fe f948 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7fe f945 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fe f942 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f7fe f93f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f7fe f93c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f7fe f939 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fe f936 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f7fe f933 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7fe f930 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fe f92d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fe f92a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fe f927 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fe f924 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f7fe f921 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fe f91e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7fe f91b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7fe f918 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7fe f915 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8004d36:	20b4      	movs	r0, #180	; 0xb4
 8004d38:	f7fe f8ee 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8004d3c:	208b      	movs	r0, #139	; 0x8b
 8004d3e:	f7fe f90f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fe f90c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004d48:	2096      	movs	r0, #150	; 0x96
 8004d4a:	f7fe f909 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fe f906 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8004d54:	20a1      	movs	r0, #161	; 0xa1
 8004d56:	f7fe f903 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fe f900 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004d60:	20b5      	movs	r0, #181	; 0xb5
 8004d62:	f7fe f8d9 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8004d66:	2002      	movs	r0, #2
 8004d68:	f7fe f8fa 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f7fe f8f7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004d72:	2003      	movs	r0, #3
 8004d74:	f7fe f8f4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fe f8f1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004d7e:	2004      	movs	r0, #4
 8004d80:	f7fe f8ee 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fe f8eb 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8004d8a:	20b6      	movs	r0, #182	; 0xb6
 8004d8c:	f7fe f8c4 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d90:	2000      	movs	r0, #0
 8004d92:	f7fe f8e5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fe f8e2 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8004d9c:	20b7      	movs	r0, #183	; 0xb7
 8004d9e:	f7fe f8bb 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7fe f8dc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f7fe f8d9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004dae:	203f      	movs	r0, #63	; 0x3f
 8004db0:	f7fe f8d6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fe f8d3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8004dba:	205e      	movs	r0, #94	; 0x5e
 8004dbc:	f7fe f8d0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f7fe f8cd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004dc6:	2064      	movs	r0, #100	; 0x64
 8004dc8:	f7fe f8ca 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f7fe f8c7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8004dd2:	208c      	movs	r0, #140	; 0x8c
 8004dd4:	f7fe f8c4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fe f8c1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8004dde:	20ac      	movs	r0, #172	; 0xac
 8004de0:	f7fe f8be 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fe f8bb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004dea:	20dc      	movs	r0, #220	; 0xdc
 8004dec:	f7fe f8b8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f7fe f8b5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8004df6:	2070      	movs	r0, #112	; 0x70
 8004df8:	f7fe f8b2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fe f8af 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8004e02:	2090      	movs	r0, #144	; 0x90
 8004e04:	f7fe f8ac 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fe f8a9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004e0e:	20eb      	movs	r0, #235	; 0xeb
 8004e10:	f7fe f8a6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fe f8a3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004e1a:	20dc      	movs	r0, #220	; 0xdc
 8004e1c:	f7fe f8a0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fe f89d 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8004e26:	20b8      	movs	r0, #184	; 0xb8
 8004e28:	f7fe f876 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fe f897 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7fe f894 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7fe f891 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7fe f88e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7fe f88b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7fe f888 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7fe f885 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fe f882 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8004e5c:	20ba      	movs	r0, #186	; 0xba
 8004e5e:	f7fe f85b 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8004e62:	2024      	movs	r0, #36	; 0x24
 8004e64:	f7fe f87c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fe f879 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fe f876 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fe f873 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8004e7a:	20c1      	movs	r0, #193	; 0xc1
 8004e7c:	f7fe f84c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004e80:	2020      	movs	r0, #32
 8004e82:	f7fe f86d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7fe f86a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004e8c:	2054      	movs	r0, #84	; 0x54
 8004e8e:	f7fe f867 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fe f864 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8004e98:	20ff      	movs	r0, #255	; 0xff
 8004e9a:	f7fe f861 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7fe f85e 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8004ea4:	20c2      	movs	r0, #194	; 0xc2
 8004ea6:	f7fe f837 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004eaa:	200a      	movs	r0, #10
 8004eac:	f7fe f858 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7fe f855 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004eb6:	2004      	movs	r0, #4
 8004eb8:	f7fe f852 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7fe f84f 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8004ec2:	20c3      	movs	r0, #195	; 0xc3
 8004ec4:	f7fe f828 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004ec8:	203c      	movs	r0, #60	; 0x3c
 8004eca:	f7fe f849 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fe f846 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8004ed4:	203a      	movs	r0, #58	; 0x3a
 8004ed6:	f7fe f843 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7fe f840 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004ee0:	2039      	movs	r0, #57	; 0x39
 8004ee2:	f7fe f83d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fe f83a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004eec:	2037      	movs	r0, #55	; 0x37
 8004eee:	f7fe f837 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7fe f834 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004ef8:	203c      	movs	r0, #60	; 0x3c
 8004efa:	f7fe f831 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fe f82e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004f04:	2036      	movs	r0, #54	; 0x36
 8004f06:	f7fe f82b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fe f828 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004f10:	2032      	movs	r0, #50	; 0x32
 8004f12:	f7fe f825 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fe f822 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004f1c:	202f      	movs	r0, #47	; 0x2f
 8004f1e:	f7fe f81f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fe f81c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004f28:	202c      	movs	r0, #44	; 0x2c
 8004f2a:	f7fe f819 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fe f816 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004f34:	2029      	movs	r0, #41	; 0x29
 8004f36:	f7fe f813 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fe f810 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004f40:	2026      	movs	r0, #38	; 0x26
 8004f42:	f7fe f80d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fe f80a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004f4c:	2024      	movs	r0, #36	; 0x24
 8004f4e:	f7fe f807 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7fe f804 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004f58:	2024      	movs	r0, #36	; 0x24
 8004f5a:	f7fe f801 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fd fffe 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004f64:	2023      	movs	r0, #35	; 0x23
 8004f66:	f7fd fffb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	f7fd fff8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004f70:	203c      	movs	r0, #60	; 0x3c
 8004f72:	f7fd fff5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f76:	2000      	movs	r0, #0
 8004f78:	f7fd fff2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004f7c:	2036      	movs	r0, #54	; 0x36
 8004f7e:	f7fd ffef 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f7fd ffec 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004f88:	2032      	movs	r0, #50	; 0x32
 8004f8a:	f7fd ffe9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fd ffe6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004f94:	202f      	movs	r0, #47	; 0x2f
 8004f96:	f7fd ffe3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fd ffe0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004fa0:	202c      	movs	r0, #44	; 0x2c
 8004fa2:	f7fd ffdd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7fd ffda 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004fac:	2029      	movs	r0, #41	; 0x29
 8004fae:	f7fd ffd7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f7fd ffd4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004fb8:	2026      	movs	r0, #38	; 0x26
 8004fba:	f7fd ffd1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f7fd ffce 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004fc4:	2024      	movs	r0, #36	; 0x24
 8004fc6:	f7fd ffcb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f7fd ffc8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004fd0:	2024      	movs	r0, #36	; 0x24
 8004fd2:	f7fd ffc5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f7fd ffc2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004fdc:	2023      	movs	r0, #35	; 0x23
 8004fde:	f7fd ffbf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7fd ffbc 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004fe8:	20c4      	movs	r0, #196	; 0xc4
 8004fea:	f7fd ff95 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8004fee:	2062      	movs	r0, #98	; 0x62
 8004ff0:	f7fd ffb6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fd ffb3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004ffa:	2005      	movs	r0, #5
 8004ffc:	f7fd ffb0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005000:	2000      	movs	r0, #0
 8005002:	f7fd ffad 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005006:	2084      	movs	r0, #132	; 0x84
 8005008:	f7fd ffaa 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fd ffa7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8005012:	20f0      	movs	r0, #240	; 0xf0
 8005014:	f7fd ffa4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fd ffa1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800501e:	2018      	movs	r0, #24
 8005020:	f7fd ff9e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005024:	2000      	movs	r0, #0
 8005026:	f7fd ff9b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800502a:	20a4      	movs	r0, #164	; 0xa4
 800502c:	f7fd ff98 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005030:	2000      	movs	r0, #0
 8005032:	f7fd ff95 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8005036:	2018      	movs	r0, #24
 8005038:	f7fd ff92 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503c:	2000      	movs	r0, #0
 800503e:	f7fd ff8f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005042:	2050      	movs	r0, #80	; 0x50
 8005044:	f7fd ff8c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005048:	2000      	movs	r0, #0
 800504a:	f7fd ff89 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800504e:	200c      	movs	r0, #12
 8005050:	f7fd ff86 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005054:	2000      	movs	r0, #0
 8005056:	f7fd ff83 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800505a:	2017      	movs	r0, #23
 800505c:	f7fd ff80 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005060:	2000      	movs	r0, #0
 8005062:	f7fd ff7d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8005066:	2095      	movs	r0, #149	; 0x95
 8005068:	f7fd ff7a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800506c:	2000      	movs	r0, #0
 800506e:	f7fd ff77 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005072:	20f3      	movs	r0, #243	; 0xf3
 8005074:	f7fd ff74 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005078:	2000      	movs	r0, #0
 800507a:	f7fd ff71 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800507e:	20e6      	movs	r0, #230	; 0xe6
 8005080:	f7fd ff6e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005084:	2000      	movs	r0, #0
 8005086:	f7fd ff6b 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800508a:	20c5      	movs	r0, #197	; 0xc5
 800508c:	f7fd ff44 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005090:	2032      	movs	r0, #50	; 0x32
 8005092:	f7fd ff65 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005096:	2000      	movs	r0, #0
 8005098:	f7fd ff62 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800509c:	2044      	movs	r0, #68	; 0x44
 800509e:	f7fd ff5f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7fd ff5c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80050a8:	2065      	movs	r0, #101	; 0x65
 80050aa:	f7fd ff59 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ae:	2000      	movs	r0, #0
 80050b0:	f7fd ff56 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80050b4:	2076      	movs	r0, #118	; 0x76
 80050b6:	f7fd ff53 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7fd ff50 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80050c0:	2088      	movs	r0, #136	; 0x88
 80050c2:	f7fd ff4d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fd ff4a 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80050cc:	20c6      	movs	r0, #198	; 0xc6
 80050ce:	f7fd ff23 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80050d2:	2020      	movs	r0, #32
 80050d4:	f7fd ff44 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050d8:	2000      	movs	r0, #0
 80050da:	f7fd ff41 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80050de:	2017      	movs	r0, #23
 80050e0:	f7fd ff3e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7fd ff3b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fd ff38 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7fd ff35 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80050f6:	20c7      	movs	r0, #199	; 0xc7
 80050f8:	f7fd ff0e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fd ff2f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005102:	2000      	movs	r0, #0
 8005104:	f7fd ff2c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005108:	2000      	movs	r0, #0
 800510a:	f7fd ff29 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800510e:	2000      	movs	r0, #0
 8005110:	f7fd ff26 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8005114:	20c8      	movs	r0, #200	; 0xc8
 8005116:	f7fd feff 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800511a:	2000      	movs	r0, #0
 800511c:	f7fd ff20 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005120:	2000      	movs	r0, #0
 8005122:	f7fd ff1d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005126:	2000      	movs	r0, #0
 8005128:	f7fd ff1a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800512c:	2000      	movs	r0, #0
 800512e:	f7fd ff17 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8005132:	20c9      	movs	r0, #201	; 0xc9
 8005134:	f7fd fef0 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005138:	2000      	movs	r0, #0
 800513a:	f7fd ff11 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800513e:	2000      	movs	r0, #0
 8005140:	f7fd ff0e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005144:	2000      	movs	r0, #0
 8005146:	f7fd ff0b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800514a:	2000      	movs	r0, #0
 800514c:	f7fd ff08 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005150:	2000      	movs	r0, #0
 8005152:	f7fd ff05 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005156:	2000      	movs	r0, #0
 8005158:	f7fd ff02 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd feff 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005162:	2000      	movs	r0, #0
 8005164:	f7fd fefc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005168:	2000      	movs	r0, #0
 800516a:	f7fd fef9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800516e:	2000      	movs	r0, #0
 8005170:	f7fd fef6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005174:	2000      	movs	r0, #0
 8005176:	f7fd fef3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800517a:	2000      	movs	r0, #0
 800517c:	f7fd fef0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005180:	2000      	movs	r0, #0
 8005182:	f7fd feed 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005186:	2000      	movs	r0, #0
 8005188:	f7fd feea 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518c:	2000      	movs	r0, #0
 800518e:	f7fd fee7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005192:	2000      	movs	r0, #0
 8005194:	f7fd fee4 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8005198:	20e0      	movs	r0, #224	; 0xe0
 800519a:	f7fd febd 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800519e:	2016      	movs	r0, #22
 80051a0:	f7fd fede 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7fd fedb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80051aa:	201c      	movs	r0, #28
 80051ac:	f7fd fed8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7fd fed5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80051b6:	2021      	movs	r0, #33	; 0x21
 80051b8:	f7fd fed2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051bc:	2000      	movs	r0, #0
 80051be:	f7fd fecf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80051c2:	2036      	movs	r0, #54	; 0x36
 80051c4:	f7fd fecc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fd fec9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 80051ce:	2046      	movs	r0, #70	; 0x46
 80051d0:	f7fd fec6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7fd fec3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80051da:	2052      	movs	r0, #82	; 0x52
 80051dc:	f7fd fec0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e0:	2000      	movs	r0, #0
 80051e2:	f7fd febd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80051e6:	2064      	movs	r0, #100	; 0x64
 80051e8:	f7fd feba 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fd feb7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80051f2:	207a      	movs	r0, #122	; 0x7a
 80051f4:	f7fd feb4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f7fd feb1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80051fe:	208b      	movs	r0, #139	; 0x8b
 8005200:	f7fd feae 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005204:	2000      	movs	r0, #0
 8005206:	f7fd feab 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800520a:	2099      	movs	r0, #153	; 0x99
 800520c:	f7fd fea8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005210:	2000      	movs	r0, #0
 8005212:	f7fd fea5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8005216:	20a8      	movs	r0, #168	; 0xa8
 8005218:	f7fd fea2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800521c:	2000      	movs	r0, #0
 800521e:	f7fd fe9f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8005222:	20b9      	movs	r0, #185	; 0xb9
 8005224:	f7fd fe9c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005228:	2000      	movs	r0, #0
 800522a:	f7fd fe99 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800522e:	20c4      	movs	r0, #196	; 0xc4
 8005230:	f7fd fe96 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005234:	2000      	movs	r0, #0
 8005236:	f7fd fe93 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800523a:	20ca      	movs	r0, #202	; 0xca
 800523c:	f7fd fe90 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005240:	2000      	movs	r0, #0
 8005242:	f7fd fe8d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8005246:	20d2      	movs	r0, #210	; 0xd2
 8005248:	f7fd fe8a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800524c:	2000      	movs	r0, #0
 800524e:	f7fd fe87 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8005252:	20d9      	movs	r0, #217	; 0xd9
 8005254:	f7fd fe84 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005258:	2000      	movs	r0, #0
 800525a:	f7fd fe81 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800525e:	20e0      	movs	r0, #224	; 0xe0
 8005260:	f7fd fe7e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005264:	2000      	movs	r0, #0
 8005266:	f7fd fe7b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800526a:	20f3      	movs	r0, #243	; 0xf3
 800526c:	f7fd fe78 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005270:	2000      	movs	r0, #0
 8005272:	f7fd fe75 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8005276:	20e1      	movs	r0, #225	; 0xe1
 8005278:	f7fd fe4e 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800527c:	2016      	movs	r0, #22
 800527e:	f7fd fe6f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005282:	2000      	movs	r0, #0
 8005284:	f7fd fe6c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005288:	201c      	movs	r0, #28
 800528a:	f7fd fe69 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528e:	2000      	movs	r0, #0
 8005290:	f7fd fe66 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8005294:	2022      	movs	r0, #34	; 0x22
 8005296:	f7fd fe63 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800529a:	2000      	movs	r0, #0
 800529c:	f7fd fe60 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80052a0:	2036      	movs	r0, #54	; 0x36
 80052a2:	f7fd fe5d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a6:	2000      	movs	r0, #0
 80052a8:	f7fd fe5a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80052ac:	2045      	movs	r0, #69	; 0x45
 80052ae:	f7fd fe57 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7fd fe54 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80052b8:	2052      	movs	r0, #82	; 0x52
 80052ba:	f7fd fe51 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fd fe4e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80052c4:	2064      	movs	r0, #100	; 0x64
 80052c6:	f7fd fe4b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7fd fe48 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80052d0:	207a      	movs	r0, #122	; 0x7a
 80052d2:	f7fd fe45 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d6:	2000      	movs	r0, #0
 80052d8:	f7fd fe42 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80052dc:	208b      	movs	r0, #139	; 0x8b
 80052de:	f7fd fe3f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052e2:	2000      	movs	r0, #0
 80052e4:	f7fd fe3c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80052e8:	2099      	movs	r0, #153	; 0x99
 80052ea:	f7fd fe39 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7fd fe36 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80052f4:	20a8      	movs	r0, #168	; 0xa8
 80052f6:	f7fd fe33 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052fa:	2000      	movs	r0, #0
 80052fc:	f7fd fe30 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8005300:	20b9      	movs	r0, #185	; 0xb9
 8005302:	f7fd fe2d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005306:	2000      	movs	r0, #0
 8005308:	f7fd fe2a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800530c:	20c4      	movs	r0, #196	; 0xc4
 800530e:	f7fd fe27 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005312:	2000      	movs	r0, #0
 8005314:	f7fd fe24 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8005318:	20ca      	movs	r0, #202	; 0xca
 800531a:	f7fd fe21 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800531e:	2000      	movs	r0, #0
 8005320:	f7fd fe1e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8005324:	20d2      	movs	r0, #210	; 0xd2
 8005326:	f7fd fe1b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800532a:	2000      	movs	r0, #0
 800532c:	f7fd fe18 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8005330:	20d8      	movs	r0, #216	; 0xd8
 8005332:	f7fd fe15 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005336:	2000      	movs	r0, #0
 8005338:	f7fd fe12 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800533c:	20e0      	movs	r0, #224	; 0xe0
 800533e:	f7fd fe0f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005342:	2000      	movs	r0, #0
 8005344:	f7fd fe0c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005348:	20f3      	movs	r0, #243	; 0xf3
 800534a:	f7fd fe09 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800534e:	2000      	movs	r0, #0
 8005350:	f7fd fe06 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8005354:	20e2      	movs	r0, #226	; 0xe2
 8005356:	f7fd fddf 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 800535a:	2005      	movs	r0, #5
 800535c:	f7fd fe00 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005360:	2000      	movs	r0, #0
 8005362:	f7fd fdfd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8005366:	200b      	movs	r0, #11
 8005368:	f7fd fdfa 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800536c:	2000      	movs	r0, #0
 800536e:	f7fd fdf7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8005372:	201b      	movs	r0, #27
 8005374:	f7fd fdf4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005378:	2000      	movs	r0, #0
 800537a:	f7fd fdf1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800537e:	2034      	movs	r0, #52	; 0x34
 8005380:	f7fd fdee 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005384:	2000      	movs	r0, #0
 8005386:	f7fd fdeb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800538a:	2044      	movs	r0, #68	; 0x44
 800538c:	f7fd fde8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005390:	2000      	movs	r0, #0
 8005392:	f7fd fde5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8005396:	204f      	movs	r0, #79	; 0x4f
 8005398:	f7fd fde2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800539c:	2000      	movs	r0, #0
 800539e:	f7fd fddf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80053a2:	2061      	movs	r0, #97	; 0x61
 80053a4:	f7fd fddc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7fd fdd9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80053ae:	2079      	movs	r0, #121	; 0x79
 80053b0:	f7fd fdd6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7fd fdd3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80053ba:	2088      	movs	r0, #136	; 0x88
 80053bc:	f7fd fdd0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fd fdcd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80053c6:	2097      	movs	r0, #151	; 0x97
 80053c8:	f7fd fdca 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053cc:	2000      	movs	r0, #0
 80053ce:	f7fd fdc7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80053d2:	20a6      	movs	r0, #166	; 0xa6
 80053d4:	f7fd fdc4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fd fdc1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80053de:	20b7      	movs	r0, #183	; 0xb7
 80053e0:	f7fd fdbe 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fd fdbb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80053ea:	20c2      	movs	r0, #194	; 0xc2
 80053ec:	f7fd fdb8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7fd fdb5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80053f6:	20c7      	movs	r0, #199	; 0xc7
 80053f8:	f7fd fdb2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7fd fdaf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8005402:	20d1      	movs	r0, #209	; 0xd1
 8005404:	f7fd fdac 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005408:	2000      	movs	r0, #0
 800540a:	f7fd fda9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800540e:	20d6      	movs	r0, #214	; 0xd6
 8005410:	f7fd fda6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005414:	2000      	movs	r0, #0
 8005416:	f7fd fda3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800541a:	20dd      	movs	r0, #221	; 0xdd
 800541c:	f7fd fda0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005420:	2000      	movs	r0, #0
 8005422:	f7fd fd9d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005426:	20f3      	movs	r0, #243	; 0xf3
 8005428:	f7fd fd9a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800542c:	2000      	movs	r0, #0
 800542e:	f7fd fd97 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8005432:	20e3      	movs	r0, #227	; 0xe3
 8005434:	f7fd fd70 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005438:	2005      	movs	r0, #5
 800543a:	f7fd fd91 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800543e:	2000      	movs	r0, #0
 8005440:	f7fd fd8e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8005444:	200a      	movs	r0, #10
 8005446:	f7fd fd8b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800544a:	2000      	movs	r0, #0
 800544c:	f7fd fd88 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005450:	201c      	movs	r0, #28
 8005452:	f7fd fd85 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005456:	2000      	movs	r0, #0
 8005458:	f7fd fd82 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800545c:	2033      	movs	r0, #51	; 0x33
 800545e:	f7fd fd7f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005462:	2000      	movs	r0, #0
 8005464:	f7fd fd7c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005468:	2044      	movs	r0, #68	; 0x44
 800546a:	f7fd fd79 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800546e:	2000      	movs	r0, #0
 8005470:	f7fd fd76 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005474:	2050      	movs	r0, #80	; 0x50
 8005476:	f7fd fd73 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800547a:	2000      	movs	r0, #0
 800547c:	f7fd fd70 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8005480:	2062      	movs	r0, #98	; 0x62
 8005482:	f7fd fd6d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005486:	2000      	movs	r0, #0
 8005488:	f7fd fd6a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800548c:	2078      	movs	r0, #120	; 0x78
 800548e:	f7fd fd67 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005492:	2000      	movs	r0, #0
 8005494:	f7fd fd64 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005498:	2088      	movs	r0, #136	; 0x88
 800549a:	f7fd fd61 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800549e:	2000      	movs	r0, #0
 80054a0:	f7fd fd5e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80054a4:	2097      	movs	r0, #151	; 0x97
 80054a6:	f7fd fd5b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054aa:	2000      	movs	r0, #0
 80054ac:	f7fd fd58 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80054b0:	20a6      	movs	r0, #166	; 0xa6
 80054b2:	f7fd fd55 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b6:	2000      	movs	r0, #0
 80054b8:	f7fd fd52 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80054bc:	20b7      	movs	r0, #183	; 0xb7
 80054be:	f7fd fd4f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054c2:	2000      	movs	r0, #0
 80054c4:	f7fd fd4c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80054c8:	20c2      	movs	r0, #194	; 0xc2
 80054ca:	f7fd fd49 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7fd fd46 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80054d4:	20c7      	movs	r0, #199	; 0xc7
 80054d6:	f7fd fd43 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054da:	2000      	movs	r0, #0
 80054dc:	f7fd fd40 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80054e0:	20d1      	movs	r0, #209	; 0xd1
 80054e2:	f7fd fd3d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fd fd3a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80054ec:	20d5      	movs	r0, #213	; 0xd5
 80054ee:	f7fd fd37 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054f2:	2000      	movs	r0, #0
 80054f4:	f7fd fd34 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80054f8:	20dd      	movs	r0, #221	; 0xdd
 80054fa:	f7fd fd31 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fd fd2e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005504:	20f3      	movs	r0, #243	; 0xf3
 8005506:	f7fd fd2b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800550a:	2000      	movs	r0, #0
 800550c:	f7fd fd28 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8005510:	20e4      	movs	r0, #228	; 0xe4
 8005512:	f7fd fd01 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8005516:	2001      	movs	r0, #1
 8005518:	f7fd fd22 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800551c:	2000      	movs	r0, #0
 800551e:	f7fd fd1f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8005522:	2001      	movs	r0, #1
 8005524:	f7fd fd1c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005528:	2000      	movs	r0, #0
 800552a:	f7fd fd19 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800552e:	2002      	movs	r0, #2
 8005530:	f7fd fd16 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005534:	2000      	movs	r0, #0
 8005536:	f7fd fd13 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800553a:	202a      	movs	r0, #42	; 0x2a
 800553c:	f7fd fd10 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005540:	2000      	movs	r0, #0
 8005542:	f7fd fd0d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005546:	203c      	movs	r0, #60	; 0x3c
 8005548:	f7fd fd0a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800554c:	2000      	movs	r0, #0
 800554e:	f7fd fd07 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005552:	204b      	movs	r0, #75	; 0x4b
 8005554:	f7fd fd04 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005558:	2000      	movs	r0, #0
 800555a:	f7fd fd01 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800555e:	205d      	movs	r0, #93	; 0x5d
 8005560:	f7fd fcfe 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005564:	2000      	movs	r0, #0
 8005566:	f7fd fcfb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 800556a:	2074      	movs	r0, #116	; 0x74
 800556c:	f7fd fcf8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005570:	2000      	movs	r0, #0
 8005572:	f7fd fcf5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005576:	2084      	movs	r0, #132	; 0x84
 8005578:	f7fd fcf2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800557c:	2000      	movs	r0, #0
 800557e:	f7fd fcef 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005582:	2093      	movs	r0, #147	; 0x93
 8005584:	f7fd fcec 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005588:	2000      	movs	r0, #0
 800558a:	f7fd fce9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800558e:	20a2      	movs	r0, #162	; 0xa2
 8005590:	f7fd fce6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005594:	2000      	movs	r0, #0
 8005596:	f7fd fce3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800559a:	20b3      	movs	r0, #179	; 0xb3
 800559c:	f7fd fce0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7fd fcdd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80055a6:	20be      	movs	r0, #190	; 0xbe
 80055a8:	f7fd fcda 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055ac:	2000      	movs	r0, #0
 80055ae:	f7fd fcd7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80055b2:	20c4      	movs	r0, #196	; 0xc4
 80055b4:	f7fd fcd4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fd fcd1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80055be:	20cd      	movs	r0, #205	; 0xcd
 80055c0:	f7fd fcce 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7fd fccb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80055ca:	20d3      	movs	r0, #211	; 0xd3
 80055cc:	f7fd fcc8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055d0:	2000      	movs	r0, #0
 80055d2:	f7fd fcc5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80055d6:	20dd      	movs	r0, #221	; 0xdd
 80055d8:	f7fd fcc2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055dc:	2000      	movs	r0, #0
 80055de:	f7fd fcbf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80055e2:	20f3      	movs	r0, #243	; 0xf3
 80055e4:	f7fd fcbc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7fd fcb9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80055ee:	20e5      	movs	r0, #229	; 0xe5
 80055f0:	f7fd fc92 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7fd fcb3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7fd fcb0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005600:	2000      	movs	r0, #0
 8005602:	f7fd fcad 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005606:	2000      	movs	r0, #0
 8005608:	f7fd fcaa 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800560c:	2002      	movs	r0, #2
 800560e:	f7fd fca7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005612:	2000      	movs	r0, #0
 8005614:	f7fd fca4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005618:	2029      	movs	r0, #41	; 0x29
 800561a:	f7fd fca1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800561e:	2000      	movs	r0, #0
 8005620:	f7fd fc9e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005624:	203c      	movs	r0, #60	; 0x3c
 8005626:	f7fd fc9b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800562a:	2000      	movs	r0, #0
 800562c:	f7fd fc98 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005630:	204b      	movs	r0, #75	; 0x4b
 8005632:	f7fd fc95 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005636:	2000      	movs	r0, #0
 8005638:	f7fd fc92 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800563c:	205d      	movs	r0, #93	; 0x5d
 800563e:	f7fd fc8f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005642:	2000      	movs	r0, #0
 8005644:	f7fd fc8c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005648:	2074      	movs	r0, #116	; 0x74
 800564a:	f7fd fc89 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800564e:	2000      	movs	r0, #0
 8005650:	f7fd fc86 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005654:	2084      	movs	r0, #132	; 0x84
 8005656:	f7fd fc83 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800565a:	2000      	movs	r0, #0
 800565c:	f7fd fc80 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005660:	2093      	movs	r0, #147	; 0x93
 8005662:	f7fd fc7d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005666:	2000      	movs	r0, #0
 8005668:	f7fd fc7a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800566c:	20a2      	movs	r0, #162	; 0xa2
 800566e:	f7fd fc77 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005672:	2000      	movs	r0, #0
 8005674:	f7fd fc74 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005678:	20b3      	movs	r0, #179	; 0xb3
 800567a:	f7fd fc71 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800567e:	2000      	movs	r0, #0
 8005680:	f7fd fc6e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8005684:	20be      	movs	r0, #190	; 0xbe
 8005686:	f7fd fc6b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800568a:	2000      	movs	r0, #0
 800568c:	f7fd fc68 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005690:	20c4      	movs	r0, #196	; 0xc4
 8005692:	f7fd fc65 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005696:	2000      	movs	r0, #0
 8005698:	f7fd fc62 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800569c:	20cd      	movs	r0, #205	; 0xcd
 800569e:	f7fd fc5f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056a2:	2000      	movs	r0, #0
 80056a4:	f7fd fc5c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80056a8:	20d3      	movs	r0, #211	; 0xd3
 80056aa:	f7fd fc59 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fd fc56 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80056b4:	20dc      	movs	r0, #220	; 0xdc
 80056b6:	f7fd fc53 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ba:	2000      	movs	r0, #0
 80056bc:	f7fd fc50 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80056c0:	20f3      	movs	r0, #243	; 0xf3
 80056c2:	f7fd fc4d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fd fc4a 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80056cc:	20e6      	movs	r0, #230	; 0xe6
 80056ce:	f7fd fc23 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80056d2:	2011      	movs	r0, #17
 80056d4:	f7fd fc44 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056d8:	2000      	movs	r0, #0
 80056da:	f7fd fc41 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80056de:	2034      	movs	r0, #52	; 0x34
 80056e0:	f7fd fc3e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e4:	2000      	movs	r0, #0
 80056e6:	f7fd fc3b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80056ea:	2056      	movs	r0, #86	; 0x56
 80056ec:	f7fd fc38 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7fd fc35 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80056f6:	2076      	movs	r0, #118	; 0x76
 80056f8:	f7fd fc32 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056fc:	2000      	movs	r0, #0
 80056fe:	f7fd fc2f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005702:	2077      	movs	r0, #119	; 0x77
 8005704:	f7fd fc2c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005708:	2000      	movs	r0, #0
 800570a:	f7fd fc29 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800570e:	2066      	movs	r0, #102	; 0x66
 8005710:	f7fd fc26 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005714:	2000      	movs	r0, #0
 8005716:	f7fd fc23 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800571a:	2088      	movs	r0, #136	; 0x88
 800571c:	f7fd fc20 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005720:	2000      	movs	r0, #0
 8005722:	f7fd fc1d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005726:	2099      	movs	r0, #153	; 0x99
 8005728:	f7fd fc1a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800572c:	2000      	movs	r0, #0
 800572e:	f7fd fc17 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005732:	20bb      	movs	r0, #187	; 0xbb
 8005734:	f7fd fc14 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005738:	2000      	movs	r0, #0
 800573a:	f7fd fc11 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800573e:	2099      	movs	r0, #153	; 0x99
 8005740:	f7fd fc0e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005744:	2000      	movs	r0, #0
 8005746:	f7fd fc0b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800574a:	2066      	movs	r0, #102	; 0x66
 800574c:	f7fd fc08 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005750:	2000      	movs	r0, #0
 8005752:	f7fd fc05 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005756:	2055      	movs	r0, #85	; 0x55
 8005758:	f7fd fc02 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800575c:	2000      	movs	r0, #0
 800575e:	f7fd fbff 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005762:	2055      	movs	r0, #85	; 0x55
 8005764:	f7fd fbfc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005768:	2000      	movs	r0, #0
 800576a:	f7fd fbf9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800576e:	2045      	movs	r0, #69	; 0x45
 8005770:	f7fd fbf6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005774:	2000      	movs	r0, #0
 8005776:	f7fd fbf3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800577a:	2043      	movs	r0, #67	; 0x43
 800577c:	f7fd fbf0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005780:	2000      	movs	r0, #0
 8005782:	f7fd fbed 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005786:	2044      	movs	r0, #68	; 0x44
 8005788:	f7fd fbea 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800578c:	2000      	movs	r0, #0
 800578e:	f7fd fbe7 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8005792:	20e7      	movs	r0, #231	; 0xe7
 8005794:	f7fd fbc0 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005798:	2032      	movs	r0, #50	; 0x32
 800579a:	f7fd fbe1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800579e:	2000      	movs	r0, #0
 80057a0:	f7fd fbde 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80057a4:	2055      	movs	r0, #85	; 0x55
 80057a6:	f7fd fbdb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057aa:	2000      	movs	r0, #0
 80057ac:	f7fd fbd8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80057b0:	2076      	movs	r0, #118	; 0x76
 80057b2:	f7fd fbd5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fd fbd2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80057bc:	2066      	movs	r0, #102	; 0x66
 80057be:	f7fd fbcf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fd fbcc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80057c8:	2067      	movs	r0, #103	; 0x67
 80057ca:	f7fd fbc9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7fd fbc6 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80057d4:	2067      	movs	r0, #103	; 0x67
 80057d6:	f7fd fbc3 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057da:	2000      	movs	r0, #0
 80057dc:	f7fd fbc0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80057e0:	2087      	movs	r0, #135	; 0x87
 80057e2:	f7fd fbbd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7fd fbba 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80057ec:	2099      	movs	r0, #153	; 0x99
 80057ee:	f7fd fbb7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7fd fbb4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80057f8:	20bb      	movs	r0, #187	; 0xbb
 80057fa:	f7fd fbb1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057fe:	2000      	movs	r0, #0
 8005800:	f7fd fbae 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005804:	2099      	movs	r0, #153	; 0x99
 8005806:	f7fd fbab 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800580a:	2000      	movs	r0, #0
 800580c:	f7fd fba8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005810:	2077      	movs	r0, #119	; 0x77
 8005812:	f7fd fba5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005816:	2000      	movs	r0, #0
 8005818:	f7fd fba2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800581c:	2044      	movs	r0, #68	; 0x44
 800581e:	f7fd fb9f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005822:	2000      	movs	r0, #0
 8005824:	f7fd fb9c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005828:	2056      	movs	r0, #86	; 0x56
 800582a:	f7fd fb99 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800582e:	2000      	movs	r0, #0
 8005830:	f7fd fb96 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8005834:	2023      	movs	r0, #35	; 0x23
 8005836:	f7fd fb93 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800583a:	2000      	movs	r0, #0
 800583c:	f7fd fb90 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005840:	2033      	movs	r0, #51	; 0x33
 8005842:	f7fd fb8d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005846:	2000      	movs	r0, #0
 8005848:	f7fd fb8a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800584c:	2045      	movs	r0, #69	; 0x45
 800584e:	f7fd fb87 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005852:	2000      	movs	r0, #0
 8005854:	f7fd fb84 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005858:	20e8      	movs	r0, #232	; 0xe8
 800585a:	f7fd fb5d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800585e:	2000      	movs	r0, #0
 8005860:	f7fd fb7e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005864:	2000      	movs	r0, #0
 8005866:	f7fd fb7b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800586a:	2099      	movs	r0, #153	; 0x99
 800586c:	f7fd fb78 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005870:	2000      	movs	r0, #0
 8005872:	f7fd fb75 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005876:	2087      	movs	r0, #135	; 0x87
 8005878:	f7fd fb72 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800587c:	2000      	movs	r0, #0
 800587e:	f7fd fb6f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005882:	2088      	movs	r0, #136	; 0x88
 8005884:	f7fd fb6c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005888:	2000      	movs	r0, #0
 800588a:	f7fd fb69 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800588e:	2077      	movs	r0, #119	; 0x77
 8005890:	f7fd fb66 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005894:	2000      	movs	r0, #0
 8005896:	f7fd fb63 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800589a:	2066      	movs	r0, #102	; 0x66
 800589c:	f7fd fb60 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7fd fb5d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80058a6:	2088      	movs	r0, #136	; 0x88
 80058a8:	f7fd fb5a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7fd fb57 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80058b2:	20aa      	movs	r0, #170	; 0xaa
 80058b4:	f7fd fb54 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7fd fb51 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80058be:	20bb      	movs	r0, #187	; 0xbb
 80058c0:	f7fd fb4e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058c4:	2000      	movs	r0, #0
 80058c6:	f7fd fb4b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80058ca:	2099      	movs	r0, #153	; 0x99
 80058cc:	f7fd fb48 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058d0:	2000      	movs	r0, #0
 80058d2:	f7fd fb45 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80058d6:	2066      	movs	r0, #102	; 0x66
 80058d8:	f7fd fb42 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058dc:	2000      	movs	r0, #0
 80058de:	f7fd fb3f 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80058e2:	2055      	movs	r0, #85	; 0x55
 80058e4:	f7fd fb3c 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fd fb39 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80058ee:	2055      	movs	r0, #85	; 0x55
 80058f0:	f7fd fb36 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fd fb33 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80058fa:	2044      	movs	r0, #68	; 0x44
 80058fc:	f7fd fb30 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005900:	2000      	movs	r0, #0
 8005902:	f7fd fb2d 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005906:	2044      	movs	r0, #68	; 0x44
 8005908:	f7fd fb2a 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800590c:	2000      	movs	r0, #0
 800590e:	f7fd fb27 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005912:	2055      	movs	r0, #85	; 0x55
 8005914:	f7fd fb24 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005918:	2000      	movs	r0, #0
 800591a:	f7fd fb21 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800591e:	20e9      	movs	r0, #233	; 0xe9
 8005920:	f7fd fafa 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005924:	20aa      	movs	r0, #170	; 0xaa
 8005926:	f7fd fb1b 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800592a:	2000      	movs	r0, #0
 800592c:	f7fd fb18 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005930:	2000      	movs	r0, #0
 8005932:	f7fd fb15 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005936:	2000      	movs	r0, #0
 8005938:	f7fd fb12 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800593c:	2000      	movs	r0, #0
 800593e:	f7fd faeb 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005942:	20aa      	movs	r0, #170	; 0xaa
 8005944:	f7fd fb0c 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005948:	20cf      	movs	r0, #207	; 0xcf
 800594a:	f7fd fae5 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800594e:	2000      	movs	r0, #0
 8005950:	f7fd fb06 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005954:	2000      	movs	r0, #0
 8005956:	f7fd fb03 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800595a:	2000      	movs	r0, #0
 800595c:	f7fd fb00 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005960:	2000      	movs	r0, #0
 8005962:	f7fd fafd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005966:	2000      	movs	r0, #0
 8005968:	f7fd fafa 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800596c:	2000      	movs	r0, #0
 800596e:	f7fd faf7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005972:	2000      	movs	r0, #0
 8005974:	f7fd faf4 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005978:	2000      	movs	r0, #0
 800597a:	f7fd faf1 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800597e:	2000      	movs	r0, #0
 8005980:	f7fd faee 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005984:	2000      	movs	r0, #0
 8005986:	f7fd faeb 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800598a:	2000      	movs	r0, #0
 800598c:	f7fd fae8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005990:	2000      	movs	r0, #0
 8005992:	f7fd fae5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005996:	2000      	movs	r0, #0
 8005998:	f7fd fae2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800599c:	2000      	movs	r0, #0
 800599e:	f7fd fadf 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059a2:	2000      	movs	r0, #0
 80059a4:	f7fd fadc 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059a8:	2000      	movs	r0, #0
 80059aa:	f7fd fad9 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059ae:	2000      	movs	r0, #0
 80059b0:	f7fd fad6 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80059b4:	20f0      	movs	r0, #240	; 0xf0
 80059b6:	f7fd faaf 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80059ba:	2000      	movs	r0, #0
 80059bc:	f7fd fad0 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80059c0:	2050      	movs	r0, #80	; 0x50
 80059c2:	f7fd facd 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fd faca 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fd fac7 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059d2:	2000      	movs	r0, #0
 80059d4:	f7fd fac4 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80059d8:	20f3      	movs	r0, #243	; 0xf3
 80059da:	f7fd fa9d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80059de:	2000      	movs	r0, #0
 80059e0:	f7fd fabe 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80059e4:	20f9      	movs	r0, #249	; 0xf9
 80059e6:	f7fd fa97 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80059ea:	2006      	movs	r0, #6
 80059ec:	f7fd fab8 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80059f0:	2010      	movs	r0, #16
 80059f2:	f7fd fab5 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80059f6:	2029      	movs	r0, #41	; 0x29
 80059f8:	f7fd fab2 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7fd faaf 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005a02:	203a      	movs	r0, #58	; 0x3a
 8005a04:	f7fd fa88 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005a08:	2055      	movs	r0, #85	; 0x55
 8005a0a:	f7fd faa9 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8005a0e:	2011      	movs	r0, #17
 8005a10:	f7fd fa82 	bl	8002f18 <LCD_WR_REG>
		HAL_Delay(100);
 8005a14:	2064      	movs	r0, #100	; 0x64
 8005a16:	f7fb f857 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005a1a:	2029      	movs	r0, #41	; 0x29
 8005a1c:	f7fd fa7c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005a20:	2035      	movs	r0, #53	; 0x35
 8005a22:	f7fd fa79 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005a26:	2000      	movs	r0, #0
 8005a28:	f7fd fa9a 	bl	8002f60 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8005a2c:	2051      	movs	r0, #81	; 0x51
 8005a2e:	f7fd fa73 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005a32:	20ff      	movs	r0, #255	; 0xff
 8005a34:	f7fd fa94 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005a38:	2053      	movs	r0, #83	; 0x53
 8005a3a:	f7fd fa6d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8005a3e:	202c      	movs	r0, #44	; 0x2c
 8005a40:	f7fd fa8e 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8005a44:	2055      	movs	r0, #85	; 0x55
 8005a46:	f7fd fa67 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8005a4a:	2082      	movs	r0, #130	; 0x82
 8005a4c:	f7fd fa88 	bl	8002f60 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005a50:	202c      	movs	r0, #44	; 0x2c
 8005a52:	f7fd fa61 	bl	8002f18 <LCD_WR_REG>
 8005a56:	f002 bca1 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <LCD_Init+0x1504>)
 8005a5c:	889b      	ldrh	r3, [r3, #4]
 8005a5e:	f245 5210 	movw	r2, #21776	; 0x5510
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f040 8782 	bne.w	800696c <LCD_Init+0x2404>
 8005a68:	e002      	b.n	8005a70 <LCD_Init+0x1508>
 8005a6a:	bf00      	nop
 8005a6c:	20000494 	.word	0x20000494
		LCD_WriteReg(0xF000, 0x55);
 8005a70:	2155      	movs	r1, #85	; 0x55
 8005a72:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005a76:	f7fd fadb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005a7a:	21aa      	movs	r1, #170	; 0xaa
 8005a7c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005a80:	f7fd fad6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005a84:	2152      	movs	r1, #82	; 0x52
 8005a86:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005a8a:	f7fd fad1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005a8e:	2108      	movs	r1, #8
 8005a90:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005a94:	f7fd facc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8005a98:	2101      	movs	r1, #1
 8005a9a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005a9e:	f7fd fac7 	bl	8003030 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8005aa2:	210d      	movs	r1, #13
 8005aa4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005aa8:	f7fd fac2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8005aac:	210d      	movs	r1, #13
 8005aae:	f24b 0001 	movw	r0, #45057	; 0xb001
 8005ab2:	f7fd fabd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8005ab6:	210d      	movs	r1, #13
 8005ab8:	f24b 0002 	movw	r0, #45058	; 0xb002
 8005abc:	f7fd fab8 	bl	8003030 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8005ac0:	2134      	movs	r1, #52	; 0x34
 8005ac2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005ac6:	f7fd fab3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8005aca:	2134      	movs	r1, #52	; 0x34
 8005acc:	f24b 6001 	movw	r0, #46593	; 0xb601
 8005ad0:	f7fd faae 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8005ad4:	2134      	movs	r1, #52	; 0x34
 8005ad6:	f24b 6002 	movw	r0, #46594	; 0xb602
 8005ada:	f7fd faa9 	bl	8003030 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8005ade:	210d      	movs	r1, #13
 8005ae0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005ae4:	f7fd faa4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005ae8:	210d      	movs	r1, #13
 8005aea:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005aee:	f7fd fa9f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8005af2:	210d      	movs	r1, #13
 8005af4:	f24b 1002 	movw	r0, #45314	; 0xb102
 8005af8:	f7fd fa9a 	bl	8003030 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8005afc:	2134      	movs	r1, #52	; 0x34
 8005afe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005b02:	f7fd fa95 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8005b06:	2134      	movs	r1, #52	; 0x34
 8005b08:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005b0c:	f7fd fa90 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005b10:	2134      	movs	r1, #52	; 0x34
 8005b12:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005b16:	f7fd fa8b 	bl	8003030 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005b20:	f7fd fa86 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8005b24:	2100      	movs	r1, #0
 8005b26:	f24b 2001 	movw	r0, #45569	; 0xb201
 8005b2a:	f7fd fa81 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005b34:	f7fd fa7c 	bl	8003030 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005b38:	2124      	movs	r1, #36	; 0x24
 8005b3a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005b3e:	f7fd fa77 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8005b42:	2124      	movs	r1, #36	; 0x24
 8005b44:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005b48:	f7fd fa72 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8005b4c:	2124      	movs	r1, #36	; 0x24
 8005b4e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005b52:	f7fd fa6d 	bl	8003030 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8005b56:	2101      	movs	r1, #1
 8005b58:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8005b5c:	f7fd fa68 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005b60:	210f      	movs	r1, #15
 8005b62:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005b66:	f7fd fa63 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8005b6a:	210f      	movs	r1, #15
 8005b6c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005b70:	f7fd fa5e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8005b74:	210f      	movs	r1, #15
 8005b76:	f24b 3002 	movw	r0, #45826	; 0xb302
 8005b7a:	f7fd fa59 	bl	8003030 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8005b7e:	2134      	movs	r1, #52	; 0x34
 8005b80:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005b84:	f7fd fa54 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8005b88:	2134      	movs	r1, #52	; 0x34
 8005b8a:	f64b 1001 	movw	r0, #47361	; 0xb901
 8005b8e:	f7fd fa4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8005b92:	2134      	movs	r1, #52	; 0x34
 8005b94:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005b98:	f7fd fa4a 	bl	8003030 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8005b9c:	2108      	movs	r1, #8
 8005b9e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005ba2:	f7fd fa45 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8005ba6:	2108      	movs	r1, #8
 8005ba8:	f24b 5001 	movw	r0, #46337	; 0xb501
 8005bac:	f7fd fa40 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8005bb0:	2108      	movs	r1, #8
 8005bb2:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005bb6:	f7fd fa3b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8005bba:	2103      	movs	r1, #3
 8005bbc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005bc0:	f7fd fa36 	bl	8003030 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8005bc4:	2124      	movs	r1, #36	; 0x24
 8005bc6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8005bca:	f7fd fa31 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8005bce:	2124      	movs	r1, #36	; 0x24
 8005bd0:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005bd4:	f7fd fa2c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8005bd8:	2124      	movs	r1, #36	; 0x24
 8005bda:	f64b 2002 	movw	r0, #47618	; 0xba02
 8005bde:	f7fd fa27 	bl	8003030 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8005be2:	2100      	movs	r1, #0
 8005be4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005be8:	f7fd fa22 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8005bec:	2178      	movs	r1, #120	; 0x78
 8005bee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005bf2:	f7fd fa1d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005bfc:	f7fd fa18 	bl	8003030 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005c00:	2100      	movs	r1, #0
 8005c02:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005c06:	f7fd fa13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8005c0a:	2178      	movs	r1, #120	; 0x78
 8005c0c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005c10:	f7fd fa0e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8005c14:	2100      	movs	r1, #0
 8005c16:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8005c1a:	f7fd fa09 	bl	8003030 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005c24:	f7fd fa04 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005c28:	2164      	movs	r1, #100	; 0x64
 8005c2a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8005c2e:	f7fd f9ff 	bl	8003030 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8005c32:	2100      	movs	r1, #0
 8005c34:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005c38:	f7fd f9fa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8005c3c:	2133      	movs	r1, #51	; 0x33
 8005c3e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8005c42:	f7fd f9f5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8005c46:	2100      	movs	r1, #0
 8005c48:	f24d 1002 	movw	r0, #53506	; 0xd102
 8005c4c:	f7fd f9f0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005c50:	2134      	movs	r1, #52	; 0x34
 8005c52:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005c56:	f7fd f9eb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005c60:	f7fd f9e6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8005c64:	213a      	movs	r1, #58	; 0x3a
 8005c66:	f24d 1005 	movw	r0, #53509	; 0xd105
 8005c6a:	f7fd f9e1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005c74:	f7fd f9dc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005c78:	214a      	movs	r1, #74	; 0x4a
 8005c7a:	f24d 1007 	movw	r0, #53511	; 0xd107
 8005c7e:	f7fd f9d7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8005c82:	2100      	movs	r1, #0
 8005c84:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005c88:	f7fd f9d2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8005c8c:	215c      	movs	r1, #92	; 0x5c
 8005c8e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005c92:	f7fd f9cd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8005c96:	2100      	movs	r1, #0
 8005c98:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8005c9c:	f7fd f9c8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8005ca0:	2181      	movs	r1, #129	; 0x81
 8005ca2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005ca6:	f7fd f9c3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8005caa:	2100      	movs	r1, #0
 8005cac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005cb0:	f7fd f9be 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8005cb4:	21a6      	movs	r1, #166	; 0xa6
 8005cb6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005cba:	f7fd f9b9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005cc4:	f7fd f9b4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005cc8:	21e5      	movs	r1, #229	; 0xe5
 8005cca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8005cce:	f7fd f9af 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005cd8:	f7fd f9aa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8005cdc:	2113      	movs	r1, #19
 8005cde:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005ce2:	f7fd f9a5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005cec:	f7fd f9a0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005cf0:	2154      	movs	r1, #84	; 0x54
 8005cf2:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005cf6:	f7fd f99b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005d00:	f7fd f996 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8005d04:	2182      	movs	r1, #130	; 0x82
 8005d06:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005d0a:	f7fd f991 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8005d0e:	2101      	movs	r1, #1
 8005d10:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005d14:	f7fd f98c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005d18:	21ca      	movs	r1, #202	; 0xca
 8005d1a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005d1e:	f7fd f987 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8005d22:	2102      	movs	r1, #2
 8005d24:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005d28:	f7fd f982 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005d32:	f7fd f97d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8005d36:	2102      	movs	r1, #2
 8005d38:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005d3c:	f7fd f978 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005d40:	2101      	movs	r1, #1
 8005d42:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8005d46:	f7fd f973 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005d50:	f7fd f96e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8005d54:	2134      	movs	r1, #52	; 0x34
 8005d56:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8005d5a:	f7fd f969 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8005d5e:	2102      	movs	r1, #2
 8005d60:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005d64:	f7fd f964 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005d68:	2167      	movs	r1, #103	; 0x67
 8005d6a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8005d6e:	f7fd f95f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8005d72:	2102      	movs	r1, #2
 8005d74:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005d78:	f7fd f95a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8005d7c:	2184      	movs	r1, #132	; 0x84
 8005d7e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005d82:	f7fd f955 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8005d86:	2102      	movs	r1, #2
 8005d88:	f24d 1022 	movw	r0, #53538	; 0xd122
 8005d8c:	f7fd f950 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8005d90:	21a4      	movs	r1, #164	; 0xa4
 8005d92:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005d96:	f7fd f94b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005da0:	f7fd f946 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8005da4:	21b7      	movs	r1, #183	; 0xb7
 8005da6:	f24d 1025 	movw	r0, #53541	; 0xd125
 8005daa:	f7fd f941 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8005dae:	2102      	movs	r1, #2
 8005db0:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005db4:	f7fd f93c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005db8:	21cf      	movs	r1, #207	; 0xcf
 8005dba:	f24d 1027 	movw	r0, #53543	; 0xd127
 8005dbe:	f7fd f937 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8005dc2:	2102      	movs	r1, #2
 8005dc4:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005dc8:	f7fd f932 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8005dcc:	21de      	movs	r1, #222	; 0xde
 8005dce:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005dd2:	f7fd f92d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005ddc:	f7fd f928 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005de0:	21f2      	movs	r1, #242	; 0xf2
 8005de2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005de6:	f7fd f923 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8005dea:	2102      	movs	r1, #2
 8005dec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005df0:	f7fd f91e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8005df4:	21fe      	movs	r1, #254	; 0xfe
 8005df6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005dfa:	f7fd f919 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8005dfe:	2103      	movs	r1, #3
 8005e00:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005e04:	f7fd f914 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005e08:	2110      	movs	r1, #16
 8005e0a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005e0e:	f7fd f90f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8005e12:	2103      	movs	r1, #3
 8005e14:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005e18:	f7fd f90a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8005e1c:	2133      	movs	r1, #51	; 0x33
 8005e1e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8005e22:	f7fd f905 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8005e26:	2103      	movs	r1, #3
 8005e28:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005e2c:	f7fd f900 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005e30:	216d      	movs	r1, #109	; 0x6d
 8005e32:	f24d 1033 	movw	r0, #53555	; 0xd133
 8005e36:	f7fd f8fb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005e40:	f7fd f8f6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8005e44:	2133      	movs	r1, #51	; 0x33
 8005e46:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005e4a:	f7fd f8f1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f24d 2002 	movw	r0, #53762	; 0xd202
 8005e54:	f7fd f8ec 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8005e58:	2134      	movs	r1, #52	; 0x34
 8005e5a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8005e5e:	f7fd f8e7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8005e62:	2100      	movs	r1, #0
 8005e64:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005e68:	f7fd f8e2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8005e6c:	213a      	movs	r1, #58	; 0x3a
 8005e6e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8005e72:	f7fd f8dd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8005e76:	2100      	movs	r1, #0
 8005e78:	f24d 2006 	movw	r0, #53766	; 0xd206
 8005e7c:	f7fd f8d8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8005e80:	214a      	movs	r1, #74	; 0x4a
 8005e82:	f24d 2007 	movw	r0, #53767	; 0xd207
 8005e86:	f7fd f8d3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8005e90:	f7fd f8ce 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8005e94:	215c      	movs	r1, #92	; 0x5c
 8005e96:	f24d 2009 	movw	r0, #53769	; 0xd209
 8005e9a:	f7fd f8c9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005ea4:	f7fd f8c4 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8005ea8:	2181      	movs	r1, #129	; 0x81
 8005eaa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8005eae:	f7fd f8bf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005eb8:	f7fd f8ba 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8005ebc:	21a6      	movs	r1, #166	; 0xa6
 8005ebe:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005ec2:	f7fd f8b5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005ecc:	f7fd f8b0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005ed0:	21e5      	movs	r1, #229	; 0xe5
 8005ed2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005ed6:	f7fd f8ab 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8005eda:	2101      	movs	r1, #1
 8005edc:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005ee0:	f7fd f8a6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8005ee4:	2113      	movs	r1, #19
 8005ee6:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005eea:	f7fd f8a1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005eee:	2101      	movs	r1, #1
 8005ef0:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005ef4:	f7fd f89c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005ef8:	2154      	movs	r1, #84	; 0x54
 8005efa:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005efe:	f7fd f897 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8005f02:	2101      	movs	r1, #1
 8005f04:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005f08:	f7fd f892 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005f0c:	2182      	movs	r1, #130	; 0x82
 8005f0e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8005f12:	f7fd f88d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8005f16:	2101      	movs	r1, #1
 8005f18:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005f1c:	f7fd f888 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8005f20:	21ca      	movs	r1, #202	; 0xca
 8005f22:	f24d 2017 	movw	r0, #53783	; 0xd217
 8005f26:	f7fd f883 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005f30:	f7fd f87e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8005f34:	2100      	movs	r1, #0
 8005f36:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005f3a:	f7fd f879 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8005f3e:	2102      	movs	r1, #2
 8005f40:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8005f44:	f7fd f874 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8005f48:	2101      	movs	r1, #1
 8005f4a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005f4e:	f7fd f86f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8005f52:	2102      	movs	r1, #2
 8005f54:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005f58:	f7fd f86a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8005f5c:	2134      	movs	r1, #52	; 0x34
 8005f5e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8005f62:	f7fd f865 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8005f66:	2102      	movs	r1, #2
 8005f68:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8005f6c:	f7fd f860 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8005f70:	2167      	movs	r1, #103	; 0x67
 8005f72:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8005f76:	f7fd f85b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005f80:	f7fd f856 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8005f84:	2184      	movs	r1, #132	; 0x84
 8005f86:	f24d 2021 	movw	r0, #53793	; 0xd221
 8005f8a:	f7fd f851 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8005f8e:	2102      	movs	r1, #2
 8005f90:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005f94:	f7fd f84c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8005f98:	21a4      	movs	r1, #164	; 0xa4
 8005f9a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8005f9e:	f7fd f847 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8005fa2:	2102      	movs	r1, #2
 8005fa4:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005fa8:	f7fd f842 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8005fac:	21b7      	movs	r1, #183	; 0xb7
 8005fae:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005fb2:	f7fd f83d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005fbc:	f7fd f838 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8005fc0:	21cf      	movs	r1, #207	; 0xcf
 8005fc2:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005fc6:	f7fd f833 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8005fca:	2102      	movs	r1, #2
 8005fcc:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005fd0:	f7fd f82e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8005fd4:	21de      	movs	r1, #222	; 0xde
 8005fd6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005fda:	f7fd f829 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8005fde:	2102      	movs	r1, #2
 8005fe0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005fe4:	f7fd f824 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005fe8:	21f2      	movs	r1, #242	; 0xf2
 8005fea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005fee:	f7fd f81f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005ff8:	f7fd f81a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8005ffc:	21fe      	movs	r1, #254	; 0xfe
 8005ffe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8006002:	f7fd f815 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8006006:	2103      	movs	r1, #3
 8006008:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800600c:	f7fd f810 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8006010:	2110      	movs	r1, #16
 8006012:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8006016:	f7fd f80b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800601a:	2103      	movs	r1, #3
 800601c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8006020:	f7fd f806 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8006024:	2133      	movs	r1, #51	; 0x33
 8006026:	f24d 2031 	movw	r0, #53809	; 0xd231
 800602a:	f7fd f801 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800602e:	2103      	movs	r1, #3
 8006030:	f24d 2032 	movw	r0, #53810	; 0xd232
 8006034:	f7fc fffc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8006038:	216d      	movs	r1, #109	; 0x6d
 800603a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800603e:	f7fc fff7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8006042:	2100      	movs	r1, #0
 8006044:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8006048:	f7fc fff2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800604c:	2133      	movs	r1, #51	; 0x33
 800604e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8006052:	f7fc ffed 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8006056:	2100      	movs	r1, #0
 8006058:	f24d 3002 	movw	r0, #54018	; 0xd302
 800605c:	f7fc ffe8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8006060:	2134      	movs	r1, #52	; 0x34
 8006062:	f24d 3003 	movw	r0, #54019	; 0xd303
 8006066:	f7fc ffe3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800606a:	2100      	movs	r1, #0
 800606c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8006070:	f7fc ffde 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8006074:	213a      	movs	r1, #58	; 0x3a
 8006076:	f24d 3005 	movw	r0, #54021	; 0xd305
 800607a:	f7fc ffd9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800607e:	2100      	movs	r1, #0
 8006080:	f24d 3006 	movw	r0, #54022	; 0xd306
 8006084:	f7fc ffd4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8006088:	214a      	movs	r1, #74	; 0x4a
 800608a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800608e:	f7fc ffcf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8006092:	2100      	movs	r1, #0
 8006094:	f24d 3008 	movw	r0, #54024	; 0xd308
 8006098:	f7fc ffca 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800609c:	215c      	movs	r1, #92	; 0x5c
 800609e:	f24d 3009 	movw	r0, #54025	; 0xd309
 80060a2:	f7fc ffc5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80060a6:	2100      	movs	r1, #0
 80060a8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80060ac:	f7fc ffc0 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80060b6:	f7fc ffbb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 80060ba:	2100      	movs	r1, #0
 80060bc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80060c0:	f7fc ffb6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 80060c4:	21a6      	movs	r1, #166	; 0xa6
 80060c6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80060ca:	f7fc ffb1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80060ce:	2100      	movs	r1, #0
 80060d0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80060d4:	f7fc ffac 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80060d8:	21e5      	movs	r1, #229	; 0xe5
 80060da:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80060de:	f7fc ffa7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80060e2:	2101      	movs	r1, #1
 80060e4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80060e8:	f7fc ffa2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80060ec:	2113      	movs	r1, #19
 80060ee:	f24d 3011 	movw	r0, #54033	; 0xd311
 80060f2:	f7fc ff9d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80060f6:	2101      	movs	r1, #1
 80060f8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80060fc:	f7fc ff98 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8006100:	2154      	movs	r1, #84	; 0x54
 8006102:	f24d 3013 	movw	r0, #54035	; 0xd313
 8006106:	f7fc ff93 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800610a:	2101      	movs	r1, #1
 800610c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8006110:	f7fc ff8e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8006114:	2182      	movs	r1, #130	; 0x82
 8006116:	f24d 3015 	movw	r0, #54037	; 0xd315
 800611a:	f7fc ff89 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800611e:	2101      	movs	r1, #1
 8006120:	f24d 3016 	movw	r0, #54038	; 0xd316
 8006124:	f7fc ff84 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8006128:	21ca      	movs	r1, #202	; 0xca
 800612a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800612e:	f7fc ff7f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8006132:	2102      	movs	r1, #2
 8006134:	f24d 3018 	movw	r0, #54040	; 0xd318
 8006138:	f7fc ff7a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800613c:	2100      	movs	r1, #0
 800613e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8006142:	f7fc ff75 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8006146:	2102      	movs	r1, #2
 8006148:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800614c:	f7fc ff70 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8006150:	2101      	movs	r1, #1
 8006152:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8006156:	f7fc ff6b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 800615a:	2102      	movs	r1, #2
 800615c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8006160:	f7fc ff66 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8006164:	2134      	movs	r1, #52	; 0x34
 8006166:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800616a:	f7fc ff61 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 800616e:	2102      	movs	r1, #2
 8006170:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8006174:	f7fc ff5c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8006178:	2167      	movs	r1, #103	; 0x67
 800617a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800617e:	f7fc ff57 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8006182:	2102      	movs	r1, #2
 8006184:	f24d 3020 	movw	r0, #54048	; 0xd320
 8006188:	f7fc ff52 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 800618c:	2184      	movs	r1, #132	; 0x84
 800618e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8006192:	f7fc ff4d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8006196:	2102      	movs	r1, #2
 8006198:	f24d 3022 	movw	r0, #54050	; 0xd322
 800619c:	f7fc ff48 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 80061a0:	21a4      	movs	r1, #164	; 0xa4
 80061a2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80061a6:	f7fc ff43 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 80061aa:	2102      	movs	r1, #2
 80061ac:	f24d 3024 	movw	r0, #54052	; 0xd324
 80061b0:	f7fc ff3e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 80061b4:	21b7      	movs	r1, #183	; 0xb7
 80061b6:	f24d 3025 	movw	r0, #54053	; 0xd325
 80061ba:	f7fc ff39 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 80061be:	2102      	movs	r1, #2
 80061c0:	f24d 3026 	movw	r0, #54054	; 0xd326
 80061c4:	f7fc ff34 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 80061c8:	21cf      	movs	r1, #207	; 0xcf
 80061ca:	f24d 3027 	movw	r0, #54055	; 0xd327
 80061ce:	f7fc ff2f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 80061d2:	2102      	movs	r1, #2
 80061d4:	f24d 3028 	movw	r0, #54056	; 0xd328
 80061d8:	f7fc ff2a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 80061dc:	21de      	movs	r1, #222	; 0xde
 80061de:	f24d 3029 	movw	r0, #54057	; 0xd329
 80061e2:	f7fc ff25 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80061e6:	2102      	movs	r1, #2
 80061e8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80061ec:	f7fc ff20 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80061f0:	21f2      	movs	r1, #242	; 0xf2
 80061f2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80061f6:	f7fc ff1b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80061fa:	2102      	movs	r1, #2
 80061fc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8006200:	f7fc ff16 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8006204:	21fe      	movs	r1, #254	; 0xfe
 8006206:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800620a:	f7fc ff11 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800620e:	2103      	movs	r1, #3
 8006210:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8006214:	f7fc ff0c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8006218:	2110      	movs	r1, #16
 800621a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800621e:	f7fc ff07 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8006222:	2103      	movs	r1, #3
 8006224:	f24d 3030 	movw	r0, #54064	; 0xd330
 8006228:	f7fc ff02 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800622c:	2133      	movs	r1, #51	; 0x33
 800622e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8006232:	f7fc fefd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8006236:	2103      	movs	r1, #3
 8006238:	f24d 3032 	movw	r0, #54066	; 0xd332
 800623c:	f7fc fef8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8006240:	216d      	movs	r1, #109	; 0x6d
 8006242:	f24d 3033 	movw	r0, #54067	; 0xd333
 8006246:	f7fc fef3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800624a:	2100      	movs	r1, #0
 800624c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8006250:	f7fc feee 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8006254:	2133      	movs	r1, #51	; 0x33
 8006256:	f24d 4001 	movw	r0, #54273	; 0xd401
 800625a:	f7fc fee9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 800625e:	2100      	movs	r1, #0
 8006260:	f24d 4002 	movw	r0, #54274	; 0xd402
 8006264:	f7fc fee4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8006268:	2134      	movs	r1, #52	; 0x34
 800626a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800626e:	f7fc fedf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8006272:	2100      	movs	r1, #0
 8006274:	f24d 4004 	movw	r0, #54276	; 0xd404
 8006278:	f7fc feda 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 800627c:	213a      	movs	r1, #58	; 0x3a
 800627e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8006282:	f7fc fed5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8006286:	2100      	movs	r1, #0
 8006288:	f24d 4006 	movw	r0, #54278	; 0xd406
 800628c:	f7fc fed0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8006290:	214a      	movs	r1, #74	; 0x4a
 8006292:	f24d 4007 	movw	r0, #54279	; 0xd407
 8006296:	f7fc fecb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 800629a:	2100      	movs	r1, #0
 800629c:	f24d 4008 	movw	r0, #54280	; 0xd408
 80062a0:	f7fc fec6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 80062a4:	215c      	movs	r1, #92	; 0x5c
 80062a6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80062aa:	f7fc fec1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 80062ae:	2100      	movs	r1, #0
 80062b0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80062b4:	f7fc febc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 80062b8:	2181      	movs	r1, #129	; 0x81
 80062ba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80062be:	f7fc feb7 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 80062c2:	2100      	movs	r1, #0
 80062c4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80062c8:	f7fc feb2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 80062cc:	21a6      	movs	r1, #166	; 0xa6
 80062ce:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80062d2:	f7fc fead 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80062d6:	2100      	movs	r1, #0
 80062d8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80062dc:	f7fc fea8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80062e0:	21e5      	movs	r1, #229	; 0xe5
 80062e2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80062e6:	f7fc fea3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80062ea:	2101      	movs	r1, #1
 80062ec:	f24d 4010 	movw	r0, #54288	; 0xd410
 80062f0:	f7fc fe9e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80062f4:	2113      	movs	r1, #19
 80062f6:	f24d 4011 	movw	r0, #54289	; 0xd411
 80062fa:	f7fc fe99 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80062fe:	2101      	movs	r1, #1
 8006300:	f24d 4012 	movw	r0, #54290	; 0xd412
 8006304:	f7fc fe94 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8006308:	2154      	movs	r1, #84	; 0x54
 800630a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800630e:	f7fc fe8f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8006312:	2101      	movs	r1, #1
 8006314:	f24d 4014 	movw	r0, #54292	; 0xd414
 8006318:	f7fc fe8a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 800631c:	2182      	movs	r1, #130	; 0x82
 800631e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8006322:	f7fc fe85 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8006326:	2101      	movs	r1, #1
 8006328:	f24d 4016 	movw	r0, #54294	; 0xd416
 800632c:	f7fc fe80 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8006330:	21ca      	movs	r1, #202	; 0xca
 8006332:	f24d 4017 	movw	r0, #54295	; 0xd417
 8006336:	f7fc fe7b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 800633a:	2102      	movs	r1, #2
 800633c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8006340:	f7fc fe76 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8006344:	2100      	movs	r1, #0
 8006346:	f24d 4019 	movw	r0, #54297	; 0xd419
 800634a:	f7fc fe71 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800634e:	2102      	movs	r1, #2
 8006350:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8006354:	f7fc fe6c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8006358:	2101      	movs	r1, #1
 800635a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800635e:	f7fc fe67 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8006362:	2102      	movs	r1, #2
 8006364:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8006368:	f7fc fe62 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 800636c:	2134      	movs	r1, #52	; 0x34
 800636e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8006372:	f7fc fe5d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8006376:	2102      	movs	r1, #2
 8006378:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800637c:	f7fc fe58 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8006380:	2167      	movs	r1, #103	; 0x67
 8006382:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8006386:	f7fc fe53 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 800638a:	2102      	movs	r1, #2
 800638c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8006390:	f7fc fe4e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8006394:	2184      	movs	r1, #132	; 0x84
 8006396:	f24d 4021 	movw	r0, #54305	; 0xd421
 800639a:	f7fc fe49 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 800639e:	2102      	movs	r1, #2
 80063a0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80063a4:	f7fc fe44 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80063a8:	21a4      	movs	r1, #164	; 0xa4
 80063aa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80063ae:	f7fc fe3f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 80063b2:	2102      	movs	r1, #2
 80063b4:	f24d 4024 	movw	r0, #54308	; 0xd424
 80063b8:	f7fc fe3a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 80063bc:	21b7      	movs	r1, #183	; 0xb7
 80063be:	f24d 4025 	movw	r0, #54309	; 0xd425
 80063c2:	f7fc fe35 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 80063c6:	2102      	movs	r1, #2
 80063c8:	f24d 4026 	movw	r0, #54310	; 0xd426
 80063cc:	f7fc fe30 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80063d0:	21cf      	movs	r1, #207	; 0xcf
 80063d2:	f24d 4027 	movw	r0, #54311	; 0xd427
 80063d6:	f7fc fe2b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80063da:	2102      	movs	r1, #2
 80063dc:	f24d 4028 	movw	r0, #54312	; 0xd428
 80063e0:	f7fc fe26 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80063e4:	21de      	movs	r1, #222	; 0xde
 80063e6:	f24d 4029 	movw	r0, #54313	; 0xd429
 80063ea:	f7fc fe21 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80063ee:	2102      	movs	r1, #2
 80063f0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80063f4:	f7fc fe1c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80063f8:	21f2      	movs	r1, #242	; 0xf2
 80063fa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80063fe:	f7fc fe17 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8006402:	2102      	movs	r1, #2
 8006404:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8006408:	f7fc fe12 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800640c:	21fe      	movs	r1, #254	; 0xfe
 800640e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8006412:	f7fc fe0d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8006416:	2103      	movs	r1, #3
 8006418:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800641c:	f7fc fe08 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8006420:	2110      	movs	r1, #16
 8006422:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8006426:	f7fc fe03 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800642a:	2103      	movs	r1, #3
 800642c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8006430:	f7fc fdfe 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8006434:	2133      	movs	r1, #51	; 0x33
 8006436:	f24d 4031 	movw	r0, #54321	; 0xd431
 800643a:	f7fc fdf9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800643e:	2103      	movs	r1, #3
 8006440:	f24d 4032 	movw	r0, #54322	; 0xd432
 8006444:	f7fc fdf4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8006448:	216d      	movs	r1, #109	; 0x6d
 800644a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800644e:	f7fc fdef 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8006452:	2100      	movs	r1, #0
 8006454:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8006458:	f7fc fdea 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800645c:	2133      	movs	r1, #51	; 0x33
 800645e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8006462:	f7fc fde5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8006466:	2100      	movs	r1, #0
 8006468:	f24d 5002 	movw	r0, #54530	; 0xd502
 800646c:	f7fc fde0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8006470:	2134      	movs	r1, #52	; 0x34
 8006472:	f24d 5003 	movw	r0, #54531	; 0xd503
 8006476:	f7fc fddb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800647a:	2100      	movs	r1, #0
 800647c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8006480:	f7fc fdd6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8006484:	213a      	movs	r1, #58	; 0x3a
 8006486:	f24d 5005 	movw	r0, #54533	; 0xd505
 800648a:	f7fc fdd1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800648e:	2100      	movs	r1, #0
 8006490:	f24d 5006 	movw	r0, #54534	; 0xd506
 8006494:	f7fc fdcc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8006498:	214a      	movs	r1, #74	; 0x4a
 800649a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800649e:	f7fc fdc7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80064a2:	2100      	movs	r1, #0
 80064a4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80064a8:	f7fc fdc2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80064ac:	215c      	movs	r1, #92	; 0x5c
 80064ae:	f24d 5009 	movw	r0, #54537	; 0xd509
 80064b2:	f7fc fdbd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80064b6:	2100      	movs	r1, #0
 80064b8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80064bc:	f7fc fdb8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80064c0:	2181      	movs	r1, #129	; 0x81
 80064c2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80064c6:	f7fc fdb3 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80064ca:	2100      	movs	r1, #0
 80064cc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80064d0:	f7fc fdae 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80064d4:	21a6      	movs	r1, #166	; 0xa6
 80064d6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80064da:	f7fc fda9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80064de:	2100      	movs	r1, #0
 80064e0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80064e4:	f7fc fda4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80064e8:	21e5      	movs	r1, #229	; 0xe5
 80064ea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80064ee:	f7fc fd9f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80064f2:	2101      	movs	r1, #1
 80064f4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80064f8:	f7fc fd9a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80064fc:	2113      	movs	r1, #19
 80064fe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8006502:	f7fc fd95 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8006506:	2101      	movs	r1, #1
 8006508:	f24d 5012 	movw	r0, #54546	; 0xd512
 800650c:	f7fc fd90 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8006510:	2154      	movs	r1, #84	; 0x54
 8006512:	f24d 5013 	movw	r0, #54547	; 0xd513
 8006516:	f7fc fd8b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800651a:	2101      	movs	r1, #1
 800651c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006520:	f7fc fd86 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8006524:	2182      	movs	r1, #130	; 0x82
 8006526:	f24d 5015 	movw	r0, #54549	; 0xd515
 800652a:	f7fc fd81 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800652e:	2101      	movs	r1, #1
 8006530:	f24d 5016 	movw	r0, #54550	; 0xd516
 8006534:	f7fc fd7c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006538:	21ca      	movs	r1, #202	; 0xca
 800653a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800653e:	f7fc fd77 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8006542:	2102      	movs	r1, #2
 8006544:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006548:	f7fc fd72 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800654c:	2100      	movs	r1, #0
 800654e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8006552:	f7fc fd6d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8006556:	2102      	movs	r1, #2
 8006558:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800655c:	f7fc fd68 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8006560:	2101      	movs	r1, #1
 8006562:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8006566:	f7fc fd63 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 800656a:	2102      	movs	r1, #2
 800656c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8006570:	f7fc fd5e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8006574:	2134      	movs	r1, #52	; 0x34
 8006576:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800657a:	f7fc fd59 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800657e:	2102      	movs	r1, #2
 8006580:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8006584:	f7fc fd54 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8006588:	2167      	movs	r1, #103	; 0x67
 800658a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800658e:	f7fc fd4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8006592:	2102      	movs	r1, #2
 8006594:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006598:	f7fc fd4a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 800659c:	2184      	movs	r1, #132	; 0x84
 800659e:	f24d 5021 	movw	r0, #54561	; 0xd521
 80065a2:	f7fc fd45 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80065a6:	2102      	movs	r1, #2
 80065a8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80065ac:	f7fc fd40 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80065b0:	21a4      	movs	r1, #164	; 0xa4
 80065b2:	f24d 5023 	movw	r0, #54563	; 0xd523
 80065b6:	f7fc fd3b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80065ba:	2102      	movs	r1, #2
 80065bc:	f24d 5024 	movw	r0, #54564	; 0xd524
 80065c0:	f7fc fd36 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80065c4:	21b7      	movs	r1, #183	; 0xb7
 80065c6:	f24d 5025 	movw	r0, #54565	; 0xd525
 80065ca:	f7fc fd31 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80065ce:	2102      	movs	r1, #2
 80065d0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80065d4:	f7fc fd2c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80065d8:	21cf      	movs	r1, #207	; 0xcf
 80065da:	f24d 5027 	movw	r0, #54567	; 0xd527
 80065de:	f7fc fd27 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80065e2:	2102      	movs	r1, #2
 80065e4:	f24d 5028 	movw	r0, #54568	; 0xd528
 80065e8:	f7fc fd22 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80065ec:	21de      	movs	r1, #222	; 0xde
 80065ee:	f24d 5029 	movw	r0, #54569	; 0xd529
 80065f2:	f7fc fd1d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80065f6:	2102      	movs	r1, #2
 80065f8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80065fc:	f7fc fd18 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8006600:	21f2      	movs	r1, #242	; 0xf2
 8006602:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8006606:	f7fc fd13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800660a:	2102      	movs	r1, #2
 800660c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8006610:	f7fc fd0e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8006614:	21fe      	movs	r1, #254	; 0xfe
 8006616:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800661a:	f7fc fd09 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800661e:	2103      	movs	r1, #3
 8006620:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8006624:	f7fc fd04 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006628:	2110      	movs	r1, #16
 800662a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800662e:	f7fc fcff 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8006632:	2103      	movs	r1, #3
 8006634:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006638:	f7fc fcfa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800663c:	2133      	movs	r1, #51	; 0x33
 800663e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8006642:	f7fc fcf5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8006646:	2103      	movs	r1, #3
 8006648:	f24d 5032 	movw	r0, #54578	; 0xd532
 800664c:	f7fc fcf0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006650:	216d      	movs	r1, #109	; 0x6d
 8006652:	f24d 5033 	movw	r0, #54579	; 0xd533
 8006656:	f7fc fceb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800665a:	2100      	movs	r1, #0
 800665c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006660:	f7fc fce6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8006664:	2133      	movs	r1, #51	; 0x33
 8006666:	f24d 6001 	movw	r0, #54785	; 0xd601
 800666a:	f7fc fce1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800666e:	2100      	movs	r1, #0
 8006670:	f24d 6002 	movw	r0, #54786	; 0xd602
 8006674:	f7fc fcdc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006678:	2134      	movs	r1, #52	; 0x34
 800667a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800667e:	f7fc fcd7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8006682:	2100      	movs	r1, #0
 8006684:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006688:	f7fc fcd2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800668c:	213a      	movs	r1, #58	; 0x3a
 800668e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8006692:	f7fc fccd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8006696:	2100      	movs	r1, #0
 8006698:	f24d 6006 	movw	r0, #54790	; 0xd606
 800669c:	f7fc fcc8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80066a0:	214a      	movs	r1, #74	; 0x4a
 80066a2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80066a6:	f7fc fcc3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80066aa:	2100      	movs	r1, #0
 80066ac:	f24d 6008 	movw	r0, #54792	; 0xd608
 80066b0:	f7fc fcbe 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80066b4:	215c      	movs	r1, #92	; 0x5c
 80066b6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80066ba:	f7fc fcb9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80066be:	2100      	movs	r1, #0
 80066c0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80066c4:	f7fc fcb4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80066c8:	2181      	movs	r1, #129	; 0x81
 80066ca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80066ce:	f7fc fcaf 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80066d2:	2100      	movs	r1, #0
 80066d4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80066d8:	f7fc fcaa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80066dc:	21a6      	movs	r1, #166	; 0xa6
 80066de:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80066e2:	f7fc fca5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80066e6:	2100      	movs	r1, #0
 80066e8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80066ec:	f7fc fca0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80066f0:	21e5      	movs	r1, #229	; 0xe5
 80066f2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80066f6:	f7fc fc9b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80066fa:	2101      	movs	r1, #1
 80066fc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8006700:	f7fc fc96 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8006704:	2113      	movs	r1, #19
 8006706:	f24d 6011 	movw	r0, #54801	; 0xd611
 800670a:	f7fc fc91 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800670e:	2101      	movs	r1, #1
 8006710:	f24d 6012 	movw	r0, #54802	; 0xd612
 8006714:	f7fc fc8c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006718:	2154      	movs	r1, #84	; 0x54
 800671a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800671e:	f7fc fc87 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8006722:	2101      	movs	r1, #1
 8006724:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006728:	f7fc fc82 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800672c:	2182      	movs	r1, #130	; 0x82
 800672e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8006732:	f7fc fc7d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8006736:	2101      	movs	r1, #1
 8006738:	f24d 6016 	movw	r0, #54806	; 0xd616
 800673c:	f7fc fc78 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006740:	21ca      	movs	r1, #202	; 0xca
 8006742:	f24d 6017 	movw	r0, #54807	; 0xd617
 8006746:	f7fc fc73 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800674a:	2102      	movs	r1, #2
 800674c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006750:	f7fc fc6e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8006754:	2100      	movs	r1, #0
 8006756:	f24d 6019 	movw	r0, #54809	; 0xd619
 800675a:	f7fc fc69 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800675e:	2102      	movs	r1, #2
 8006760:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8006764:	f7fc fc64 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006768:	2101      	movs	r1, #1
 800676a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800676e:	f7fc fc5f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8006772:	2102      	movs	r1, #2
 8006774:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006778:	f7fc fc5a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800677c:	2134      	movs	r1, #52	; 0x34
 800677e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8006782:	f7fc fc55 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8006786:	2102      	movs	r1, #2
 8006788:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800678c:	f7fc fc50 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006790:	2167      	movs	r1, #103	; 0x67
 8006792:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8006796:	f7fc fc4b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800679a:	2102      	movs	r1, #2
 800679c:	f24d 6020 	movw	r0, #54816	; 0xd620
 80067a0:	f7fc fc46 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80067a4:	2184      	movs	r1, #132	; 0x84
 80067a6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80067aa:	f7fc fc41 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80067ae:	2102      	movs	r1, #2
 80067b0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80067b4:	f7fc fc3c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80067b8:	21a4      	movs	r1, #164	; 0xa4
 80067ba:	f24d 6023 	movw	r0, #54819	; 0xd623
 80067be:	f7fc fc37 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80067c2:	2102      	movs	r1, #2
 80067c4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80067c8:	f7fc fc32 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80067cc:	21b7      	movs	r1, #183	; 0xb7
 80067ce:	f24d 6025 	movw	r0, #54821	; 0xd625
 80067d2:	f7fc fc2d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80067d6:	2102      	movs	r1, #2
 80067d8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80067dc:	f7fc fc28 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80067e0:	21cf      	movs	r1, #207	; 0xcf
 80067e2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80067e6:	f7fc fc23 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80067ea:	2102      	movs	r1, #2
 80067ec:	f24d 6028 	movw	r0, #54824	; 0xd628
 80067f0:	f7fc fc1e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80067f4:	21de      	movs	r1, #222	; 0xde
 80067f6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80067fa:	f7fc fc19 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80067fe:	2102      	movs	r1, #2
 8006800:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8006804:	f7fc fc14 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8006808:	21f2      	movs	r1, #242	; 0xf2
 800680a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800680e:	f7fc fc0f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8006812:	2102      	movs	r1, #2
 8006814:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006818:	f7fc fc0a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800681c:	21fe      	movs	r1, #254	; 0xfe
 800681e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8006822:	f7fc fc05 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8006826:	2103      	movs	r1, #3
 8006828:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800682c:	f7fc fc00 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006830:	2110      	movs	r1, #16
 8006832:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006836:	f7fc fbfb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800683a:	2103      	movs	r1, #3
 800683c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006840:	f7fc fbf6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8006844:	2133      	movs	r1, #51	; 0x33
 8006846:	f24d 6031 	movw	r0, #54833	; 0xd631
 800684a:	f7fc fbf1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800684e:	2103      	movs	r1, #3
 8006850:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006854:	f7fc fbec 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006858:	216d      	movs	r1, #109	; 0x6d
 800685a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800685e:	f7fc fbe7 	bl	8003030 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8006862:	2155      	movs	r1, #85	; 0x55
 8006864:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006868:	f7fc fbe2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800686c:	21aa      	movs	r1, #170	; 0xaa
 800686e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006872:	f7fc fbdd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006876:	2152      	movs	r1, #82	; 0x52
 8006878:	f24f 0002 	movw	r0, #61442	; 0xf002
 800687c:	f7fc fbd8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006880:	2108      	movs	r1, #8
 8006882:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006886:	f7fc fbd3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800688a:	2100      	movs	r1, #0
 800688c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006890:	f7fc fbce 	bl	8003030 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006894:	21cc      	movs	r1, #204	; 0xcc
 8006896:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800689a:	f7fc fbc9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800689e:	2100      	movs	r1, #0
 80068a0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80068a4:	f7fc fbc4 	bl	8003030 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80068a8:	2105      	movs	r1, #5
 80068aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80068ae:	f7fc fbbf 	bl	8003030 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80068b2:	2170      	movs	r1, #112	; 0x70
 80068b4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80068b8:	f7fc fbba 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80068bc:	2170      	movs	r1, #112	; 0x70
 80068be:	f24b 7001 	movw	r0, #46849	; 0xb701
 80068c2:	f7fc fbb5 	bl	8003030 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80068c6:	2101      	movs	r1, #1
 80068c8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80068cc:	f7fc fbb0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80068d0:	2103      	movs	r1, #3
 80068d2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80068d6:	f7fc fbab 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80068da:	2103      	movs	r1, #3
 80068dc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80068e0:	f7fc fba6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80068e4:	2103      	movs	r1, #3
 80068e6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80068ea:	f7fc fba1 	bl	8003030 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80068ee:	2102      	movs	r1, #2
 80068f0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80068f4:	f7fc fb9c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80068f8:	2100      	movs	r1, #0
 80068fa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80068fe:	f7fc fb97 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006902:	2100      	movs	r1, #0
 8006904:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006908:	f7fc fb92 	bl	8003030 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800690c:	21d0      	movs	r1, #208	; 0xd0
 800690e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8006912:	f7fc fb8d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8006916:	2102      	movs	r1, #2
 8006918:	f64c 1001 	movw	r0, #51457	; 0xc901
 800691c:	f7fc fb88 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006920:	2150      	movs	r1, #80	; 0x50
 8006922:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006926:	f7fc fb83 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800692a:	2150      	movs	r1, #80	; 0x50
 800692c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006930:	f7fc fb7e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006934:	2150      	movs	r1, #80	; 0x50
 8006936:	f64c 1004 	movw	r0, #51460	; 0xc904
 800693a:	f7fc fb79 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800693e:	2100      	movs	r1, #0
 8006940:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006944:	f7fc fb74 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006948:	2155      	movs	r1, #85	; 0x55
 800694a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800694e:	f7fc fb6f 	bl	8003030 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006952:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006956:	f7fc fadf 	bl	8002f18 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800695a:	2001      	movs	r0, #1
 800695c:	f7fa f8b4 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006960:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006964:	f7fc fad8 	bl	8002f18 <LCD_WR_REG>
 8006968:	f001 bd18 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800696c:	4bec      	ldr	r3, [pc, #944]	; (8006d20 <LCD_Init+0x27b8>)
 800696e:	889b      	ldrh	r3, [r3, #4]
 8006970:	f249 3225 	movw	r2, #37669	; 0x9325
 8006974:	4293      	cmp	r3, r2
 8006976:	f040 80d7 	bne.w	8006b28 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800697a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800697e:	20e5      	movs	r0, #229	; 0xe5
 8006980:	f7fc fb56 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006988:	2001      	movs	r0, #1
 800698a:	f7fc fb51 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800698e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006992:	2002      	movs	r0, #2
 8006994:	f7fc fb4c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006998:	f241 0130 	movw	r1, #4144	; 0x1030
 800699c:	2003      	movs	r0, #3
 800699e:	f7fc fb47 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80069a2:	2100      	movs	r1, #0
 80069a4:	2004      	movs	r0, #4
 80069a6:	f7fc fb43 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80069aa:	f240 2102 	movw	r1, #514	; 0x202
 80069ae:	2008      	movs	r0, #8
 80069b0:	f7fc fb3e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80069b4:	2100      	movs	r1, #0
 80069b6:	2009      	movs	r0, #9
 80069b8:	f7fc fb3a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80069bc:	2100      	movs	r1, #0
 80069be:	200a      	movs	r0, #10
 80069c0:	f7fc fb36 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80069c4:	2100      	movs	r1, #0
 80069c6:	200c      	movs	r0, #12
 80069c8:	f7fc fb32 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80069cc:	2100      	movs	r1, #0
 80069ce:	200d      	movs	r0, #13
 80069d0:	f7fc fb2e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80069d4:	2100      	movs	r1, #0
 80069d6:	200f      	movs	r0, #15
 80069d8:	f7fc fb2a 	bl	8003030 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80069dc:	2100      	movs	r1, #0
 80069de:	2010      	movs	r0, #16
 80069e0:	f7fc fb26 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80069e4:	2107      	movs	r1, #7
 80069e6:	2011      	movs	r0, #17
 80069e8:	f7fc fb22 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80069ec:	2100      	movs	r1, #0
 80069ee:	2012      	movs	r0, #18
 80069f0:	f7fc fb1e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80069f4:	2100      	movs	r1, #0
 80069f6:	2013      	movs	r0, #19
 80069f8:	f7fc fb1a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80069fc:	2100      	movs	r1, #0
 80069fe:	2007      	movs	r0, #7
 8006a00:	f7fc fb16 	bl	8003030 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006a04:	f241 6190 	movw	r1, #5776	; 0x1690
 8006a08:	2010      	movs	r0, #16
 8006a0a:	f7fc fb11 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006a0e:	f240 2127 	movw	r1, #551	; 0x227
 8006a12:	2011      	movs	r0, #17
 8006a14:	f7fc fb0c 	bl	8003030 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006a18:	219d      	movs	r1, #157	; 0x9d
 8006a1a:	2012      	movs	r0, #18
 8006a1c:	f7fc fb08 	bl	8003030 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006a20:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006a24:	2013      	movs	r0, #19
 8006a26:	f7fc fb03 	bl	8003030 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8006a2a:	2125      	movs	r1, #37	; 0x25
 8006a2c:	2029      	movs	r0, #41	; 0x29
 8006a2e:	f7fc faff 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006a32:	210d      	movs	r1, #13
 8006a34:	202b      	movs	r0, #43	; 0x2b
 8006a36:	f7fc fafb 	bl	8003030 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8006a3a:	2107      	movs	r1, #7
 8006a3c:	2030      	movs	r0, #48	; 0x30
 8006a3e:	f7fc faf7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8006a42:	f240 3103 	movw	r1, #771	; 0x303
 8006a46:	2031      	movs	r0, #49	; 0x31
 8006a48:	f7fc faf2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8006a4c:	2103      	movs	r1, #3
 8006a4e:	2032      	movs	r0, #50	; 0x32
 8006a50:	f7fc faee 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006a54:	f240 2106 	movw	r1, #518	; 0x206
 8006a58:	2035      	movs	r0, #53	; 0x35
 8006a5a:	f7fc fae9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8006a5e:	2108      	movs	r1, #8
 8006a60:	2036      	movs	r0, #54	; 0x36
 8006a62:	f7fc fae5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006a66:	f240 4106 	movw	r1, #1030	; 0x406
 8006a6a:	2037      	movs	r0, #55	; 0x37
 8006a6c:	f7fc fae0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006a70:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006a74:	2038      	movs	r0, #56	; 0x38
 8006a76:	f7fc fadb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8006a7a:	2107      	movs	r1, #7
 8006a7c:	2039      	movs	r0, #57	; 0x39
 8006a7e:	f7fc fad7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8006a82:	f240 6102 	movw	r1, #1538	; 0x602
 8006a86:	203c      	movs	r0, #60	; 0x3c
 8006a88:	f7fc fad2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8006a8c:	2108      	movs	r1, #8
 8006a8e:	203d      	movs	r0, #61	; 0x3d
 8006a90:	f7fc face 	bl	8003030 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8006a94:	2100      	movs	r1, #0
 8006a96:	2050      	movs	r0, #80	; 0x50
 8006a98:	f7fc faca 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006a9c:	21ef      	movs	r1, #239	; 0xef
 8006a9e:	2051      	movs	r0, #81	; 0x51
 8006aa0:	f7fc fac6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	2052      	movs	r0, #82	; 0x52
 8006aa8:	f7fc fac2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006aac:	f240 113f 	movw	r1, #319	; 0x13f
 8006ab0:	2053      	movs	r0, #83	; 0x53
 8006ab2:	f7fc fabd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8006ab6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006aba:	2060      	movs	r0, #96	; 0x60
 8006abc:	f7fc fab8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	2061      	movs	r0, #97	; 0x61
 8006ac4:	f7fc fab4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006ac8:	2100      	movs	r1, #0
 8006aca:	206a      	movs	r0, #106	; 0x6a
 8006acc:	f7fc fab0 	bl	8003030 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	2080      	movs	r0, #128	; 0x80
 8006ad4:	f7fc faac 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006ad8:	2100      	movs	r1, #0
 8006ada:	2081      	movs	r0, #129	; 0x81
 8006adc:	f7fc faa8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2082      	movs	r0, #130	; 0x82
 8006ae4:	f7fc faa4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006ae8:	2100      	movs	r1, #0
 8006aea:	2083      	movs	r0, #131	; 0x83
 8006aec:	f7fc faa0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006af0:	2100      	movs	r1, #0
 8006af2:	2084      	movs	r0, #132	; 0x84
 8006af4:	f7fc fa9c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006af8:	2100      	movs	r1, #0
 8006afa:	2085      	movs	r0, #133	; 0x85
 8006afc:	f7fc fa98 	bl	8003030 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006b00:	2110      	movs	r1, #16
 8006b02:	2090      	movs	r0, #144	; 0x90
 8006b04:	f7fc fa94 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006b08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b0c:	2092      	movs	r0, #146	; 0x92
 8006b0e:	f7fc fa8f 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8006b12:	f240 1133 	movw	r1, #307	; 0x133
 8006b16:	2007      	movs	r0, #7
 8006b18:	f7fc fa8a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8006b1c:	2122      	movs	r1, #34	; 0x22
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f7fc fa86 	bl	8003030 <LCD_WriteReg>
 8006b24:	f001 bc3a 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006b28:	4b7d      	ldr	r3, [pc, #500]	; (8006d20 <LCD_Init+0x27b8>)
 8006b2a:	889b      	ldrh	r3, [r3, #4]
 8006b2c:	f249 3228 	movw	r2, #37672	; 0x9328
 8006b30:	4293      	cmp	r3, r2
 8006b32:	f040 80f7 	bne.w	8006d24 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8006b36:	f241 018f 	movw	r1, #4239	; 0x108f
 8006b3a:	20ec      	movs	r0, #236	; 0xec
 8006b3c:	f7fc fa78 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8006b40:	f241 2134 	movw	r1, #4660	; 0x1234
 8006b44:	20ef      	movs	r0, #239	; 0xef
 8006b46:	f7fc fa73 	bl	8003030 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8006b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f7fc fa6e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8006b54:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006b58:	2002      	movs	r0, #2
 8006b5a:	f7fc fa69 	bl	8003030 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8006b5e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006b62:	2003      	movs	r0, #3
 8006b64:	f7fc fa64 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	2004      	movs	r0, #4
 8006b6c:	f7fc fa60 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006b70:	f240 2102 	movw	r1, #514	; 0x202
 8006b74:	2008      	movs	r0, #8
 8006b76:	f7fc fa5b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	2009      	movs	r0, #9
 8006b7e:	f7fc fa57 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8006b82:	2100      	movs	r1, #0
 8006b84:	200a      	movs	r0, #10
 8006b86:	f7fc fa53 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	200c      	movs	r0, #12
 8006b8e:	f7fc fa4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8006b92:	2100      	movs	r1, #0
 8006b94:	200d      	movs	r0, #13
 8006b96:	f7fc fa4b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	200f      	movs	r0, #15
 8006b9e:	f7fc fa47 	bl	8003030 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2010      	movs	r0, #16
 8006ba6:	f7fc fa43 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006baa:	2107      	movs	r1, #7
 8006bac:	2011      	movs	r0, #17
 8006bae:	f7fc fa3f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	2012      	movs	r0, #18
 8006bb6:	f7fc fa3b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	2013      	movs	r0, #19
 8006bbe:	f7fc fa37 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	2007      	movs	r0, #7
 8006bc6:	f7fc fa33 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006bca:	2032      	movs	r0, #50	; 0x32
 8006bcc:	f7f9 ff7c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8006bd0:	f241 4190 	movw	r1, #5264	; 0x1490
 8006bd4:	2010      	movs	r0, #16
 8006bd6:	f7fc fa2b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006bda:	f240 2127 	movw	r1, #551	; 0x227
 8006bde:	2011      	movs	r0, #17
 8006be0:	f7fc fa26 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006be4:	2032      	movs	r0, #50	; 0x32
 8006be6:	f7f9 ff6f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8006bea:	218a      	movs	r1, #138	; 0x8a
 8006bec:	2012      	movs	r0, #18
 8006bee:	f7fc fa1f 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006bf2:	2032      	movs	r0, #50	; 0x32
 8006bf4:	f7f9 ff68 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8006bf8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006bfc:	2013      	movs	r0, #19
 8006bfe:	f7fc fa17 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8006c02:	2106      	movs	r1, #6
 8006c04:	2029      	movs	r0, #41	; 0x29
 8006c06:	f7fc fa13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8006c0a:	210d      	movs	r1, #13
 8006c0c:	202b      	movs	r0, #43	; 0x2b
 8006c0e:	f7fc fa0f 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006c12:	2032      	movs	r0, #50	; 0x32
 8006c14:	f7f9 ff58 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2020      	movs	r0, #32
 8006c1c:	f7fc fa08 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006c20:	2100      	movs	r1, #0
 8006c22:	2021      	movs	r0, #33	; 0x21
 8006c24:	f7fc fa04 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006c28:	2032      	movs	r0, #50	; 0x32
 8006c2a:	f7f9 ff4d 	bl	8000ac8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8006c2e:	2100      	movs	r1, #0
 8006c30:	2030      	movs	r0, #48	; 0x30
 8006c32:	f7fc f9fd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8006c36:	f240 6104 	movw	r1, #1540	; 0x604
 8006c3a:	2031      	movs	r0, #49	; 0x31
 8006c3c:	f7fc f9f8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8006c40:	f240 3105 	movw	r1, #773	; 0x305
 8006c44:	2032      	movs	r0, #50	; 0x32
 8006c46:	f7fc f9f3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2035      	movs	r0, #53	; 0x35
 8006c4e:	f7fc f9ef 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8006c52:	f640 4109 	movw	r1, #3081	; 0xc09
 8006c56:	2036      	movs	r0, #54	; 0x36
 8006c58:	f7fc f9ea 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8006c5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c60:	2037      	movs	r0, #55	; 0x37
 8006c62:	f7fc f9e5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8006c66:	f240 3101 	movw	r1, #769	; 0x301
 8006c6a:	2038      	movs	r0, #56	; 0x38
 8006c6c:	f7fc f9e0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006c70:	f240 7107 	movw	r1, #1799	; 0x707
 8006c74:	2039      	movs	r0, #57	; 0x39
 8006c76:	f7fc f9db 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	203c      	movs	r0, #60	; 0x3c
 8006c7e:	f7fc f9d7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8006c82:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006c86:	203d      	movs	r0, #61	; 0x3d
 8006c88:	f7fc f9d2 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006c8c:	2032      	movs	r0, #50	; 0x32
 8006c8e:	f7f9 ff1b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8006c92:	2100      	movs	r1, #0
 8006c94:	2050      	movs	r0, #80	; 0x50
 8006c96:	f7fc f9cb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8006c9a:	21ef      	movs	r1, #239	; 0xef
 8006c9c:	2051      	movs	r0, #81	; 0x51
 8006c9e:	f7fc f9c7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2052      	movs	r0, #82	; 0x52
 8006ca6:	f7fc f9c3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8006caa:	f240 113f 	movw	r1, #319	; 0x13f
 8006cae:	2053      	movs	r0, #83	; 0x53
 8006cb0:	f7fc f9be 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8006cb4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006cb8:	2060      	movs	r0, #96	; 0x60
 8006cba:	f7fc f9b9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2061      	movs	r0, #97	; 0x61
 8006cc2:	f7fc f9b5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	206a      	movs	r0, #106	; 0x6a
 8006cca:	f7fc f9b1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2080      	movs	r0, #128	; 0x80
 8006cd2:	f7fc f9ad 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	2081      	movs	r0, #129	; 0x81
 8006cda:	f7fc f9a9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006cde:	2100      	movs	r1, #0
 8006ce0:	2082      	movs	r0, #130	; 0x82
 8006ce2:	f7fc f9a5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	2083      	movs	r0, #131	; 0x83
 8006cea:	f7fc f9a1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006cee:	2100      	movs	r1, #0
 8006cf0:	2084      	movs	r0, #132	; 0x84
 8006cf2:	f7fc f99d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2085      	movs	r0, #133	; 0x85
 8006cfa:	f7fc f999 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8006cfe:	2110      	movs	r1, #16
 8006d00:	2090      	movs	r0, #144	; 0x90
 8006d02:	f7fc f995 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d0a:	2092      	movs	r0, #146	; 0x92
 8006d0c:	f7fc f990 	bl	8003030 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006d10:	f240 1133 	movw	r1, #307	; 0x133
 8006d14:	2007      	movs	r0, #7
 8006d16:	f7fc f98b 	bl	8003030 <LCD_WriteReg>
 8006d1a:	f001 bb3f 	b.w	800839c <LCD_Init+0x3e34>
 8006d1e:	bf00      	nop
 8006d20:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0x9320) //测试OK.
 8006d24:	4bce      	ldr	r3, [pc, #824]	; (8007060 <LCD_Init+0x2af8>)
 8006d26:	889b      	ldrh	r3, [r3, #4]
 8006d28:	f249 3220 	movw	r2, #37664	; 0x9320
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	f040 80ad 	bne.w	8006e8c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8006d32:	2100      	movs	r1, #0
 8006d34:	2000      	movs	r0, #0
 8006d36:	f7fc f97b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8006d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d3e:	2001      	movs	r0, #1
 8006d40:	f7fc f976 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8006d44:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f7fc f971 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8006d4e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006d52:	2003      	movs	r0, #3
 8006d54:	f7fc f96c 	bl	8003030 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006d58:	2100      	movs	r1, #0
 8006d5a:	2004      	movs	r0, #4
 8006d5c:	f7fc f968 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006d60:	f240 2102 	movw	r1, #514	; 0x202
 8006d64:	2008      	movs	r0, #8
 8006d66:	f7fc f963 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	2009      	movs	r0, #9
 8006d6e:	f7fc f95f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8006d72:	2100      	movs	r1, #0
 8006d74:	200a      	movs	r0, #10
 8006d76:	f7fc f95b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	200c      	movs	r0, #12
 8006d7e:	f7fc f957 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8006d82:	2100      	movs	r1, #0
 8006d84:	200d      	movs	r0, #13
 8006d86:	f7fc f953 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	200f      	movs	r0, #15
 8006d8e:	f7fc f94f 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006d92:	2032      	movs	r0, #50	; 0x32
 8006d94:	f7f9 fe98 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8006d98:	f240 1101 	movw	r1, #257	; 0x101
 8006d9c:	2007      	movs	r0, #7
 8006d9e:	f7fc f947 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8006da2:	2032      	movs	r0, #50	; 0x32
 8006da4:	f7f9 fe90 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8006da8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8006dac:	2010      	movs	r0, #16
 8006dae:	f7fc f93f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8006db2:	2107      	movs	r1, #7
 8006db4:	2011      	movs	r0, #17
 8006db6:	f7fc f93b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8006dba:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006dbe:	2012      	movs	r0, #18
 8006dc0:	f7fc f936 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8006dc4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006dc8:	2013      	movs	r0, #19
 8006dca:	f7fc f931 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2029      	movs	r0, #41	; 0x29
 8006dd2:	f7fc f92d 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8006dd6:	f244 0110 	movw	r1, #16400	; 0x4010
 8006dda:	202b      	movs	r0, #43	; 0x2b
 8006ddc:	f7fc f928 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006de0:	2100      	movs	r1, #0
 8006de2:	2050      	movs	r0, #80	; 0x50
 8006de4:	f7fc f924 	bl	8003030 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006de8:	21ef      	movs	r1, #239	; 0xef
 8006dea:	2051      	movs	r0, #81	; 0x51
 8006dec:	f7fc f920 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006df0:	2100      	movs	r1, #0
 8006df2:	2052      	movs	r0, #82	; 0x52
 8006df4:	f7fc f91c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006df8:	f240 113f 	movw	r1, #319	; 0x13f
 8006dfc:	2053      	movs	r0, #83	; 0x53
 8006dfe:	f7fc f917 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8006e02:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006e06:	2060      	movs	r0, #96	; 0x60
 8006e08:	f7fc f912 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	2061      	movs	r0, #97	; 0x61
 8006e10:	f7fc f90e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8006e14:	2100      	movs	r1, #0
 8006e16:	206a      	movs	r0, #106	; 0x6a
 8006e18:	f7fc f90a 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	2080      	movs	r0, #128	; 0x80
 8006e20:	f7fc f906 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8006e24:	2100      	movs	r1, #0
 8006e26:	2081      	movs	r0, #129	; 0x81
 8006e28:	f7fc f902 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	2082      	movs	r0, #130	; 0x82
 8006e30:	f7fc f8fe 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8006e34:	2100      	movs	r1, #0
 8006e36:	2083      	movs	r0, #131	; 0x83
 8006e38:	f7fc f8fa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2084      	movs	r0, #132	; 0x84
 8006e40:	f7fc f8f6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8006e44:	2100      	movs	r1, #0
 8006e46:	2085      	movs	r0, #133	; 0x85
 8006e48:	f7fc f8f2 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8006e4c:	2110      	movs	r1, #16
 8006e4e:	2090      	movs	r0, #144	; 0x90
 8006e50:	f7fc f8ee 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8006e54:	2100      	movs	r1, #0
 8006e56:	2092      	movs	r0, #146	; 0x92
 8006e58:	f7fc f8ea 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	2093      	movs	r0, #147	; 0x93
 8006e60:	f7fc f8e6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8006e64:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006e68:	2095      	movs	r0, #149	; 0x95
 8006e6a:	f7fc f8e1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8006e6e:	2100      	movs	r1, #0
 8006e70:	2097      	movs	r0, #151	; 0x97
 8006e72:	f7fc f8dd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8006e76:	2100      	movs	r1, #0
 8006e78:	2098      	movs	r0, #152	; 0x98
 8006e7a:	f7fc f8d9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8006e7e:	f240 1173 	movw	r1, #371	; 0x173
 8006e82:	2007      	movs	r0, #7
 8006e84:	f7fc f8d4 	bl	8003030 <LCD_WriteReg>
 8006e88:	f001 ba88 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8006e8c:	4b74      	ldr	r3, [pc, #464]	; (8007060 <LCD_Init+0x2af8>)
 8006e8e:	889b      	ldrh	r3, [r3, #4]
 8006e90:	f249 3231 	movw	r2, #37681	; 0x9331
 8006e94:	4293      	cmp	r3, r2
 8006e96:	f040 80e5 	bne.w	8007064 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8006e9a:	f241 0114 	movw	r1, #4116	; 0x1014
 8006e9e:	20e7      	movs	r0, #231	; 0xe7
 8006ea0:	f7fc f8c6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	f7fc f8c1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8006eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eb2:	2002      	movs	r0, #2
 8006eb4:	f7fc f8bc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006eb8:	f241 0138 	movw	r1, #4152	; 0x1038
 8006ebc:	2003      	movs	r0, #3
 8006ebe:	f7fc f8b7 	bl	8003030 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006ec2:	f240 2102 	movw	r1, #514	; 0x202
 8006ec6:	2008      	movs	r0, #8
 8006ec8:	f7fc f8b2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2009      	movs	r0, #9
 8006ed0:	f7fc f8ae 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	200a      	movs	r0, #10
 8006ed8:	f7fc f8aa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006edc:	2100      	movs	r1, #0
 8006ede:	200c      	movs	r0, #12
 8006ee0:	f7fc f8a6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	200d      	movs	r0, #13
 8006ee8:	f7fc f8a2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006eec:	2100      	movs	r1, #0
 8006eee:	200f      	movs	r0, #15
 8006ef0:	f7fc f89e 	bl	8003030 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f7fc f89a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006efc:	2107      	movs	r1, #7
 8006efe:	2011      	movs	r0, #17
 8006f00:	f7fc f896 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8006f04:	2100      	movs	r1, #0
 8006f06:	2012      	movs	r0, #18
 8006f08:	f7fc f892 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	2013      	movs	r0, #19
 8006f10:	f7fc f88e 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8006f14:	20c8      	movs	r0, #200	; 0xc8
 8006f16:	f7f9 fdd7 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006f1a:	f241 6190 	movw	r1, #5776	; 0x1690
 8006f1e:	2010      	movs	r0, #16
 8006f20:	f7fc f886 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8006f24:	f240 2127 	movw	r1, #551	; 0x227
 8006f28:	2011      	movs	r0, #17
 8006f2a:	f7fc f881 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006f2e:	2032      	movs	r0, #50	; 0x32
 8006f30:	f7f9 fdca 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8006f34:	210c      	movs	r1, #12
 8006f36:	2012      	movs	r0, #18
 8006f38:	f7fc f87a 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006f3c:	2032      	movs	r0, #50	; 0x32
 8006f3e:	f7f9 fdc3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8006f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f46:	2013      	movs	r0, #19
 8006f48:	f7fc f872 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006f4c:	2111      	movs	r1, #17
 8006f4e:	2029      	movs	r0, #41	; 0x29
 8006f50:	f7fc f86e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8006f54:	210b      	movs	r1, #11
 8006f56:	202b      	movs	r0, #43	; 0x2b
 8006f58:	f7fc f86a 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006f5c:	2032      	movs	r0, #50	; 0x32
 8006f5e:	f7f9 fdb3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8006f62:	2100      	movs	r1, #0
 8006f64:	2020      	movs	r0, #32
 8006f66:	f7fc f863 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8006f6a:	f240 113f 	movw	r1, #319	; 0x13f
 8006f6e:	2021      	movs	r0, #33	; 0x21
 8006f70:	f7fc f85e 	bl	8003030 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8006f74:	2100      	movs	r1, #0
 8006f76:	2030      	movs	r0, #48	; 0x30
 8006f78:	f7fc f85a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8006f7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006f80:	2031      	movs	r0, #49	; 0x31
 8006f82:	f7fc f855 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8006f86:	2100      	movs	r1, #0
 8006f88:	2032      	movs	r0, #50	; 0x32
 8006f8a:	f7fc f851 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8006f8e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006f92:	2035      	movs	r0, #53	; 0x35
 8006f94:	f7fc f84c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006f98:	f241 610a 	movw	r1, #5642	; 0x160a
 8006f9c:	2036      	movs	r0, #54	; 0x36
 8006f9e:	f7fc f847 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006fa2:	f240 7107 	movw	r1, #1799	; 0x707
 8006fa6:	2037      	movs	r0, #55	; 0x37
 8006fa8:	f7fc f842 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8006fac:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006fb0:	2038      	movs	r0, #56	; 0x38
 8006fb2:	f7fc f83d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006fb6:	f240 7107 	movw	r1, #1799	; 0x707
 8006fba:	2039      	movs	r0, #57	; 0x39
 8006fbc:	f7fc f838 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006fc0:	f240 4102 	movw	r1, #1026	; 0x402
 8006fc4:	203c      	movs	r0, #60	; 0x3c
 8006fc6:	f7fc f833 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8006fca:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006fce:	203d      	movs	r0, #61	; 0x3d
 8006fd0:	f7fc f82e 	bl	8003030 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	2050      	movs	r0, #80	; 0x50
 8006fd8:	f7fc f82a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8006fdc:	21ef      	movs	r1, #239	; 0xef
 8006fde:	2051      	movs	r0, #81	; 0x51
 8006fe0:	f7fc f826 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	2052      	movs	r0, #82	; 0x52
 8006fe8:	f7fc f822 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006fec:	f240 113f 	movw	r1, #319	; 0x13f
 8006ff0:	2053      	movs	r0, #83	; 0x53
 8006ff2:	f7fc f81d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006ff6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006ffa:	2060      	movs	r0, #96	; 0x60
 8006ffc:	f7fc f818 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8007000:	2101      	movs	r1, #1
 8007002:	2061      	movs	r0, #97	; 0x61
 8007004:	f7fc f814 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8007008:	2100      	movs	r1, #0
 800700a:	206a      	movs	r0, #106	; 0x6a
 800700c:	f7fc f810 	bl	8003030 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8007010:	2100      	movs	r1, #0
 8007012:	2080      	movs	r0, #128	; 0x80
 8007014:	f7fc f80c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8007018:	2100      	movs	r1, #0
 800701a:	2081      	movs	r0, #129	; 0x81
 800701c:	f7fc f808 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8007020:	2100      	movs	r1, #0
 8007022:	2082      	movs	r0, #130	; 0x82
 8007024:	f7fc f804 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007028:	2100      	movs	r1, #0
 800702a:	2083      	movs	r0, #131	; 0x83
 800702c:	f7fc f800 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8007030:	2100      	movs	r1, #0
 8007032:	2084      	movs	r0, #132	; 0x84
 8007034:	f7fb fffc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007038:	2100      	movs	r1, #0
 800703a:	2085      	movs	r0, #133	; 0x85
 800703c:	f7fb fff8 	bl	8003030 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8007040:	2110      	movs	r1, #16
 8007042:	2090      	movs	r0, #144	; 0x90
 8007044:	f7fb fff4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007048:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800704c:	2092      	movs	r0, #146	; 0x92
 800704e:	f7fb ffef 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8007052:	f240 1133 	movw	r1, #307	; 0x133
 8007056:	2007      	movs	r0, #7
 8007058:	f7fb ffea 	bl	8003030 <LCD_WriteReg>
 800705c:	f001 b99e 	b.w	800839c <LCD_Init+0x3e34>
 8007060:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0x5408) {
 8007064:	4be2      	ldr	r3, [pc, #904]	; (80073f0 <LCD_Init+0x2e88>)
 8007066:	889b      	ldrh	r3, [r3, #4]
 8007068:	f245 4208 	movw	r2, #21512	; 0x5408
 800706c:	4293      	cmp	r3, r2
 800706e:	f040 80a3 	bne.w	80071b8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8007072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007076:	2001      	movs	r0, #1
 8007078:	f7fb ffda 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800707c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007080:	2002      	movs	r0, #2
 8007082:	f7fb ffd5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8007086:	f241 0130 	movw	r1, #4144	; 0x1030
 800708a:	2003      	movs	r0, #3
 800708c:	f7fb ffd0 	bl	8003030 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8007090:	2100      	movs	r1, #0
 8007092:	2004      	movs	r0, #4
 8007094:	f7fb ffcc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8007098:	f240 2107 	movw	r1, #519	; 0x207
 800709c:	2008      	movs	r0, #8
 800709e:	f7fb ffc7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80070a2:	2100      	movs	r1, #0
 80070a4:	2009      	movs	r0, #9
 80070a6:	f7fb ffc3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80070aa:	2100      	movs	r1, #0
 80070ac:	200a      	movs	r0, #10
 80070ae:	f7fb ffbf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 80070b2:	2100      	movs	r1, #0
 80070b4:	200c      	movs	r0, #12
 80070b6:	f7fb ffbb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 80070ba:	2100      	movs	r1, #0
 80070bc:	200d      	movs	r0, #13
 80070be:	f7fb ffb7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 80070c2:	2100      	movs	r1, #0
 80070c4:	200f      	movs	r0, #15
 80070c6:	f7fb ffb3 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80070ca:	2014      	movs	r0, #20
 80070cc:	f7f9 fcfc 	bl	8000ac8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80070d0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80070d4:	2010      	movs	r0, #16
 80070d6:	f7fb ffab 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80070da:	2101      	movs	r1, #1
 80070dc:	2011      	movs	r0, #17
 80070de:	f7fb ffa7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80070e2:	2101      	movs	r1, #1
 80070e4:	2017      	movs	r0, #23
 80070e6:	f7fb ffa3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80070ea:	f44f 719c 	mov.w	r1, #312	; 0x138
 80070ee:	2012      	movs	r0, #18
 80070f0:	f7fb ff9e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80070f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070f8:	2013      	movs	r0, #19
 80070fa:	f7fb ff99 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80070fe:	2109      	movs	r1, #9
 8007100:	2029      	movs	r0, #41	; 0x29
 8007102:	f7fb ff95 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8007106:	2109      	movs	r1, #9
 8007108:	202a      	movs	r0, #42	; 0x2a
 800710a:	f7fb ff91 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800710e:	2100      	movs	r1, #0
 8007110:	20a4      	movs	r0, #164	; 0xa4
 8007112:	f7fb ff8d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8007116:	2100      	movs	r1, #0
 8007118:	2050      	movs	r0, #80	; 0x50
 800711a:	f7fb ff89 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800711e:	21ef      	movs	r1, #239	; 0xef
 8007120:	2051      	movs	r0, #81	; 0x51
 8007122:	f7fb ff85 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8007126:	2100      	movs	r1, #0
 8007128:	2052      	movs	r0, #82	; 0x52
 800712a:	f7fb ff81 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800712e:	f240 113f 	movw	r1, #319	; 0x13f
 8007132:	2053      	movs	r0, #83	; 0x53
 8007134:	f7fb ff7c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8007138:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800713c:	2060      	movs	r0, #96	; 0x60
 800713e:	f7fb ff77 	bl	8003030 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8007142:	2101      	movs	r1, #1
 8007144:	2061      	movs	r0, #97	; 0x61
 8007146:	f7fb ff73 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800714a:	2100      	movs	r1, #0
 800714c:	206a      	movs	r0, #106	; 0x6a
 800714e:	f7fb ff6f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8007152:	2100      	movs	r1, #0
 8007154:	2080      	movs	r0, #128	; 0x80
 8007156:	f7fb ff6b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 800715a:	2100      	movs	r1, #0
 800715c:	2081      	movs	r0, #129	; 0x81
 800715e:	f7fb ff67 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8007162:	2100      	movs	r1, #0
 8007164:	2082      	movs	r0, #130	; 0x82
 8007166:	f7fb ff63 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 800716a:	2100      	movs	r1, #0
 800716c:	2083      	movs	r0, #131	; 0x83
 800716e:	f7fb ff5f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8007172:	2100      	movs	r1, #0
 8007174:	2084      	movs	r0, #132	; 0x84
 8007176:	f7fb ff5b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 800717a:	2100      	movs	r1, #0
 800717c:	2085      	movs	r0, #133	; 0x85
 800717e:	f7fb ff57 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8007182:	2113      	movs	r1, #19
 8007184:	2090      	movs	r0, #144	; 0x90
 8007186:	f7fb ff53 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 800718a:	2100      	movs	r1, #0
 800718c:	2092      	movs	r0, #146	; 0x92
 800718e:	f7fb ff4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8007192:	2103      	movs	r1, #3
 8007194:	2093      	movs	r0, #147	; 0x93
 8007196:	f7fb ff4b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 800719a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800719e:	2095      	movs	r0, #149	; 0x95
 80071a0:	f7fb ff46 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 80071a4:	f240 1173 	movw	r1, #371	; 0x173
 80071a8:	2007      	movs	r0, #7
 80071aa:	f7fb ff41 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 80071ae:	2032      	movs	r0, #50	; 0x32
 80071b0:	f7f9 fc8a 	bl	8000ac8 <HAL_Delay>
 80071b4:	f001 b8f2 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 80071b8:	4b8d      	ldr	r3, [pc, #564]	; (80073f0 <LCD_Init+0x2e88>)
 80071ba:	889b      	ldrh	r3, [r3, #4]
 80071bc:	f241 5205 	movw	r2, #5381	; 0x1505
 80071c0:	4293      	cmp	r3, r2
 80071c2:	f040 8117 	bne.w	80073f4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 80071c6:	2100      	movs	r1, #0
 80071c8:	2007      	movs	r0, #7
 80071ca:	f7fb ff31 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 80071ce:	2032      	movs	r0, #50	; 0x32
 80071d0:	f7f9 fc7a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 80071d4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80071d8:	2012      	movs	r0, #18
 80071da:	f7fb ff29 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 80071de:	2101      	movs	r1, #1
 80071e0:	20a4      	movs	r0, #164	; 0xa4
 80071e2:	f7fb ff25 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80071e6:	210f      	movs	r1, #15
 80071e8:	2008      	movs	r0, #8
 80071ea:	f7fb ff21 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80071ee:	2108      	movs	r1, #8
 80071f0:	200a      	movs	r0, #10
 80071f2:	f7fb ff1d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80071f6:	2108      	movs	r1, #8
 80071f8:	200d      	movs	r0, #13
 80071fa:	f7fb ff19 	bl	8003030 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80071fe:	f240 7107 	movw	r1, #1799	; 0x707
 8007202:	2030      	movs	r0, #48	; 0x30
 8007204:	f7fb ff14 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8007208:	2107      	movs	r1, #7
 800720a:	2031      	movs	r0, #49	; 0x31
 800720c:	f7fb ff10 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8007210:	f240 6103 	movw	r1, #1539	; 0x603
 8007214:	2032      	movs	r0, #50	; 0x32
 8007216:	f7fb ff0b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800721a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800721e:	2033      	movs	r0, #51	; 0x33
 8007220:	f7fb ff06 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8007224:	f240 2102 	movw	r1, #514	; 0x202
 8007228:	2034      	movs	r0, #52	; 0x34
 800722a:	f7fb ff01 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800722e:	2102      	movs	r1, #2
 8007230:	2035      	movs	r0, #53	; 0x35
 8007232:	f7fb fefd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8007236:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800723a:	2036      	movs	r0, #54	; 0x36
 800723c:	f7fb fef8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8007240:	f240 7107 	movw	r1, #1799	; 0x707
 8007244:	2037      	movs	r0, #55	; 0x37
 8007246:	f7fb fef3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800724a:	2100      	movs	r1, #0
 800724c:	2038      	movs	r0, #56	; 0x38
 800724e:	f7fb feef 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8007252:	2100      	movs	r1, #0
 8007254:	2039      	movs	r0, #57	; 0x39
 8007256:	f7fb feeb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 800725a:	f240 7107 	movw	r1, #1799	; 0x707
 800725e:	203a      	movs	r0, #58	; 0x3a
 8007260:	f7fb fee6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8007264:	2100      	movs	r1, #0
 8007266:	203b      	movs	r0, #59	; 0x3b
 8007268:	f7fb fee2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 800726c:	2107      	movs	r1, #7
 800726e:	203c      	movs	r0, #60	; 0x3c
 8007270:	f7fb fede 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8007274:	2100      	movs	r1, #0
 8007276:	203d      	movs	r0, #61	; 0x3d
 8007278:	f7fb feda 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 800727c:	2032      	movs	r0, #50	; 0x32
 800727e:	f7f9 fc23 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8007282:	2101      	movs	r1, #1
 8007284:	2007      	movs	r0, #7
 8007286:	f7fb fed3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 800728a:	2101      	movs	r1, #1
 800728c:	2017      	movs	r0, #23
 800728e:	f7fb fecf 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(50);
 8007292:	2032      	movs	r0, #50	; 0x32
 8007294:	f7f9 fc18 	bl	8000ac8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8007298:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800729c:	2010      	movs	r0, #16
 800729e:	f7fb fec7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80072a2:	f240 2117 	movw	r1, #535	; 0x217
 80072a6:	2011      	movs	r0, #17
 80072a8:	f7fb fec2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80072ac:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80072b0:	2012      	movs	r0, #18
 80072b2:	f7fb febd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80072b6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80072ba:	2013      	movs	r0, #19
 80072bc:	f7fb feb8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 80072c0:	2100      	movs	r1, #0
 80072c2:	202a      	movs	r0, #42	; 0x2a
 80072c4:	f7fb feb4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80072c8:	210a      	movs	r1, #10
 80072ca:	2029      	movs	r0, #41	; 0x29
 80072cc:	f7fb feb0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80072d0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80072d4:	2012      	movs	r0, #18
 80072d6:	f7fb feab 	bl	8003030 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80072da:	2100      	movs	r1, #0
 80072dc:	2050      	movs	r0, #80	; 0x50
 80072de:	f7fb fea7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80072e2:	21ef      	movs	r1, #239	; 0xef
 80072e4:	2051      	movs	r0, #81	; 0x51
 80072e6:	f7fb fea3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80072ea:	2100      	movs	r1, #0
 80072ec:	2052      	movs	r0, #82	; 0x52
 80072ee:	f7fb fe9f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80072f2:	f240 113f 	movw	r1, #319	; 0x13f
 80072f6:	2053      	movs	r0, #83	; 0x53
 80072f8:	f7fb fe9a 	bl	8003030 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80072fc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007300:	2060      	movs	r0, #96	; 0x60
 8007302:	f7fb fe95 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007306:	2101      	movs	r1, #1
 8007308:	2061      	movs	r0, #97	; 0x61
 800730a:	f7fb fe91 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800730e:	2100      	movs	r1, #0
 8007310:	206a      	movs	r0, #106	; 0x6a
 8007312:	f7fb fe8d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8007316:	2100      	movs	r1, #0
 8007318:	2080      	movs	r0, #128	; 0x80
 800731a:	f7fb fe89 	bl	8003030 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 800731e:	2100      	movs	r1, #0
 8007320:	2081      	movs	r0, #129	; 0x81
 8007322:	f7fb fe85 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8007326:	2100      	movs	r1, #0
 8007328:	2082      	movs	r0, #130	; 0x82
 800732a:	f7fb fe81 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800732e:	2100      	movs	r1, #0
 8007330:	2083      	movs	r0, #131	; 0x83
 8007332:	f7fb fe7d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8007336:	2100      	movs	r1, #0
 8007338:	2084      	movs	r0, #132	; 0x84
 800733a:	f7fb fe79 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800733e:	2100      	movs	r1, #0
 8007340:	2085      	movs	r0, #133	; 0x85
 8007342:	f7fb fe75 	bl	8003030 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8007346:	2113      	movs	r1, #19
 8007348:	2090      	movs	r0, #144	; 0x90
 800734a:	f7fb fe71 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800734e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007352:	2092      	movs	r0, #146	; 0x92
 8007354:	f7fb fe6c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8007358:	2105      	movs	r1, #5
 800735a:	2093      	movs	r0, #147	; 0x93
 800735c:	f7fb fe68 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8007360:	2100      	movs	r1, #0
 8007362:	2095      	movs	r0, #149	; 0x95
 8007364:	f7fb fe64 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8007368:	2100      	movs	r1, #0
 800736a:	2097      	movs	r0, #151	; 0x97
 800736c:	f7fb fe60 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8007370:	2100      	movs	r1, #0
 8007372:	2098      	movs	r0, #152	; 0x98
 8007374:	f7fb fe5c 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8007378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800737c:	2001      	movs	r0, #1
 800737e:	f7fb fe57 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007382:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007386:	2002      	movs	r0, #2
 8007388:	f7fb fe52 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800738c:	f241 0138 	movw	r1, #4152	; 0x1038
 8007390:	2003      	movs	r0, #3
 8007392:	f7fb fe4d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8007396:	2100      	movs	r1, #0
 8007398:	2004      	movs	r0, #4
 800739a:	f7fb fe49 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800739e:	2100      	movs	r1, #0
 80073a0:	200c      	movs	r0, #12
 80073a2:	f7fb fe45 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80073a6:	2100      	movs	r1, #0
 80073a8:	200f      	movs	r0, #15
 80073aa:	f7fb fe41 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80073ae:	2100      	movs	r1, #0
 80073b0:	2020      	movs	r0, #32
 80073b2:	f7fb fe3d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80073b6:	2100      	movs	r1, #0
 80073b8:	2021      	movs	r0, #33	; 0x21
 80073ba:	f7fb fe39 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 80073be:	2121      	movs	r1, #33	; 0x21
 80073c0:	2007      	movs	r0, #7
 80073c2:	f7fb fe35 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80073c6:	2014      	movs	r0, #20
 80073c8:	f7f9 fb7e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80073cc:	2161      	movs	r1, #97	; 0x61
 80073ce:	2007      	movs	r0, #7
 80073d0:	f7fb fe2e 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80073d4:	2014      	movs	r0, #20
 80073d6:	f7f9 fb77 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80073da:	f240 1173 	movw	r1, #371	; 0x173
 80073de:	2007      	movs	r0, #7
 80073e0:	f7fb fe26 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80073e4:	2014      	movs	r0, #20
 80073e6:	f7f9 fb6f 	bl	8000ac8 <HAL_Delay>
 80073ea:	f000 bfd7 	b.w	800839c <LCD_Init+0x3e34>
 80073ee:	bf00      	nop
 80073f0:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0xB505) {
 80073f4:	4bf0      	ldr	r3, [pc, #960]	; (80077b8 <LCD_Init+0x3250>)
 80073f6:	889b      	ldrh	r3, [r3, #4]
 80073f8:	f24b 5205 	movw	r2, #46341	; 0xb505
 80073fc:	4293      	cmp	r3, r2
 80073fe:	f040 8103 	bne.w	8007608 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8007402:	2100      	movs	r1, #0
 8007404:	2000      	movs	r0, #0
 8007406:	f7fb fe13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800740a:	2100      	movs	r1, #0
 800740c:	2000      	movs	r0, #0
 800740e:	f7fb fe0f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007412:	2100      	movs	r1, #0
 8007414:	2000      	movs	r0, #0
 8007416:	f7fb fe0b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800741a:	2100      	movs	r1, #0
 800741c:	2000      	movs	r0, #0
 800741e:	f7fb fe07 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8007422:	2101      	movs	r1, #1
 8007424:	20a4      	movs	r0, #164	; 0xa4
 8007426:	f7fb fe03 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 800742a:	2014      	movs	r0, #20
 800742c:	f7f9 fb4c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007430:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007434:	2060      	movs	r0, #96	; 0x60
 8007436:	f7fb fdfb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800743a:	f240 2102 	movw	r1, #514	; 0x202
 800743e:	2008      	movs	r0, #8
 8007440:	f7fb fdf6 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8007444:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007448:	2030      	movs	r0, #48	; 0x30
 800744a:	f7fb fdf1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800744e:	f243 7115 	movw	r1, #14101	; 0x3715
 8007452:	2031      	movs	r0, #49	; 0x31
 8007454:	f7fb fdec 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8007458:	f240 6104 	movw	r1, #1540	; 0x604
 800745c:	2032      	movs	r0, #50	; 0x32
 800745e:	f7fb fde7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8007462:	f640 6116 	movw	r1, #3606	; 0xe16
 8007466:	2033      	movs	r0, #51	; 0x33
 8007468:	f7fb fde2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800746c:	f242 2111 	movw	r1, #8721	; 0x2211
 8007470:	2034      	movs	r0, #52	; 0x34
 8007472:	f7fb fddd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8007476:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800747a:	2035      	movs	r0, #53	; 0x35
 800747c:	f7fb fdd8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8007480:	f248 5107 	movw	r1, #34055	; 0x8507
 8007484:	2036      	movs	r0, #54	; 0x36
 8007486:	f7fb fdd3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800748a:	f241 4107 	movw	r1, #5127	; 0x1407
 800748e:	2037      	movs	r0, #55	; 0x37
 8007490:	f7fb fdce 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8007494:	f241 4103 	movw	r1, #5123	; 0x1403
 8007498:	2038      	movs	r0, #56	; 0x38
 800749a:	f7fb fdc9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800749e:	2120      	movs	r1, #32
 80074a0:	2039      	movs	r0, #57	; 0x39
 80074a2:	f7fb fdc5 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80074a6:	211a      	movs	r1, #26
 80074a8:	2090      	movs	r0, #144	; 0x90
 80074aa:	f7fb fdc1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80074ae:	2100      	movs	r1, #0
 80074b0:	2010      	movs	r0, #16
 80074b2:	f7fb fdbd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80074b6:	2107      	movs	r1, #7
 80074b8:	2011      	movs	r0, #17
 80074ba:	f7fb fdb9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80074be:	2100      	movs	r1, #0
 80074c0:	2012      	movs	r0, #18
 80074c2:	f7fb fdb5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80074c6:	2100      	movs	r1, #0
 80074c8:	2013      	movs	r0, #19
 80074ca:	f7fb fdb1 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80074ce:	2014      	movs	r0, #20
 80074d0:	f7f9 fafa 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80074d4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80074d8:	2010      	movs	r0, #16
 80074da:	f7fb fda9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80074de:	f240 1137 	movw	r1, #311	; 0x137
 80074e2:	2011      	movs	r0, #17
 80074e4:	f7fb fda4 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80074e8:	2014      	movs	r0, #20
 80074ea:	f7f9 faed 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80074ee:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80074f2:	2012      	movs	r0, #18
 80074f4:	f7fb fd9c 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80074f8:	2014      	movs	r0, #20
 80074fa:	f7f9 fae5 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80074fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8007502:	2013      	movs	r0, #19
 8007504:	f7fb fd94 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	202a      	movs	r0, #42	; 0x2a
 800750c:	f7fb fd90 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8007510:	2148      	movs	r1, #72	; 0x48
 8007512:	2029      	movs	r0, #41	; 0x29
 8007514:	f7fb fd8c 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 8007518:	2014      	movs	r0, #20
 800751a:	f7f9 fad5 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800751e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007522:	2001      	movs	r0, #1
 8007524:	f7fb fd84 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007528:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800752c:	2002      	movs	r0, #2
 800752e:	f7fb fd7f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007532:	f241 0138 	movw	r1, #4152	; 0x1038
 8007536:	2003      	movs	r0, #3
 8007538:	f7fb fd7a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800753c:	f240 2102 	movw	r1, #514	; 0x202
 8007540:	2008      	movs	r0, #8
 8007542:	f7fb fd75 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8007546:	2100      	movs	r1, #0
 8007548:	200a      	movs	r0, #10
 800754a:	f7fb fd71 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800754e:	2100      	movs	r1, #0
 8007550:	200c      	movs	r0, #12
 8007552:	f7fb fd6d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8007556:	2100      	movs	r1, #0
 8007558:	200d      	movs	r0, #13
 800755a:	f7fb fd69 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 800755e:	2130      	movs	r1, #48	; 0x30
 8007560:	200e      	movs	r0, #14
 8007562:	f7fb fd65 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007566:	2100      	movs	r1, #0
 8007568:	2050      	movs	r0, #80	; 0x50
 800756a:	f7fb fd61 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 800756e:	21ef      	movs	r1, #239	; 0xef
 8007570:	2051      	movs	r0, #81	; 0x51
 8007572:	f7fb fd5d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007576:	2100      	movs	r1, #0
 8007578:	2052      	movs	r0, #82	; 0x52
 800757a:	f7fb fd59 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800757e:	f240 113f 	movw	r1, #319	; 0x13f
 8007582:	2053      	movs	r0, #83	; 0x53
 8007584:	f7fb fd54 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8007588:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800758c:	2060      	movs	r0, #96	; 0x60
 800758e:	f7fb fd4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007592:	2101      	movs	r1, #1
 8007594:	2061      	movs	r0, #97	; 0x61
 8007596:	f7fb fd4b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800759a:	2100      	movs	r1, #0
 800759c:	206a      	movs	r0, #106	; 0x6a
 800759e:	f7fb fd47 	bl	8003030 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80075a2:	2111      	movs	r1, #17
 80075a4:	2090      	movs	r0, #144	; 0x90
 80075a6:	f7fb fd43 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80075aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075ae:	2092      	movs	r0, #146	; 0x92
 80075b0:	f7fb fd3e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80075b4:	f240 4102 	movw	r1, #1026	; 0x402
 80075b8:	2093      	movs	r0, #147	; 0x93
 80075ba:	f7fb fd39 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80075be:	2102      	movs	r1, #2
 80075c0:	2094      	movs	r0, #148	; 0x94
 80075c2:	f7fb fd35 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80075c6:	2014      	movs	r0, #20
 80075c8:	f7f9 fa7e 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80075cc:	2101      	movs	r1, #1
 80075ce:	2007      	movs	r0, #7
 80075d0:	f7fb fd2e 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 80075d4:	2014      	movs	r0, #20
 80075d6:	f7f9 fa77 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80075da:	2161      	movs	r1, #97	; 0x61
 80075dc:	2007      	movs	r0, #7
 80075de:	f7fb fd27 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80075e2:	f240 1173 	movw	r1, #371	; 0x173
 80075e6:	2007      	movs	r0, #7
 80075e8:	f7fb fd22 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80075ec:	2100      	movs	r1, #0
 80075ee:	2020      	movs	r0, #32
 80075f0:	f7fb fd1e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80075f4:	2100      	movs	r1, #0
 80075f6:	2021      	movs	r0, #33	; 0x21
 80075f8:	f7fb fd1a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80075fc:	2122      	movs	r1, #34	; 0x22
 80075fe:	2000      	movs	r0, #0
 8007600:	f7fb fd16 	bl	8003030 <LCD_WriteReg>
 8007604:	f000 beca 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8007608:	4b6b      	ldr	r3, [pc, #428]	; (80077b8 <LCD_Init+0x3250>)
 800760a:	889b      	ldrh	r3, [r3, #4]
 800760c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8007610:	4293      	cmp	r3, r2
 8007612:	f040 80d3 	bne.w	80077bc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8007616:	2100      	movs	r1, #0
 8007618:	2000      	movs	r0, #0
 800761a:	f7fb fd09 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800761e:	2100      	movs	r1, #0
 8007620:	2000      	movs	r0, #0
 8007622:	f7fb fd05 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 8007626:	2014      	movs	r0, #20
 8007628:	f7f9 fa4e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800762c:	2100      	movs	r1, #0
 800762e:	2000      	movs	r0, #0
 8007630:	f7fb fcfe 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007634:	2100      	movs	r1, #0
 8007636:	2000      	movs	r0, #0
 8007638:	f7fb fcfa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800763c:	2100      	movs	r1, #0
 800763e:	2000      	movs	r0, #0
 8007640:	f7fb fcf6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007644:	2100      	movs	r1, #0
 8007646:	2000      	movs	r0, #0
 8007648:	f7fb fcf2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800764c:	2101      	movs	r1, #1
 800764e:	20a4      	movs	r0, #164	; 0xa4
 8007650:	f7fb fcee 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 8007654:	2014      	movs	r0, #20
 8007656:	f7f9 fa37 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800765a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800765e:	2060      	movs	r0, #96	; 0x60
 8007660:	f7fb fce6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8007664:	f640 0106 	movw	r1, #2054	; 0x806
 8007668:	2008      	movs	r0, #8
 800766a:	f7fb fce1 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800766e:	f240 7103 	movw	r1, #1795	; 0x703
 8007672:	2030      	movs	r0, #48	; 0x30
 8007674:	f7fb fcdc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007678:	2101      	movs	r1, #1
 800767a:	2031      	movs	r0, #49	; 0x31
 800767c:	f7fb fcd8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007680:	2104      	movs	r1, #4
 8007682:	2032      	movs	r0, #50	; 0x32
 8007684:	f7fb fcd4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8007688:	f44f 7181 	mov.w	r1, #258	; 0x102
 800768c:	2033      	movs	r0, #51	; 0x33
 800768e:	f7fb fccf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8007692:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007696:	2034      	movs	r0, #52	; 0x34
 8007698:	f7fb fcca 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800769c:	f240 1103 	movw	r1, #259	; 0x103
 80076a0:	2035      	movs	r0, #53	; 0x35
 80076a2:	f7fb fcc5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80076a6:	211f      	movs	r1, #31
 80076a8:	2036      	movs	r0, #54	; 0x36
 80076aa:	f7fb fcc1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80076ae:	f240 7103 	movw	r1, #1795	; 0x703
 80076b2:	2037      	movs	r0, #55	; 0x37
 80076b4:	f7fb fcbc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80076b8:	2101      	movs	r1, #1
 80076ba:	2038      	movs	r0, #56	; 0x38
 80076bc:	f7fb fcb8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80076c0:	2104      	movs	r1, #4
 80076c2:	2039      	movs	r0, #57	; 0x39
 80076c4:	f7fb fcb4 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80076c8:	2115      	movs	r1, #21
 80076ca:	2090      	movs	r0, #144	; 0x90
 80076cc:	f7fb fcb0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80076d0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80076d4:	2010      	movs	r0, #16
 80076d6:	f7fb fcab 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80076da:	f240 2147 	movw	r1, #583	; 0x247
 80076de:	2011      	movs	r0, #17
 80076e0:	f7fb fca6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80076e4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80076e8:	2012      	movs	r0, #18
 80076ea:	f7fb fca1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80076ee:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80076f2:	2013      	movs	r0, #19
 80076f4:	f7fb fc9c 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(120);
 80076f8:	2078      	movs	r0, #120	; 0x78
 80076fa:	f7f9 f9e5 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80076fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007702:	2001      	movs	r0, #1
 8007704:	f7fb fc94 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8007708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800770c:	2002      	movs	r0, #2
 800770e:	f7fb fc8f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8007712:	f241 0130 	movw	r1, #4144	; 0x1030
 8007716:	2003      	movs	r0, #3
 8007718:	f7fb fc8a 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800771c:	2108      	movs	r1, #8
 800771e:	200a      	movs	r0, #10
 8007720:	f7fb fc86 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007724:	2100      	movs	r1, #0
 8007726:	200c      	movs	r0, #12
 8007728:	f7fb fc82 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800772c:	2120      	movs	r1, #32
 800772e:	200e      	movs	r0, #14
 8007730:	f7fb fc7e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8007734:	2100      	movs	r1, #0
 8007736:	200f      	movs	r0, #15
 8007738:	f7fb fc7a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800773c:	2100      	movs	r1, #0
 800773e:	2020      	movs	r0, #32
 8007740:	f7fb fc76 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8007744:	2100      	movs	r1, #0
 8007746:	2021      	movs	r0, #33	; 0x21
 8007748:	f7fb fc72 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800774c:	213d      	movs	r1, #61	; 0x3d
 800774e:	202a      	movs	r0, #42	; 0x2a
 8007750:	f7fb fc6e 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(20);
 8007754:	2014      	movs	r0, #20
 8007756:	f7f9 f9b7 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800775a:	212d      	movs	r1, #45	; 0x2d
 800775c:	2029      	movs	r0, #41	; 0x29
 800775e:	f7fb fc67 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007762:	2100      	movs	r1, #0
 8007764:	2050      	movs	r0, #80	; 0x50
 8007766:	f7fb fc63 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800776a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800776e:	2051      	movs	r0, #81	; 0x51
 8007770:	f7fb fc5e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007774:	2100      	movs	r1, #0
 8007776:	2052      	movs	r0, #82	; 0x52
 8007778:	f7fb fc5a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800777c:	f240 113f 	movw	r1, #319	; 0x13f
 8007780:	2053      	movs	r0, #83	; 0x53
 8007782:	f7fb fc55 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8007786:	2100      	movs	r1, #0
 8007788:	2061      	movs	r0, #97	; 0x61
 800778a:	f7fb fc51 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800778e:	2100      	movs	r1, #0
 8007790:	206a      	movs	r0, #106	; 0x6a
 8007792:	f7fb fc4d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007796:	f44f 7140 	mov.w	r1, #768	; 0x300
 800779a:	2092      	movs	r0, #146	; 0x92
 800779c:	f7fb fc48 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80077a0:	2105      	movs	r1, #5
 80077a2:	2093      	movs	r0, #147	; 0x93
 80077a4:	f7fb fc44 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80077a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077ac:	2007      	movs	r0, #7
 80077ae:	f7fb fc3f 	bl	8003030 <LCD_WriteReg>
 80077b2:	f000 bdf3 	b.w	800839c <LCD_Init+0x3e34>
 80077b6:	bf00      	nop
 80077b8:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80077bc:	4bc2      	ldr	r3, [pc, #776]	; (8007ac8 <LCD_Init+0x3560>)
 80077be:	889b      	ldrh	r3, [r3, #4]
 80077c0:	f648 1289 	movw	r2, #35209	; 0x8989
 80077c4:	4293      	cmp	r3, r2
 80077c6:	f040 80bc 	bne.w	8007942 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80077ca:	2101      	movs	r1, #1
 80077cc:	2000      	movs	r0, #0
 80077ce:	f7fb fc2f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80077d2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80077d6:	2003      	movs	r0, #3
 80077d8:	f7fb fc2a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80077dc:	2100      	movs	r1, #0
 80077de:	200c      	movs	r0, #12
 80077e0:	f7fb fc26 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80077e4:	f640 010c 	movw	r1, #2060	; 0x80c
 80077e8:	200d      	movs	r0, #13
 80077ea:	f7fb fc21 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80077ee:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80077f2:	200e      	movs	r0, #14
 80077f4:	f7fb fc1c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80077f8:	21b0      	movs	r1, #176	; 0xb0
 80077fa:	201e      	movs	r0, #30
 80077fc:	f7fb fc18 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8007800:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8007804:	2001      	movs	r0, #1
 8007806:	f7fb fc13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800780a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800780e:	2002      	movs	r0, #2
 8007810:	f7fb fc0e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007814:	2100      	movs	r1, #0
 8007816:	2010      	movs	r0, #16
 8007818:	f7fb fc0a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800781c:	f246 0178 	movw	r1, #24696	; 0x6078
 8007820:	2011      	movs	r0, #17
 8007822:	f7fb fc05 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8007826:	2100      	movs	r1, #0
 8007828:	2005      	movs	r0, #5
 800782a:	f7fb fc01 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800782e:	2100      	movs	r1, #0
 8007830:	2006      	movs	r0, #6
 8007832:	f7fb fbfd 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8007836:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800783a:	2016      	movs	r0, #22
 800783c:	f7fb fbf8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007840:	2103      	movs	r1, #3
 8007842:	2017      	movs	r0, #23
 8007844:	f7fb fbf4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007848:	f240 2133 	movw	r1, #563	; 0x233
 800784c:	2007      	movs	r0, #7
 800784e:	f7fb fbef 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8007852:	2100      	movs	r1, #0
 8007854:	200b      	movs	r0, #11
 8007856:	f7fb fbeb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800785a:	2100      	movs	r1, #0
 800785c:	200f      	movs	r0, #15
 800785e:	f7fb fbe7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8007862:	2100      	movs	r1, #0
 8007864:	2041      	movs	r0, #65	; 0x41
 8007866:	f7fb fbe3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800786a:	2100      	movs	r1, #0
 800786c:	2042      	movs	r0, #66	; 0x42
 800786e:	f7fb fbdf 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8007872:	2100      	movs	r1, #0
 8007874:	2048      	movs	r0, #72	; 0x48
 8007876:	f7fb fbdb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800787a:	f240 113f 	movw	r1, #319	; 0x13f
 800787e:	2049      	movs	r0, #73	; 0x49
 8007880:	f7fb fbd6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8007884:	2100      	movs	r1, #0
 8007886:	204a      	movs	r0, #74	; 0x4a
 8007888:	f7fb fbd2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800788c:	2100      	movs	r1, #0
 800788e:	204b      	movs	r0, #75	; 0x4b
 8007890:	f7fb fbce 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8007894:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007898:	2044      	movs	r0, #68	; 0x44
 800789a:	f7fb fbc9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800789e:	2100      	movs	r1, #0
 80078a0:	2045      	movs	r0, #69	; 0x45
 80078a2:	f7fb fbc5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80078a6:	f240 113f 	movw	r1, #319	; 0x13f
 80078aa:	2046      	movs	r0, #70	; 0x46
 80078ac:	f7fb fbc0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80078b0:	f240 7107 	movw	r1, #1799	; 0x707
 80078b4:	2030      	movs	r0, #48	; 0x30
 80078b6:	f7fb fbbb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80078ba:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078be:	2031      	movs	r0, #49	; 0x31
 80078c0:	f7fb fbb6 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80078c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078c8:	2032      	movs	r0, #50	; 0x32
 80078ca:	f7fb fbb1 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80078ce:	f240 5102 	movw	r1, #1282	; 0x502
 80078d2:	2033      	movs	r0, #51	; 0x33
 80078d4:	f7fb fbac 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80078d8:	f240 5107 	movw	r1, #1287	; 0x507
 80078dc:	2034      	movs	r0, #52	; 0x34
 80078de:	f7fb fba7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80078e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078e6:	2035      	movs	r0, #53	; 0x35
 80078e8:	f7fb fba2 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80078ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078f0:	2036      	movs	r0, #54	; 0x36
 80078f2:	f7fb fb9d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80078f6:	f240 5102 	movw	r1, #1282	; 0x502
 80078fa:	2037      	movs	r0, #55	; 0x37
 80078fc:	f7fb fb98 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007900:	f240 3102 	movw	r1, #770	; 0x302
 8007904:	203a      	movs	r0, #58	; 0x3a
 8007906:	f7fb fb93 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800790a:	f240 3102 	movw	r1, #770	; 0x302
 800790e:	203b      	movs	r0, #59	; 0x3b
 8007910:	f7fb fb8e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8007914:	2100      	movs	r1, #0
 8007916:	2023      	movs	r0, #35	; 0x23
 8007918:	f7fb fb8a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800791c:	2100      	movs	r1, #0
 800791e:	2024      	movs	r0, #36	; 0x24
 8007920:	f7fb fb86 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007928:	2025      	movs	r0, #37	; 0x25
 800792a:	f7fb fb81 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800792e:	2100      	movs	r1, #0
 8007930:	204f      	movs	r0, #79	; 0x4f
 8007932:	f7fb fb7d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007936:	2100      	movs	r1, #0
 8007938:	204e      	movs	r0, #78	; 0x4e
 800793a:	f7fb fb79 	bl	8003030 <LCD_WriteReg>
 800793e:	f000 bd2d 	b.w	800839c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8007942:	4b61      	ldr	r3, [pc, #388]	; (8007ac8 <LCD_Init+0x3560>)
 8007944:	889b      	ldrh	r3, [r3, #4]
 8007946:	f244 5231 	movw	r2, #17713	; 0x4531
 800794a:	4293      	cmp	r3, r2
 800794c:	f040 80be 	bne.w	8007acc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007950:	2101      	movs	r1, #1
 8007952:	2000      	movs	r0, #0
 8007954:	f7fb fb6c 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(10);
 8007958:	200a      	movs	r0, #10
 800795a:	f7f9 f8b5 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800795e:	f241 6128 	movw	r1, #5672	; 0x1628
 8007962:	2010      	movs	r0, #16
 8007964:	f7fb fb64 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007968:	210e      	movs	r1, #14
 800796a:	2012      	movs	r0, #18
 800796c:	f7fb fb60 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007970:	f640 2139 	movw	r1, #2617	; 0xa39
 8007974:	2013      	movs	r0, #19
 8007976:	f7fb fb5b 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(10);
 800797a:	200a      	movs	r0, #10
 800797c:	f7f9 f8a4 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007980:	2140      	movs	r1, #64	; 0x40
 8007982:	2011      	movs	r0, #17
 8007984:	f7fb fb54 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007988:	2150      	movs	r1, #80	; 0x50
 800798a:	2015      	movs	r0, #21
 800798c:	f7fb fb50 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(10);
 8007990:	200a      	movs	r0, #10
 8007992:	f7f9 f899 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007996:	211e      	movs	r1, #30
 8007998:	2012      	movs	r0, #18
 800799a:	f7fb fb49 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(10);
 800799e:	200a      	movs	r0, #10
 80079a0:	f7f9 f892 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80079a4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80079a8:	2010      	movs	r0, #16
 80079aa:	f7fb fb41 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80079ae:	f642 2139 	movw	r1, #10809	; 0x2a39
 80079b2:	2013      	movs	r0, #19
 80079b4:	f7fb fb3c 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(10);
 80079b8:	200a      	movs	r0, #10
 80079ba:	f7f9 f885 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80079be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079c2:	2001      	movs	r0, #1
 80079c4:	f7fb fb34 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80079c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80079cc:	2002      	movs	r0, #2
 80079ce:	f7fb fb2f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80079d2:	f241 0138 	movw	r1, #4152	; 0x1038
 80079d6:	2003      	movs	r0, #3
 80079d8:	f7fb fb2a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80079dc:	f240 2102 	movw	r1, #514	; 0x202
 80079e0:	2008      	movs	r0, #8
 80079e2:	f7fb fb25 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80079e6:	2108      	movs	r1, #8
 80079e8:	200a      	movs	r0, #10
 80079ea:	f7fb fb21 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80079ee:	2100      	movs	r1, #0
 80079f0:	2030      	movs	r0, #48	; 0x30
 80079f2:	f7fb fb1d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80079f6:	f240 4102 	movw	r1, #1026	; 0x402
 80079fa:	2031      	movs	r0, #49	; 0x31
 80079fc:	f7fb fb18 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007a00:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007a04:	2032      	movs	r0, #50	; 0x32
 8007a06:	f7fb fb13 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8007a0a:	f240 5103 	movw	r1, #1283	; 0x503
 8007a0e:	2033      	movs	r0, #51	; 0x33
 8007a10:	f7fb fb0e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007a14:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007a18:	2034      	movs	r0, #52	; 0x34
 8007a1a:	f7fb fb09 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8007a1e:	f240 3101 	movw	r1, #769	; 0x301
 8007a22:	2035      	movs	r0, #53	; 0x35
 8007a24:	f7fb fb04 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007a28:	f240 7107 	movw	r1, #1799	; 0x707
 8007a2c:	2036      	movs	r0, #54	; 0x36
 8007a2e:	f7fb faff 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007a32:	f240 3105 	movw	r1, #773	; 0x305
 8007a36:	2037      	movs	r0, #55	; 0x37
 8007a38:	f7fb fafa 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8007a3c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007a40:	2038      	movs	r0, #56	; 0x38
 8007a42:	f7fb faf5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8007a46:	f640 710b 	movw	r1, #3851	; 0xf0b
 8007a4a:	2039      	movs	r0, #57	; 0x39
 8007a4c:	f7fb faf0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007a50:	2102      	movs	r1, #2
 8007a52:	2041      	movs	r0, #65	; 0x41
 8007a54:	f7fb faec 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007a58:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007a5c:	2060      	movs	r0, #96	; 0x60
 8007a5e:	f7fb fae7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007a62:	2101      	movs	r1, #1
 8007a64:	2061      	movs	r0, #97	; 0x61
 8007a66:	f7fb fae3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8007a6a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007a6e:	2090      	movs	r0, #144	; 0x90
 8007a70:	f7fb fade 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8007a74:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007a78:	2092      	movs	r0, #146	; 0x92
 8007a7a:	f7fb fad9 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8007a7e:	2104      	movs	r1, #4
 8007a80:	2093      	movs	r0, #147	; 0x93
 8007a82:	f7fb fad5 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8007a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a8a:	20a0      	movs	r0, #160	; 0xa0
 8007a8c:	f7fb fad0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007a90:	2101      	movs	r1, #1
 8007a92:	2007      	movs	r0, #7
 8007a94:	f7fb facc 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007a98:	2121      	movs	r1, #33	; 0x21
 8007a9a:	2007      	movs	r0, #7
 8007a9c:	f7fb fac8 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007aa0:	2123      	movs	r1, #35	; 0x23
 8007aa2:	2007      	movs	r0, #7
 8007aa4:	f7fb fac4 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007aa8:	2133      	movs	r1, #51	; 0x33
 8007aaa:	2007      	movs	r0, #7
 8007aac:	f7fb fac0 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007ab0:	f240 1133 	movw	r1, #307	; 0x133
 8007ab4:	2007      	movs	r0, #7
 8007ab6:	f7fb fabb 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8007aba:	2100      	movs	r1, #0
 8007abc:	20a0      	movs	r0, #160	; 0xa0
 8007abe:	f7fb fab7 	bl	8003030 <LCD_WriteReg>
 8007ac2:	f000 bc6b 	b.w	800839c <LCD_Init+0x3e34>
 8007ac6:	bf00      	nop
 8007ac8:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0x4535) {
 8007acc:	4b5b      	ldr	r3, [pc, #364]	; (8007c3c <LCD_Init+0x36d4>)
 8007ace:	889b      	ldrh	r3, [r3, #4]
 8007ad0:	f244 5235 	movw	r2, #17717	; 0x4535
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	f040 80b3 	bne.w	8007c40 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8007ada:	2130      	movs	r1, #48	; 0x30
 8007adc:	2015      	movs	r0, #21
 8007ade:	f7fb faa7 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8007ae2:	2110      	movs	r1, #16
 8007ae4:	209a      	movs	r0, #154	; 0x9a
 8007ae6:	f7fb faa3 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8007aea:	2120      	movs	r1, #32
 8007aec:	2011      	movs	r0, #17
 8007aee:	f7fb fa9f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8007af2:	f243 4128 	movw	r1, #13352	; 0x3428
 8007af6:	2010      	movs	r0, #16
 8007af8:	f7fb fa9a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8007afc:	2102      	movs	r1, #2
 8007afe:	2012      	movs	r0, #18
 8007b00:	f7fb fa96 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8007b04:	f241 0138 	movw	r1, #4152	; 0x1038
 8007b08:	2013      	movs	r0, #19
 8007b0a:	f7fb fa91 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(40);
 8007b0e:	2028      	movs	r0, #40	; 0x28
 8007b10:	f7f8 ffda 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8007b14:	2112      	movs	r1, #18
 8007b16:	2012      	movs	r0, #18
 8007b18:	f7fb fa8a 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(40);
 8007b1c:	2028      	movs	r0, #40	; 0x28
 8007b1e:	f7f8 ffd3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8007b22:	f243 4120 	movw	r1, #13344	; 0x3420
 8007b26:	2010      	movs	r0, #16
 8007b28:	f7fb fa82 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8007b2c:	f243 0138 	movw	r1, #12344	; 0x3038
 8007b30:	2013      	movs	r0, #19
 8007b32:	f7fb fa7d 	bl	8003030 <LCD_WriteReg>
		HAL_Delay(70);
 8007b36:	2046      	movs	r0, #70	; 0x46
 8007b38:	f7f8 ffc6 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	2030      	movs	r0, #48	; 0x30
 8007b40:	f7fb fa76 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007b44:	f240 4102 	movw	r1, #1026	; 0x402
 8007b48:	2031      	movs	r0, #49	; 0x31
 8007b4a:	f7fb fa71 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8007b4e:	f240 3107 	movw	r1, #775	; 0x307
 8007b52:	2032      	movs	r0, #50	; 0x32
 8007b54:	f7fb fa6c 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007b58:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007b5c:	2033      	movs	r0, #51	; 0x33
 8007b5e:	f7fb fa67 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8007b62:	2104      	movs	r1, #4
 8007b64:	2034      	movs	r0, #52	; 0x34
 8007b66:	f7fb fa63 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8007b6a:	f240 4101 	movw	r1, #1025	; 0x401
 8007b6e:	2035      	movs	r0, #53	; 0x35
 8007b70:	f7fb fa5e 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007b74:	f240 7107 	movw	r1, #1799	; 0x707
 8007b78:	2036      	movs	r0, #54	; 0x36
 8007b7a:	f7fb fa59 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007b7e:	f240 3105 	movw	r1, #773	; 0x305
 8007b82:	2037      	movs	r0, #55	; 0x37
 8007b84:	f7fb fa54 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8007b88:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007b8c:	2038      	movs	r0, #56	; 0x38
 8007b8e:	f7fb fa4f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8007b92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007b96:	2039      	movs	r0, #57	; 0x39
 8007b98:	f7fb fa4a 	bl	8003030 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8007b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	f7fb fa45 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007ba6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007baa:	2002      	movs	r0, #2
 8007bac:	f7fb fa40 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8007bb0:	f241 0130 	movw	r1, #4144	; 0x1030
 8007bb4:	2003      	movs	r0, #3
 8007bb6:	f7fb fa3b 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8007bba:	f640 0108 	movw	r1, #2056	; 0x808
 8007bbe:	2008      	movs	r0, #8
 8007bc0:	f7fb fa36 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007bc4:	2108      	movs	r1, #8
 8007bc6:	200a      	movs	r0, #10
 8007bc8:	f7fb fa32 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007bcc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007bd0:	2060      	movs	r0, #96	; 0x60
 8007bd2:	f7fb fa2d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	2061      	movs	r0, #97	; 0x61
 8007bda:	f7fb fa29 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8007bde:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007be2:	2090      	movs	r0, #144	; 0x90
 8007be4:	f7fb fa24 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bec:	2092      	movs	r0, #146	; 0x92
 8007bee:	f7fb fa1f 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8007bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bf6:	2093      	movs	r0, #147	; 0x93
 8007bf8:	f7fb fa1a 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8007bfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007c00:	20a0      	movs	r0, #160	; 0xa0
 8007c02:	f7fb fa15 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8007c06:	2110      	movs	r1, #16
 8007c08:	20a3      	movs	r0, #163	; 0xa3
 8007c0a:	f7fb fa11 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007c0e:	2101      	movs	r1, #1
 8007c10:	2007      	movs	r0, #7
 8007c12:	f7fb fa0d 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007c16:	2121      	movs	r1, #33	; 0x21
 8007c18:	2007      	movs	r0, #7
 8007c1a:	f7fb fa09 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007c1e:	2123      	movs	r1, #35	; 0x23
 8007c20:	2007      	movs	r0, #7
 8007c22:	f7fb fa05 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007c26:	2133      	movs	r1, #51	; 0x33
 8007c28:	2007      	movs	r0, #7
 8007c2a:	f7fb fa01 	bl	8003030 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007c2e:	f240 1133 	movw	r1, #307	; 0x133
 8007c32:	2007      	movs	r0, #7
 8007c34:	f7fb f9fc 	bl	8003030 <LCD_WriteReg>
 8007c38:	e3b0      	b.n	800839c <LCD_Init+0x3e34>
 8007c3a:	bf00      	nop
 8007c3c:	20000494 	.word	0x20000494
	} else if (lcddev.id == 0X1963) {
 8007c40:	4ba8      	ldr	r3, [pc, #672]	; (8007ee4 <LCD_Init+0x397c>)
 8007c42:	889b      	ldrh	r3, [r3, #4]
 8007c44:	f641 1263 	movw	r2, #6499	; 0x1963
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	f040 83a7 	bne.w	800839c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8007c4e:	20e2      	movs	r0, #226	; 0xe2
 8007c50:	f7fb f962 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8007c54:	4ba4      	ldr	r3, [pc, #656]	; (8007ee8 <LCD_Init+0x3980>)
 8007c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c5a:	611a      	str	r2, [r3, #16]
 8007c5c:	4ba2      	ldr	r3, [pc, #648]	; (8007ee8 <LCD_Init+0x3980>)
 8007c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c62:	615a      	str	r2, [r3, #20]
 8007c64:	4ba1      	ldr	r3, [pc, #644]	; (8007eec <LCD_Init+0x3984>)
 8007c66:	221d      	movs	r2, #29
 8007c68:	60da      	str	r2, [r3, #12]
 8007c6a:	4b9f      	ldr	r3, [pc, #636]	; (8007ee8 <LCD_Init+0x3980>)
 8007c6c:	2280      	movs	r2, #128	; 0x80
 8007c6e:	615a      	str	r2, [r3, #20]
 8007c70:	4b9d      	ldr	r3, [pc, #628]	; (8007ee8 <LCD_Init+0x3980>)
 8007c72:	2280      	movs	r2, #128	; 0x80
 8007c74:	611a      	str	r2, [r3, #16]
 8007c76:	4b9c      	ldr	r3, [pc, #624]	; (8007ee8 <LCD_Init+0x3980>)
 8007c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8007c7e:	4b9a      	ldr	r3, [pc, #616]	; (8007ee8 <LCD_Init+0x3980>)
 8007c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c84:	611a      	str	r2, [r3, #16]
 8007c86:	4b98      	ldr	r3, [pc, #608]	; (8007ee8 <LCD_Init+0x3980>)
 8007c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8c:	615a      	str	r2, [r3, #20]
 8007c8e:	4b97      	ldr	r3, [pc, #604]	; (8007eec <LCD_Init+0x3984>)
 8007c90:	2202      	movs	r2, #2
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	4b94      	ldr	r3, [pc, #592]	; (8007ee8 <LCD_Init+0x3980>)
 8007c96:	2280      	movs	r2, #128	; 0x80
 8007c98:	615a      	str	r2, [r3, #20]
 8007c9a:	4b93      	ldr	r3, [pc, #588]	; (8007ee8 <LCD_Init+0x3980>)
 8007c9c:	2280      	movs	r2, #128	; 0x80
 8007c9e:	611a      	str	r2, [r3, #16]
 8007ca0:	4b91      	ldr	r3, [pc, #580]	; (8007ee8 <LCD_Init+0x3980>)
 8007ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8007ca8:	4b8f      	ldr	r3, [pc, #572]	; (8007ee8 <LCD_Init+0x3980>)
 8007caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cae:	611a      	str	r2, [r3, #16]
 8007cb0:	4b8d      	ldr	r3, [pc, #564]	; (8007ee8 <LCD_Init+0x3980>)
 8007cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb6:	615a      	str	r2, [r3, #20]
 8007cb8:	4b8c      	ldr	r3, [pc, #560]	; (8007eec <LCD_Init+0x3984>)
 8007cba:	2204      	movs	r2, #4
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	4b8a      	ldr	r3, [pc, #552]	; (8007ee8 <LCD_Init+0x3980>)
 8007cc0:	2280      	movs	r2, #128	; 0x80
 8007cc2:	615a      	str	r2, [r3, #20]
 8007cc4:	4b88      	ldr	r3, [pc, #544]	; (8007ee8 <LCD_Init+0x3980>)
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	611a      	str	r2, [r3, #16]
 8007cca:	4b87      	ldr	r3, [pc, #540]	; (8007ee8 <LCD_Init+0x3980>)
 8007ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f7f8 fef8 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007cd8:	20e0      	movs	r0, #224	; 0xe0
 8007cda:	f7fb f91d 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8007cde:	4b82      	ldr	r3, [pc, #520]	; (8007ee8 <LCD_Init+0x3980>)
 8007ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ce4:	611a      	str	r2, [r3, #16]
 8007ce6:	4b80      	ldr	r3, [pc, #512]	; (8007ee8 <LCD_Init+0x3980>)
 8007ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cec:	615a      	str	r2, [r3, #20]
 8007cee:	4b7f      	ldr	r3, [pc, #508]	; (8007eec <LCD_Init+0x3984>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	4b7c      	ldr	r3, [pc, #496]	; (8007ee8 <LCD_Init+0x3980>)
 8007cf6:	2280      	movs	r2, #128	; 0x80
 8007cf8:	615a      	str	r2, [r3, #20]
 8007cfa:	4b7b      	ldr	r3, [pc, #492]	; (8007ee8 <LCD_Init+0x3980>)
 8007cfc:	2280      	movs	r2, #128	; 0x80
 8007cfe:	611a      	str	r2, [r3, #16]
 8007d00:	4b79      	ldr	r3, [pc, #484]	; (8007ee8 <LCD_Init+0x3980>)
 8007d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d06:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007d08:	200a      	movs	r0, #10
 8007d0a:	f7f8 fedd 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8007d0e:	20e0      	movs	r0, #224	; 0xe0
 8007d10:	f7fb f902 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8007d14:	4b74      	ldr	r3, [pc, #464]	; (8007ee8 <LCD_Init+0x3980>)
 8007d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1a:	611a      	str	r2, [r3, #16]
 8007d1c:	4b72      	ldr	r3, [pc, #456]	; (8007ee8 <LCD_Init+0x3980>)
 8007d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d22:	615a      	str	r2, [r3, #20]
 8007d24:	4b71      	ldr	r3, [pc, #452]	; (8007eec <LCD_Init+0x3984>)
 8007d26:	2203      	movs	r2, #3
 8007d28:	60da      	str	r2, [r3, #12]
 8007d2a:	4b6f      	ldr	r3, [pc, #444]	; (8007ee8 <LCD_Init+0x3980>)
 8007d2c:	2280      	movs	r2, #128	; 0x80
 8007d2e:	615a      	str	r2, [r3, #20]
 8007d30:	4b6d      	ldr	r3, [pc, #436]	; (8007ee8 <LCD_Init+0x3980>)
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	611a      	str	r2, [r3, #16]
 8007d36:	4b6c      	ldr	r3, [pc, #432]	; (8007ee8 <LCD_Init+0x3980>)
 8007d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d3c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8007d3e:	200c      	movs	r0, #12
 8007d40:	f7f8 fec2 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8007d44:	2001      	movs	r0, #1
 8007d46:	f7fb f8e7 	bl	8002f18 <LCD_WR_REG>
		HAL_Delay(10);
 8007d4a:	200a      	movs	r0, #10
 8007d4c:	f7f8 febc 	bl	8000ac8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007d50:	20e6      	movs	r0, #230	; 0xe6
 8007d52:	f7fb f8e1 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8007d56:	4b64      	ldr	r3, [pc, #400]	; (8007ee8 <LCD_Init+0x3980>)
 8007d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d5c:	611a      	str	r2, [r3, #16]
 8007d5e:	4b62      	ldr	r3, [pc, #392]	; (8007ee8 <LCD_Init+0x3980>)
 8007d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d64:	615a      	str	r2, [r3, #20]
 8007d66:	4b61      	ldr	r3, [pc, #388]	; (8007eec <LCD_Init+0x3984>)
 8007d68:	222f      	movs	r2, #47	; 0x2f
 8007d6a:	60da      	str	r2, [r3, #12]
 8007d6c:	4b5e      	ldr	r3, [pc, #376]	; (8007ee8 <LCD_Init+0x3980>)
 8007d6e:	2280      	movs	r2, #128	; 0x80
 8007d70:	615a      	str	r2, [r3, #20]
 8007d72:	4b5d      	ldr	r3, [pc, #372]	; (8007ee8 <LCD_Init+0x3980>)
 8007d74:	2280      	movs	r2, #128	; 0x80
 8007d76:	611a      	str	r2, [r3, #16]
 8007d78:	4b5b      	ldr	r3, [pc, #364]	; (8007ee8 <LCD_Init+0x3980>)
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007d80:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <LCD_Init+0x3980>)
 8007d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d86:	611a      	str	r2, [r3, #16]
 8007d88:	4b57      	ldr	r3, [pc, #348]	; (8007ee8 <LCD_Init+0x3980>)
 8007d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8e:	615a      	str	r2, [r3, #20]
 8007d90:	4b56      	ldr	r3, [pc, #344]	; (8007eec <LCD_Init+0x3984>)
 8007d92:	22ff      	movs	r2, #255	; 0xff
 8007d94:	60da      	str	r2, [r3, #12]
 8007d96:	4b54      	ldr	r3, [pc, #336]	; (8007ee8 <LCD_Init+0x3980>)
 8007d98:	2280      	movs	r2, #128	; 0x80
 8007d9a:	615a      	str	r2, [r3, #20]
 8007d9c:	4b52      	ldr	r3, [pc, #328]	; (8007ee8 <LCD_Init+0x3980>)
 8007d9e:	2280      	movs	r2, #128	; 0x80
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	4b51      	ldr	r3, [pc, #324]	; (8007ee8 <LCD_Init+0x3980>)
 8007da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007daa:	4b4f      	ldr	r3, [pc, #316]	; (8007ee8 <LCD_Init+0x3980>)
 8007dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007db0:	611a      	str	r2, [r3, #16]
 8007db2:	4b4d      	ldr	r3, [pc, #308]	; (8007ee8 <LCD_Init+0x3980>)
 8007db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db8:	615a      	str	r2, [r3, #20]
 8007dba:	4b4c      	ldr	r3, [pc, #304]	; (8007eec <LCD_Init+0x3984>)
 8007dbc:	22ff      	movs	r2, #255	; 0xff
 8007dbe:	60da      	str	r2, [r3, #12]
 8007dc0:	4b49      	ldr	r3, [pc, #292]	; (8007ee8 <LCD_Init+0x3980>)
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	615a      	str	r2, [r3, #20]
 8007dc6:	4b48      	ldr	r3, [pc, #288]	; (8007ee8 <LCD_Init+0x3980>)
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	4b46      	ldr	r3, [pc, #280]	; (8007ee8 <LCD_Init+0x3980>)
 8007dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007dd4:	20b0      	movs	r0, #176	; 0xb0
 8007dd6:	f7fb f89f 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8007dda:	4b43      	ldr	r3, [pc, #268]	; (8007ee8 <LCD_Init+0x3980>)
 8007ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007de0:	611a      	str	r2, [r3, #16]
 8007de2:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <LCD_Init+0x3980>)
 8007de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de8:	615a      	str	r2, [r3, #20]
 8007dea:	4b40      	ldr	r3, [pc, #256]	; (8007eec <LCD_Init+0x3984>)
 8007dec:	2220      	movs	r2, #32
 8007dee:	60da      	str	r2, [r3, #12]
 8007df0:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <LCD_Init+0x3980>)
 8007df2:	2280      	movs	r2, #128	; 0x80
 8007df4:	615a      	str	r2, [r3, #20]
 8007df6:	4b3c      	ldr	r3, [pc, #240]	; (8007ee8 <LCD_Init+0x3980>)
 8007df8:	2280      	movs	r2, #128	; 0x80
 8007dfa:	611a      	str	r2, [r3, #16]
 8007dfc:	4b3a      	ldr	r3, [pc, #232]	; (8007ee8 <LCD_Init+0x3980>)
 8007dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8007e04:	4b38      	ldr	r3, [pc, #224]	; (8007ee8 <LCD_Init+0x3980>)
 8007e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e0a:	611a      	str	r2, [r3, #16]
 8007e0c:	4b36      	ldr	r3, [pc, #216]	; (8007ee8 <LCD_Init+0x3980>)
 8007e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e12:	615a      	str	r2, [r3, #20]
 8007e14:	4b35      	ldr	r3, [pc, #212]	; (8007eec <LCD_Init+0x3984>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	4b33      	ldr	r3, [pc, #204]	; (8007ee8 <LCD_Init+0x3980>)
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	615a      	str	r2, [r3, #20]
 8007e20:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <LCD_Init+0x3980>)
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	611a      	str	r2, [r3, #16]
 8007e26:	4b30      	ldr	r3, [pc, #192]	; (8007ee8 <LCD_Init+0x3980>)
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <LCD_Init+0x3980>)
 8007e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e34:	611a      	str	r2, [r3, #16]
 8007e36:	4b2c      	ldr	r3, [pc, #176]	; (8007ee8 <LCD_Init+0x3980>)
 8007e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3c:	615a      	str	r2, [r3, #20]
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <LCD_Init+0x3984>)
 8007e40:	2203      	movs	r2, #3
 8007e42:	60da      	str	r2, [r3, #12]
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <LCD_Init+0x3980>)
 8007e46:	2280      	movs	r2, #128	; 0x80
 8007e48:	615a      	str	r2, [r3, #20]
 8007e4a:	4b27      	ldr	r3, [pc, #156]	; (8007ee8 <LCD_Init+0x3980>)
 8007e4c:	2280      	movs	r2, #128	; 0x80
 8007e4e:	611a      	str	r2, [r3, #16]
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <LCD_Init+0x3980>)
 8007e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007e58:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <LCD_Init+0x3980>)
 8007e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e5e:	611a      	str	r2, [r3, #16]
 8007e60:	4b21      	ldr	r3, [pc, #132]	; (8007ee8 <LCD_Init+0x3980>)
 8007e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e66:	615a      	str	r2, [r3, #20]
 8007e68:	4b20      	ldr	r3, [pc, #128]	; (8007eec <LCD_Init+0x3984>)
 8007e6a:	f240 321f 	movw	r2, #799	; 0x31f
 8007e6e:	60da      	str	r2, [r3, #12]
 8007e70:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <LCD_Init+0x3980>)
 8007e72:	2280      	movs	r2, #128	; 0x80
 8007e74:	615a      	str	r2, [r3, #20]
 8007e76:	4b1c      	ldr	r3, [pc, #112]	; (8007ee8 <LCD_Init+0x3980>)
 8007e78:	2280      	movs	r2, #128	; 0x80
 8007e7a:	611a      	str	r2, [r3, #16]
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <LCD_Init+0x3980>)
 8007e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <LCD_Init+0x3980>)
 8007e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e8a:	611a      	str	r2, [r3, #16]
 8007e8c:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <LCD_Init+0x3980>)
 8007e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e92:	615a      	str	r2, [r3, #20]
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <LCD_Init+0x3984>)
 8007e96:	2201      	movs	r2, #1
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <LCD_Init+0x3980>)
 8007e9c:	2280      	movs	r2, #128	; 0x80
 8007e9e:	615a      	str	r2, [r3, #20]
 8007ea0:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <LCD_Init+0x3980>)
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	611a      	str	r2, [r3, #16]
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <LCD_Init+0x3980>)
 8007ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <LCD_Init+0x3980>)
 8007eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <LCD_Init+0x3980>)
 8007eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ebc:	615a      	str	r2, [r3, #20]
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <LCD_Init+0x3984>)
 8007ec0:	f240 12df 	movw	r2, #479	; 0x1df
 8007ec4:	60da      	str	r2, [r3, #12]
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <LCD_Init+0x3980>)
 8007ec8:	2280      	movs	r2, #128	; 0x80
 8007eca:	615a      	str	r2, [r3, #20]
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <LCD_Init+0x3980>)
 8007ece:	2280      	movs	r2, #128	; 0x80
 8007ed0:	611a      	str	r2, [r3, #16]
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <LCD_Init+0x3980>)
 8007ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8007eda:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <LCD_Init+0x3980>)
 8007edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ee0:	e006      	b.n	8007ef0 <LCD_Init+0x3988>
 8007ee2:	bf00      	nop
 8007ee4:	20000494 	.word	0x20000494
 8007ee8:	40011000 	.word	0x40011000
 8007eec:	40010c00 	.word	0x40010c00
 8007ef0:	611a      	str	r2, [r3, #16]
 8007ef2:	4ba3      	ldr	r3, [pc, #652]	; (8008180 <LCD_Init+0x3c18>)
 8007ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef8:	615a      	str	r2, [r3, #20]
 8007efa:	4ba2      	ldr	r3, [pc, #648]	; (8008184 <LCD_Init+0x3c1c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	4b9f      	ldr	r3, [pc, #636]	; (8008180 <LCD_Init+0x3c18>)
 8007f02:	2280      	movs	r2, #128	; 0x80
 8007f04:	615a      	str	r2, [r3, #20]
 8007f06:	4b9e      	ldr	r3, [pc, #632]	; (8008180 <LCD_Init+0x3c18>)
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	4b9c      	ldr	r3, [pc, #624]	; (8008180 <LCD_Init+0x3c18>)
 8007f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f12:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8007f14:	20b4      	movs	r0, #180	; 0xb4
 8007f16:	f7fa ffff 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007f1a:	4b99      	ldr	r3, [pc, #612]	; (8008180 <LCD_Init+0x3c18>)
 8007f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f20:	611a      	str	r2, [r3, #16]
 8007f22:	4b97      	ldr	r3, [pc, #604]	; (8008180 <LCD_Init+0x3c18>)
 8007f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f28:	615a      	str	r2, [r3, #20]
 8007f2a:	4b96      	ldr	r3, [pc, #600]	; (8008184 <LCD_Init+0x3c1c>)
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	60da      	str	r2, [r3, #12]
 8007f30:	4b93      	ldr	r3, [pc, #588]	; (8008180 <LCD_Init+0x3c18>)
 8007f32:	2280      	movs	r2, #128	; 0x80
 8007f34:	615a      	str	r2, [r3, #20]
 8007f36:	4b92      	ldr	r3, [pc, #584]	; (8008180 <LCD_Init+0x3c18>)
 8007f38:	2280      	movs	r2, #128	; 0x80
 8007f3a:	611a      	str	r2, [r3, #16]
 8007f3c:	4b90      	ldr	r3, [pc, #576]	; (8008180 <LCD_Init+0x3c18>)
 8007f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8007f44:	4b8e      	ldr	r3, [pc, #568]	; (8008180 <LCD_Init+0x3c18>)
 8007f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f4a:	611a      	str	r2, [r3, #16]
 8007f4c:	4b8c      	ldr	r3, [pc, #560]	; (8008180 <LCD_Init+0x3c18>)
 8007f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f52:	615a      	str	r2, [r3, #20]
 8007f54:	4b8b      	ldr	r3, [pc, #556]	; (8008184 <LCD_Init+0x3c1c>)
 8007f56:	f240 421f 	movw	r2, #1055	; 0x41f
 8007f5a:	60da      	str	r2, [r3, #12]
 8007f5c:	4b88      	ldr	r3, [pc, #544]	; (8008180 <LCD_Init+0x3c18>)
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	615a      	str	r2, [r3, #20]
 8007f62:	4b87      	ldr	r3, [pc, #540]	; (8008180 <LCD_Init+0x3c18>)
 8007f64:	2280      	movs	r2, #128	; 0x80
 8007f66:	611a      	str	r2, [r3, #16]
 8007f68:	4b85      	ldr	r3, [pc, #532]	; (8008180 <LCD_Init+0x3c18>)
 8007f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8007f70:	4b83      	ldr	r3, [pc, #524]	; (8008180 <LCD_Init+0x3c18>)
 8007f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f76:	611a      	str	r2, [r3, #16]
 8007f78:	4b81      	ldr	r3, [pc, #516]	; (8008180 <LCD_Init+0x3c18>)
 8007f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f7e:	615a      	str	r2, [r3, #20]
 8007f80:	4b80      	ldr	r3, [pc, #512]	; (8008184 <LCD_Init+0x3c1c>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	60da      	str	r2, [r3, #12]
 8007f86:	4b7e      	ldr	r3, [pc, #504]	; (8008180 <LCD_Init+0x3c18>)
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	615a      	str	r2, [r3, #20]
 8007f8c:	4b7c      	ldr	r3, [pc, #496]	; (8008180 <LCD_Init+0x3c18>)
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	611a      	str	r2, [r3, #16]
 8007f92:	4b7b      	ldr	r3, [pc, #492]	; (8008180 <LCD_Init+0x3c18>)
 8007f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8007f9a:	4b79      	ldr	r3, [pc, #484]	; (8008180 <LCD_Init+0x3c18>)
 8007f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	4b77      	ldr	r3, [pc, #476]	; (8008180 <LCD_Init+0x3c18>)
 8007fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa8:	615a      	str	r2, [r3, #20]
 8007faa:	4b76      	ldr	r3, [pc, #472]	; (8008184 <LCD_Init+0x3c1c>)
 8007fac:	222e      	movs	r2, #46	; 0x2e
 8007fae:	60da      	str	r2, [r3, #12]
 8007fb0:	4b73      	ldr	r3, [pc, #460]	; (8008180 <LCD_Init+0x3c18>)
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	615a      	str	r2, [r3, #20]
 8007fb6:	4b72      	ldr	r3, [pc, #456]	; (8008180 <LCD_Init+0x3c18>)
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	611a      	str	r2, [r3, #16]
 8007fbc:	4b70      	ldr	r3, [pc, #448]	; (8008180 <LCD_Init+0x3c18>)
 8007fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8007fc4:	4b6e      	ldr	r3, [pc, #440]	; (8008180 <LCD_Init+0x3c18>)
 8007fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fca:	611a      	str	r2, [r3, #16]
 8007fcc:	4b6c      	ldr	r3, [pc, #432]	; (8008180 <LCD_Init+0x3c18>)
 8007fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd2:	615a      	str	r2, [r3, #20]
 8007fd4:	4b6b      	ldr	r3, [pc, #428]	; (8008184 <LCD_Init+0x3c1c>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	4b69      	ldr	r3, [pc, #420]	; (8008180 <LCD_Init+0x3c18>)
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	615a      	str	r2, [r3, #20]
 8007fe0:	4b67      	ldr	r3, [pc, #412]	; (8008180 <LCD_Init+0x3c18>)
 8007fe2:	2280      	movs	r2, #128	; 0x80
 8007fe4:	611a      	str	r2, [r3, #16]
 8007fe6:	4b66      	ldr	r3, [pc, #408]	; (8008180 <LCD_Init+0x3c18>)
 8007fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007fee:	4b64      	ldr	r3, [pc, #400]	; (8008180 <LCD_Init+0x3c18>)
 8007ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ff4:	611a      	str	r2, [r3, #16]
 8007ff6:	4b62      	ldr	r3, [pc, #392]	; (8008180 <LCD_Init+0x3c18>)
 8007ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffc:	615a      	str	r2, [r3, #20]
 8007ffe:	4b61      	ldr	r3, [pc, #388]	; (8008184 <LCD_Init+0x3c1c>)
 8008000:	2200      	movs	r2, #0
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	4b5e      	ldr	r3, [pc, #376]	; (8008180 <LCD_Init+0x3c18>)
 8008006:	2280      	movs	r2, #128	; 0x80
 8008008:	615a      	str	r2, [r3, #20]
 800800a:	4b5d      	ldr	r3, [pc, #372]	; (8008180 <LCD_Init+0x3c18>)
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	611a      	str	r2, [r3, #16]
 8008010:	4b5b      	ldr	r3, [pc, #364]	; (8008180 <LCD_Init+0x3c18>)
 8008012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008016:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008018:	4b59      	ldr	r3, [pc, #356]	; (8008180 <LCD_Init+0x3c18>)
 800801a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800801e:	611a      	str	r2, [r3, #16]
 8008020:	4b57      	ldr	r3, [pc, #348]	; (8008180 <LCD_Init+0x3c18>)
 8008022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008026:	615a      	str	r2, [r3, #20]
 8008028:	4b56      	ldr	r3, [pc, #344]	; (8008184 <LCD_Init+0x3c1c>)
 800802a:	2200      	movs	r2, #0
 800802c:	60da      	str	r2, [r3, #12]
 800802e:	4b54      	ldr	r3, [pc, #336]	; (8008180 <LCD_Init+0x3c18>)
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	615a      	str	r2, [r3, #20]
 8008034:	4b52      	ldr	r3, [pc, #328]	; (8008180 <LCD_Init+0x3c18>)
 8008036:	2280      	movs	r2, #128	; 0x80
 8008038:	611a      	str	r2, [r3, #16]
 800803a:	4b51      	ldr	r3, [pc, #324]	; (8008180 <LCD_Init+0x3c18>)
 800803c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008040:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008042:	4b4f      	ldr	r3, [pc, #316]	; (8008180 <LCD_Init+0x3c18>)
 8008044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008048:	611a      	str	r2, [r3, #16]
 800804a:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <LCD_Init+0x3c18>)
 800804c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008050:	615a      	str	r2, [r3, #20]
 8008052:	4b4c      	ldr	r3, [pc, #304]	; (8008184 <LCD_Init+0x3c1c>)
 8008054:	2200      	movs	r2, #0
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	4b49      	ldr	r3, [pc, #292]	; (8008180 <LCD_Init+0x3c18>)
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	615a      	str	r2, [r3, #20]
 800805e:	4b48      	ldr	r3, [pc, #288]	; (8008180 <LCD_Init+0x3c18>)
 8008060:	2280      	movs	r2, #128	; 0x80
 8008062:	611a      	str	r2, [r3, #16]
 8008064:	4b46      	ldr	r3, [pc, #280]	; (8008180 <LCD_Init+0x3c18>)
 8008066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800806a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800806c:	20b6      	movs	r0, #182	; 0xb6
 800806e:	f7fa ff53 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8008072:	4b43      	ldr	r3, [pc, #268]	; (8008180 <LCD_Init+0x3c18>)
 8008074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008078:	611a      	str	r2, [r3, #16]
 800807a:	4b41      	ldr	r3, [pc, #260]	; (8008180 <LCD_Init+0x3c18>)
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	615a      	str	r2, [r3, #20]
 8008082:	4b40      	ldr	r3, [pc, #256]	; (8008184 <LCD_Init+0x3c1c>)
 8008084:	2202      	movs	r2, #2
 8008086:	60da      	str	r2, [r3, #12]
 8008088:	4b3d      	ldr	r3, [pc, #244]	; (8008180 <LCD_Init+0x3c18>)
 800808a:	2280      	movs	r2, #128	; 0x80
 800808c:	615a      	str	r2, [r3, #20]
 800808e:	4b3c      	ldr	r3, [pc, #240]	; (8008180 <LCD_Init+0x3c18>)
 8008090:	2280      	movs	r2, #128	; 0x80
 8008092:	611a      	str	r2, [r3, #16]
 8008094:	4b3a      	ldr	r3, [pc, #232]	; (8008180 <LCD_Init+0x3c18>)
 8008096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800809c:	4b38      	ldr	r3, [pc, #224]	; (8008180 <LCD_Init+0x3c18>)
 800809e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080a2:	611a      	str	r2, [r3, #16]
 80080a4:	4b36      	ldr	r3, [pc, #216]	; (8008180 <LCD_Init+0x3c18>)
 80080a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080aa:	615a      	str	r2, [r3, #20]
 80080ac:	4b35      	ldr	r3, [pc, #212]	; (8008184 <LCD_Init+0x3c1c>)
 80080ae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80080b2:	60da      	str	r2, [r3, #12]
 80080b4:	4b32      	ldr	r3, [pc, #200]	; (8008180 <LCD_Init+0x3c18>)
 80080b6:	2280      	movs	r2, #128	; 0x80
 80080b8:	615a      	str	r2, [r3, #20]
 80080ba:	4b31      	ldr	r3, [pc, #196]	; (8008180 <LCD_Init+0x3c18>)
 80080bc:	2280      	movs	r2, #128	; 0x80
 80080be:	611a      	str	r2, [r3, #16]
 80080c0:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <LCD_Init+0x3c18>)
 80080c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80080c8:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <LCD_Init+0x3c18>)
 80080ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ce:	611a      	str	r2, [r3, #16]
 80080d0:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <LCD_Init+0x3c18>)
 80080d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d6:	615a      	str	r2, [r3, #20]
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <LCD_Init+0x3c1c>)
 80080da:	2200      	movs	r2, #0
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	4b28      	ldr	r3, [pc, #160]	; (8008180 <LCD_Init+0x3c18>)
 80080e0:	2280      	movs	r2, #128	; 0x80
 80080e2:	615a      	str	r2, [r3, #20]
 80080e4:	4b26      	ldr	r3, [pc, #152]	; (8008180 <LCD_Init+0x3c18>)
 80080e6:	2280      	movs	r2, #128	; 0x80
 80080e8:	611a      	str	r2, [r3, #16]
 80080ea:	4b25      	ldr	r3, [pc, #148]	; (8008180 <LCD_Init+0x3c18>)
 80080ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80080f2:	4b23      	ldr	r3, [pc, #140]	; (8008180 <LCD_Init+0x3c18>)
 80080f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080f8:	611a      	str	r2, [r3, #16]
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <LCD_Init+0x3c18>)
 80080fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008100:	615a      	str	r2, [r3, #20]
 8008102:	4b20      	ldr	r3, [pc, #128]	; (8008184 <LCD_Init+0x3c1c>)
 8008104:	2217      	movs	r2, #23
 8008106:	60da      	str	r2, [r3, #12]
 8008108:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <LCD_Init+0x3c18>)
 800810a:	2280      	movs	r2, #128	; 0x80
 800810c:	615a      	str	r2, [r3, #20]
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <LCD_Init+0x3c18>)
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <LCD_Init+0x3c18>)
 8008116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800811c:	4b18      	ldr	r3, [pc, #96]	; (8008180 <LCD_Init+0x3c18>)
 800811e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008122:	611a      	str	r2, [r3, #16]
 8008124:	4b16      	ldr	r3, [pc, #88]	; (8008180 <LCD_Init+0x3c18>)
 8008126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812a:	615a      	str	r2, [r3, #20]
 800812c:	4b15      	ldr	r3, [pc, #84]	; (8008184 <LCD_Init+0x3c1c>)
 800812e:	2215      	movs	r2, #21
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <LCD_Init+0x3c18>)
 8008134:	2280      	movs	r2, #128	; 0x80
 8008136:	615a      	str	r2, [r3, #20]
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <LCD_Init+0x3c18>)
 800813a:	2280      	movs	r2, #128	; 0x80
 800813c:	611a      	str	r2, [r3, #16]
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <LCD_Init+0x3c18>)
 8008140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008144:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008146:	4b0e      	ldr	r3, [pc, #56]	; (8008180 <LCD_Init+0x3c18>)
 8008148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <LCD_Init+0x3c18>)
 8008150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008154:	615a      	str	r2, [r3, #20]
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <LCD_Init+0x3c1c>)
 8008158:	2200      	movs	r2, #0
 800815a:	60da      	str	r2, [r3, #12]
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <LCD_Init+0x3c18>)
 800815e:	2280      	movs	r2, #128	; 0x80
 8008160:	615a      	str	r2, [r3, #20]
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <LCD_Init+0x3c18>)
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	611a      	str	r2, [r3, #16]
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <LCD_Init+0x3c18>)
 800816a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008170:	4b03      	ldr	r3, [pc, #12]	; (8008180 <LCD_Init+0x3c18>)
 8008172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008176:	611a      	str	r2, [r3, #16]
 8008178:	4b01      	ldr	r3, [pc, #4]	; (8008180 <LCD_Init+0x3c18>)
 800817a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800817e:	e003      	b.n	8008188 <LCD_Init+0x3c20>
 8008180:	40011000 	.word	0x40011000
 8008184:	40010c00 	.word	0x40010c00
 8008188:	615a      	str	r2, [r3, #20]
 800818a:	4b8b      	ldr	r3, [pc, #556]	; (80083b8 <LCD_Init+0x3e50>)
 800818c:	2200      	movs	r2, #0
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	4b8a      	ldr	r3, [pc, #552]	; (80083bc <LCD_Init+0x3e54>)
 8008192:	2280      	movs	r2, #128	; 0x80
 8008194:	615a      	str	r2, [r3, #20]
 8008196:	4b89      	ldr	r3, [pc, #548]	; (80083bc <LCD_Init+0x3e54>)
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	611a      	str	r2, [r3, #16]
 800819c:	4b87      	ldr	r3, [pc, #540]	; (80083bc <LCD_Init+0x3e54>)
 800819e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081a2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 80081a4:	20f0      	movs	r0, #240	; 0xf0
 80081a6:	f7fa feb7 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 80081aa:	4b84      	ldr	r3, [pc, #528]	; (80083bc <LCD_Init+0x3e54>)
 80081ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081b0:	611a      	str	r2, [r3, #16]
 80081b2:	4b82      	ldr	r3, [pc, #520]	; (80083bc <LCD_Init+0x3e54>)
 80081b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b8:	615a      	str	r2, [r3, #20]
 80081ba:	4b7f      	ldr	r3, [pc, #508]	; (80083b8 <LCD_Init+0x3e50>)
 80081bc:	2203      	movs	r2, #3
 80081be:	60da      	str	r2, [r3, #12]
 80081c0:	4b7e      	ldr	r3, [pc, #504]	; (80083bc <LCD_Init+0x3e54>)
 80081c2:	2280      	movs	r2, #128	; 0x80
 80081c4:	615a      	str	r2, [r3, #20]
 80081c6:	4b7d      	ldr	r3, [pc, #500]	; (80083bc <LCD_Init+0x3e54>)
 80081c8:	2280      	movs	r2, #128	; 0x80
 80081ca:	611a      	str	r2, [r3, #16]
 80081cc:	4b7b      	ldr	r3, [pc, #492]	; (80083bc <LCD_Init+0x3e54>)
 80081ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 80081d4:	2029      	movs	r0, #41	; 0x29
 80081d6:	f7fa fe9f 	bl	8002f18 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80081da:	20d0      	movs	r0, #208	; 0xd0
 80081dc:	f7fa fe9c 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80081e0:	4b76      	ldr	r3, [pc, #472]	; (80083bc <LCD_Init+0x3e54>)
 80081e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e6:	611a      	str	r2, [r3, #16]
 80081e8:	4b74      	ldr	r3, [pc, #464]	; (80083bc <LCD_Init+0x3e54>)
 80081ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ee:	615a      	str	r2, [r3, #20]
 80081f0:	4b71      	ldr	r3, [pc, #452]	; (80083b8 <LCD_Init+0x3e50>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	4b71      	ldr	r3, [pc, #452]	; (80083bc <LCD_Init+0x3e54>)
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	615a      	str	r2, [r3, #20]
 80081fc:	4b6f      	ldr	r3, [pc, #444]	; (80083bc <LCD_Init+0x3e54>)
 80081fe:	2280      	movs	r2, #128	; 0x80
 8008200:	611a      	str	r2, [r3, #16]
 8008202:	4b6e      	ldr	r3, [pc, #440]	; (80083bc <LCD_Init+0x3e54>)
 8008204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008208:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800820a:	20be      	movs	r0, #190	; 0xbe
 800820c:	f7fa fe84 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8008210:	4b6a      	ldr	r3, [pc, #424]	; (80083bc <LCD_Init+0x3e54>)
 8008212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008216:	611a      	str	r2, [r3, #16]
 8008218:	4b68      	ldr	r3, [pc, #416]	; (80083bc <LCD_Init+0x3e54>)
 800821a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821e:	615a      	str	r2, [r3, #20]
 8008220:	4b65      	ldr	r3, [pc, #404]	; (80083b8 <LCD_Init+0x3e50>)
 8008222:	2205      	movs	r2, #5
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	4b65      	ldr	r3, [pc, #404]	; (80083bc <LCD_Init+0x3e54>)
 8008228:	2280      	movs	r2, #128	; 0x80
 800822a:	615a      	str	r2, [r3, #20]
 800822c:	4b63      	ldr	r3, [pc, #396]	; (80083bc <LCD_Init+0x3e54>)
 800822e:	2280      	movs	r2, #128	; 0x80
 8008230:	611a      	str	r2, [r3, #16]
 8008232:	4b62      	ldr	r3, [pc, #392]	; (80083bc <LCD_Init+0x3e54>)
 8008234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008238:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800823a:	4b60      	ldr	r3, [pc, #384]	; (80083bc <LCD_Init+0x3e54>)
 800823c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	4b5e      	ldr	r3, [pc, #376]	; (80083bc <LCD_Init+0x3e54>)
 8008244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008248:	615a      	str	r2, [r3, #20]
 800824a:	4b5b      	ldr	r3, [pc, #364]	; (80083b8 <LCD_Init+0x3e50>)
 800824c:	22fe      	movs	r2, #254	; 0xfe
 800824e:	60da      	str	r2, [r3, #12]
 8008250:	4b5a      	ldr	r3, [pc, #360]	; (80083bc <LCD_Init+0x3e54>)
 8008252:	2280      	movs	r2, #128	; 0x80
 8008254:	615a      	str	r2, [r3, #20]
 8008256:	4b59      	ldr	r3, [pc, #356]	; (80083bc <LCD_Init+0x3e54>)
 8008258:	2280      	movs	r2, #128	; 0x80
 800825a:	611a      	str	r2, [r3, #16]
 800825c:	4b57      	ldr	r3, [pc, #348]	; (80083bc <LCD_Init+0x3e54>)
 800825e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008262:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8008264:	4b55      	ldr	r3, [pc, #340]	; (80083bc <LCD_Init+0x3e54>)
 8008266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800826a:	611a      	str	r2, [r3, #16]
 800826c:	4b53      	ldr	r3, [pc, #332]	; (80083bc <LCD_Init+0x3e54>)
 800826e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008272:	615a      	str	r2, [r3, #20]
 8008274:	4b50      	ldr	r3, [pc, #320]	; (80083b8 <LCD_Init+0x3e50>)
 8008276:	2201      	movs	r2, #1
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	4b50      	ldr	r3, [pc, #320]	; (80083bc <LCD_Init+0x3e54>)
 800827c:	2280      	movs	r2, #128	; 0x80
 800827e:	615a      	str	r2, [r3, #20]
 8008280:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <LCD_Init+0x3e54>)
 8008282:	2280      	movs	r2, #128	; 0x80
 8008284:	611a      	str	r2, [r3, #16]
 8008286:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <LCD_Init+0x3e54>)
 8008288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 800828e:	4b4b      	ldr	r3, [pc, #300]	; (80083bc <LCD_Init+0x3e54>)
 8008290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008294:	611a      	str	r2, [r3, #16]
 8008296:	4b49      	ldr	r3, [pc, #292]	; (80083bc <LCD_Init+0x3e54>)
 8008298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800829c:	615a      	str	r2, [r3, #20]
 800829e:	4b46      	ldr	r3, [pc, #280]	; (80083b8 <LCD_Init+0x3e50>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	60da      	str	r2, [r3, #12]
 80082a4:	4b45      	ldr	r3, [pc, #276]	; (80083bc <LCD_Init+0x3e54>)
 80082a6:	2280      	movs	r2, #128	; 0x80
 80082a8:	615a      	str	r2, [r3, #20]
 80082aa:	4b44      	ldr	r3, [pc, #272]	; (80083bc <LCD_Init+0x3e54>)
 80082ac:	2280      	movs	r2, #128	; 0x80
 80082ae:	611a      	str	r2, [r3, #16]
 80082b0:	4b42      	ldr	r3, [pc, #264]	; (80083bc <LCD_Init+0x3e54>)
 80082b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 80082b8:	4b40      	ldr	r3, [pc, #256]	; (80083bc <LCD_Init+0x3e54>)
 80082ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082be:	611a      	str	r2, [r3, #16]
 80082c0:	4b3e      	ldr	r3, [pc, #248]	; (80083bc <LCD_Init+0x3e54>)
 80082c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c6:	615a      	str	r2, [r3, #20]
 80082c8:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <LCD_Init+0x3e50>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	60da      	str	r2, [r3, #12]
 80082ce:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <LCD_Init+0x3e54>)
 80082d0:	2280      	movs	r2, #128	; 0x80
 80082d2:	615a      	str	r2, [r3, #20]
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <LCD_Init+0x3e54>)
 80082d6:	2280      	movs	r2, #128	; 0x80
 80082d8:	611a      	str	r2, [r3, #16]
 80082da:	4b38      	ldr	r3, [pc, #224]	; (80083bc <LCD_Init+0x3e54>)
 80082dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <LCD_Init+0x3e54>)
 80082e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082e8:	611a      	str	r2, [r3, #16]
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <LCD_Init+0x3e54>)
 80082ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f0:	615a      	str	r2, [r3, #20]
 80082f2:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <LCD_Init+0x3e50>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	4b30      	ldr	r3, [pc, #192]	; (80083bc <LCD_Init+0x3e54>)
 80082fa:	2280      	movs	r2, #128	; 0x80
 80082fc:	615a      	str	r2, [r3, #20]
 80082fe:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <LCD_Init+0x3e54>)
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	611a      	str	r2, [r3, #16]
 8008304:	4b2d      	ldr	r3, [pc, #180]	; (80083bc <LCD_Init+0x3e54>)
 8008306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800830c:	20b8      	movs	r0, #184	; 0xb8
 800830e:	f7fa fe03 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8008312:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <LCD_Init+0x3e54>)
 8008314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008318:	611a      	str	r2, [r3, #16]
 800831a:	4b28      	ldr	r3, [pc, #160]	; (80083bc <LCD_Init+0x3e54>)
 800831c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008320:	615a      	str	r2, [r3, #20]
 8008322:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <LCD_Init+0x3e50>)
 8008324:	2203      	movs	r2, #3
 8008326:	60da      	str	r2, [r3, #12]
 8008328:	4b24      	ldr	r3, [pc, #144]	; (80083bc <LCD_Init+0x3e54>)
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	615a      	str	r2, [r3, #20]
 800832e:	4b23      	ldr	r3, [pc, #140]	; (80083bc <LCD_Init+0x3e54>)
 8008330:	2280      	movs	r2, #128	; 0x80
 8008332:	611a      	str	r2, [r3, #16]
 8008334:	4b21      	ldr	r3, [pc, #132]	; (80083bc <LCD_Init+0x3e54>)
 8008336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800833a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 800833c:	4b1f      	ldr	r3, [pc, #124]	; (80083bc <LCD_Init+0x3e54>)
 800833e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008342:	611a      	str	r2, [r3, #16]
 8008344:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <LCD_Init+0x3e54>)
 8008346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834a:	615a      	str	r2, [r3, #20]
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <LCD_Init+0x3e50>)
 800834e:	2201      	movs	r2, #1
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <LCD_Init+0x3e54>)
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	615a      	str	r2, [r3, #20]
 8008358:	4b18      	ldr	r3, [pc, #96]	; (80083bc <LCD_Init+0x3e54>)
 800835a:	2280      	movs	r2, #128	; 0x80
 800835c:	611a      	str	r2, [r3, #16]
 800835e:	4b17      	ldr	r3, [pc, #92]	; (80083bc <LCD_Init+0x3e54>)
 8008360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008364:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8008366:	20ba      	movs	r0, #186	; 0xba
 8008368:	f7fa fdd6 	bl	8002f18 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 800836c:	4b13      	ldr	r3, [pc, #76]	; (80083bc <LCD_Init+0x3e54>)
 800836e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008372:	611a      	str	r2, [r3, #16]
 8008374:	4b11      	ldr	r3, [pc, #68]	; (80083bc <LCD_Init+0x3e54>)
 8008376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800837a:	615a      	str	r2, [r3, #20]
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <LCD_Init+0x3e50>)
 800837e:	2201      	movs	r2, #1
 8008380:	60da      	str	r2, [r3, #12]
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <LCD_Init+0x3e54>)
 8008384:	2280      	movs	r2, #128	; 0x80
 8008386:	615a      	str	r2, [r3, #20]
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <LCD_Init+0x3e54>)
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	611a      	str	r2, [r3, #16]
 800838e:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <LCD_Init+0x3e54>)
 8008390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008394:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8008396:	2064      	movs	r0, #100	; 0x64
 8008398:	f7fb ff36 	bl	8004208 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 800839c:	2000      	movs	r0, #0
 800839e:	f7fb ffd7 	bl	8004350 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80083a2:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <LCD_Init+0x3e58>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80083a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80083ac:	f000 f80a 	bl	80083c4 <LCD_Clear>
}
 80083b0:	bf00      	nop
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40010c00 	.word	0x40010c00
 80083bc:	40011000 	.word	0x40011000
 80083c0:	422201a8 	.word	0x422201a8

080083c4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80083d2:	4b2a      	ldr	r3, [pc, #168]	; (800847c <LCD_Clear+0xb8>)
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80083d8:	4b28      	ldr	r3, [pc, #160]	; (800847c <LCD_Clear+0xb8>)
 80083da:	885b      	ldrh	r3, [r3, #2]
 80083dc:	461a      	mov	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80083e6:	4b25      	ldr	r3, [pc, #148]	; (800847c <LCD_Clear+0xb8>)
 80083e8:	889b      	ldrh	r3, [r3, #4]
 80083ea:	f646 0204 	movw	r2, #26628	; 0x6804
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d11a      	bne.n	8008428 <LCD_Clear+0x64>
 80083f2:	4b22      	ldr	r3, [pc, #136]	; (800847c <LCD_Clear+0xb8>)
 80083f4:	799b      	ldrb	r3, [r3, #6]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d116      	bne.n	8008428 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <LCD_Clear+0xb8>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <LCD_Clear+0xb8>)
 8008402:	222a      	movs	r2, #42	; 0x2a
 8008404:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8008406:	4b1d      	ldr	r3, [pc, #116]	; (800847c <LCD_Clear+0xb8>)
 8008408:	222b      	movs	r2, #43	; 0x2b
 800840a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800840c:	2100      	movs	r1, #0
 800840e:	2000      	movs	r0, #0
 8008410:	f7fa fe54 	bl	80030bc <LCD_SetCursor>
		lcddev.dir = 1;
 8008414:	4b19      	ldr	r3, [pc, #100]	; (800847c <LCD_Clear+0xb8>)
 8008416:	2201      	movs	r2, #1
 8008418:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800841a:	4b18      	ldr	r3, [pc, #96]	; (800847c <LCD_Clear+0xb8>)
 800841c:	222b      	movs	r2, #43	; 0x2b
 800841e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008420:	4b16      	ldr	r3, [pc, #88]	; (800847c <LCD_Clear+0xb8>)
 8008422:	222a      	movs	r2, #42	; 0x2a
 8008424:	819a      	strh	r2, [r3, #12]
 8008426:	e003      	b.n	8008430 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8008428:	2100      	movs	r1, #0
 800842a:	2000      	movs	r0, #0
 800842c:	f7fa fe46 	bl	80030bc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8008430:	f7fa fe38 	bl	80030a4 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e017      	b.n	800846a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800843a:	4b11      	ldr	r3, [pc, #68]	; (8008480 <LCD_Clear+0xbc>)
 800843c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008440:	611a      	str	r2, [r3, #16]
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <LCD_Clear+0xbc>)
 8008444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008448:	615a      	str	r2, [r3, #20]
 800844a:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <LCD_Clear+0xc0>)
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	60d3      	str	r3, [r2, #12]
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <LCD_Clear+0xbc>)
 8008452:	2280      	movs	r2, #128	; 0x80
 8008454:	615a      	str	r2, [r3, #20]
 8008456:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <LCD_Clear+0xbc>)
 8008458:	2280      	movs	r2, #128	; 0x80
 800845a:	611a      	str	r2, [r3, #16]
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <LCD_Clear+0xbc>)
 800845e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008462:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	d3e3      	bcc.n	800843a <LCD_Clear+0x76>
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000494 	.word	0x20000494
 8008480:	40011000 	.word	0x40011000
 8008484:	40010c00 	.word	0x40010c00

08008488 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b087      	sub	sp, #28
 800848c:	af02      	add	r7, sp, #8
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4623      	mov	r3, r4
 8008498:	80fb      	strh	r3, [r7, #6]
 800849a:	4603      	mov	r3, r0
 800849c:	80bb      	strh	r3, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	807b      	strh	r3, [r7, #2]
 80084a2:	4613      	mov	r3, r2
 80084a4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80084aa:	4b3a      	ldr	r3, [pc, #232]	; (8008594 <LCD_Fill+0x10c>)
 80084ac:	889b      	ldrh	r3, [r3, #4]
 80084ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d133      	bne.n	800851e <LCD_Fill+0x96>
 80084b6:	4b37      	ldr	r3, [pc, #220]	; (8008594 <LCD_Fill+0x10c>)
 80084b8:	799b      	ldrb	r3, [r3, #6]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d12f      	bne.n	800851e <LCD_Fill+0x96>
			{
		temp = sx;
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80084c2:	88bb      	ldrh	r3, [r7, #4]
 80084c4:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80084c6:	4b33      	ldr	r3, [pc, #204]	; (8008594 <LCD_Fill+0x10c>)
 80084c8:	881a      	ldrh	r2, [r3, #0]
 80084ca:	887b      	ldrh	r3, [r7, #2]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80084d4:	883b      	ldrh	r3, [r7, #0]
 80084d6:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80084d8:	4b2e      	ldr	r3, [pc, #184]	; (8008594 <LCD_Fill+0x10c>)
 80084da:	881a      	ldrh	r2, [r3, #0]
 80084dc:	893b      	ldrh	r3, [r7, #8]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80084e6:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <LCD_Fill+0x10c>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80084ec:	4b29      	ldr	r3, [pc, #164]	; (8008594 <LCD_Fill+0x10c>)
 80084ee:	222a      	movs	r2, #42	; 0x2a
 80084f0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80084f2:	4b28      	ldr	r3, [pc, #160]	; (8008594 <LCD_Fill+0x10c>)
 80084f4:	222b      	movs	r2, #43	; 0x2b
 80084f6:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80084f8:	883c      	ldrh	r4, [r7, #0]
 80084fa:	887a      	ldrh	r2, [r7, #2]
 80084fc:	88b9      	ldrh	r1, [r7, #4]
 80084fe:	88f8      	ldrh	r0, [r7, #6]
 8008500:	8c3b      	ldrh	r3, [r7, #32]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4623      	mov	r3, r4
 8008506:	f7ff ffbf 	bl	8008488 <LCD_Fill>
		lcddev.dir = 1;
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <LCD_Fill+0x10c>)
 800850c:	2201      	movs	r2, #1
 800850e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008510:	4b20      	ldr	r3, [pc, #128]	; (8008594 <LCD_Fill+0x10c>)
 8008512:	222b      	movs	r2, #43	; 0x2b
 8008514:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008516:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <LCD_Fill+0x10c>)
 8008518:	222a      	movs	r2, #42	; 0x2a
 800851a:	819a      	strh	r2, [r3, #12]
 800851c:	e036      	b.n	800858c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	b29b      	uxth	r3, r3
 8008526:	3301      	adds	r3, #1
 8008528:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800852a:	88bb      	ldrh	r3, [r7, #4]
 800852c:	81fb      	strh	r3, [r7, #14]
 800852e:	e029      	b.n	8008584 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008530:	89fa      	ldrh	r2, [r7, #14]
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f7fa fdc0 	bl	80030bc <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800853c:	f7fa fdb2 	bl	80030a4 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8008540:	2300      	movs	r3, #0
 8008542:	81bb      	strh	r3, [r7, #12]
 8008544:	e017      	b.n	8008576 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <LCD_Fill+0x110>)
 8008548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800854c:	611a      	str	r2, [r3, #16]
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <LCD_Fill+0x110>)
 8008550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008554:	615a      	str	r2, [r3, #20]
 8008556:	4a11      	ldr	r2, [pc, #68]	; (800859c <LCD_Fill+0x114>)
 8008558:	8c3b      	ldrh	r3, [r7, #32]
 800855a:	60d3      	str	r3, [r2, #12]
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <LCD_Fill+0x110>)
 800855e:	2280      	movs	r2, #128	; 0x80
 8008560:	615a      	str	r2, [r3, #20]
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <LCD_Fill+0x110>)
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	611a      	str	r2, [r3, #16]
 8008568:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <LCD_Fill+0x110>)
 800856a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800856e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8008570:	89bb      	ldrh	r3, [r7, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	81bb      	strh	r3, [r7, #12]
 8008576:	89ba      	ldrh	r2, [r7, #12]
 8008578:	897b      	ldrh	r3, [r7, #10]
 800857a:	429a      	cmp	r2, r3
 800857c:	d3e3      	bcc.n	8008546 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800857e:	89fb      	ldrh	r3, [r7, #14]
 8008580:	3301      	adds	r3, #1
 8008582:	81fb      	strh	r3, [r7, #14]
 8008584:	89fa      	ldrh	r2, [r7, #14]
 8008586:	883b      	ldrh	r3, [r7, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d9d1      	bls.n	8008530 <LCD_Fill+0xa8>
		}
	}
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bd90      	pop	{r4, r7, pc}
 8008594:	20000494 	.word	0x20000494
 8008598:	40011000 	.word	0x40011000
 800859c:	40010c00 	.word	0x40010c00

080085a0 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b08d      	sub	sp, #52	; 0x34
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	4623      	mov	r3, r4
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4603      	mov	r3, r0
 80085b4:	80bb      	strh	r3, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	807b      	strh	r3, [r7, #2]
 80085ba:	4613      	mov	r3, r2
 80085bc:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 80085be:	2300      	movs	r3, #0
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 80085ce:	883a      	ldrh	r2, [r7, #0]
 80085d0:	88bb      	ldrh	r3, [r7, #4]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80085da:	88bb      	ldrh	r3, [r7, #4]
 80085dc:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd02      	ble.n	80085ea <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e00b      	b.n	8008602 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e005      	b.n	8008602 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	425b      	negs	r3, r3
 8008600:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd02      	ble.n	800860e <LCD_DrawLine+0x6e>
		incy = 1;
 8008608:	2301      	movs	r3, #1
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	e00b      	b.n	8008626 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	e005      	b.n	8008626 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	425b      	negs	r3, r3
 8008624:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8008626:	6a3a      	ldr	r2, [r7, #32]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	429a      	cmp	r2, r3
 800862c:	dd02      	ble.n	8008634 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	e001      	b.n	8008638 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008638:	2300      	movs	r3, #0
 800863a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800863c:	e02a      	b.n	8008694 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b29b      	uxth	r3, r3
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	b292      	uxth	r2, r2
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fb fb15 	bl	8003c78 <LCD_DrawPoint>
		xerr += delta_x;
 800864e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	4413      	add	r3, r2
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8008656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 800865e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	429a      	cmp	r2, r3
 8008664:	dd07      	ble.n	8008676 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8008666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	4413      	add	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8008676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	429a      	cmp	r2, r3
 800867c:	dd07      	ble.n	800868e <LCD_DrawLine+0xee>
			yerr -= distance;
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	4413      	add	r3, r2
 800868c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 800868e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008690:	3301      	adds	r3, #1
 8008692:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008694:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	3301      	adds	r3, #1
 800869a:	429a      	cmp	r2, r3
 800869c:	ddcf      	ble.n	800863e <LCD_DrawLine+0x9e>
		}
	}
}
 800869e:	bf00      	nop
 80086a0:	3734      	adds	r7, #52	; 0x34
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}

080086a6 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80086a6:	b590      	push	{r4, r7, lr}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	4604      	mov	r4, r0
 80086ae:	4608      	mov	r0, r1
 80086b0:	4611      	mov	r1, r2
 80086b2:	461a      	mov	r2, r3
 80086b4:	4623      	mov	r3, r4
 80086b6:	80fb      	strh	r3, [r7, #6]
 80086b8:	4603      	mov	r3, r0
 80086ba:	80bb      	strh	r3, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
 80086c0:	4613      	mov	r3, r2
 80086c2:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 80086c4:	88bb      	ldrh	r3, [r7, #4]
 80086c6:	887a      	ldrh	r2, [r7, #2]
 80086c8:	88b9      	ldrh	r1, [r7, #4]
 80086ca:	88f8      	ldrh	r0, [r7, #6]
 80086cc:	f7ff ff68 	bl	80085a0 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 80086d0:	883b      	ldrh	r3, [r7, #0]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	88b9      	ldrh	r1, [r7, #4]
 80086d6:	88f8      	ldrh	r0, [r7, #6]
 80086d8:	f7ff ff62 	bl	80085a0 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 80086dc:	883b      	ldrh	r3, [r7, #0]
 80086de:	887a      	ldrh	r2, [r7, #2]
 80086e0:	8839      	ldrh	r1, [r7, #0]
 80086e2:	88f8      	ldrh	r0, [r7, #6]
 80086e4:	f7ff ff5c 	bl	80085a0 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 80086e8:	883b      	ldrh	r3, [r7, #0]
 80086ea:	887a      	ldrh	r2, [r7, #2]
 80086ec:	88b9      	ldrh	r1, [r7, #4]
 80086ee:	8878      	ldrh	r0, [r7, #2]
 80086f0:	f7ff ff56 	bl	80085a0 <LCD_DrawLine>
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd90      	pop	{r4, r7, pc}

080086fc <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	4611      	mov	r1, r2
 8008708:	461a      	mov	r2, r3
 800870a:	4623      	mov	r3, r4
 800870c:	80fb      	strh	r3, [r7, #6]
 800870e:	4603      	mov	r3, r0
 8008710:	80bb      	strh	r3, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
 8008716:	4613      	mov	r3, r2
 8008718:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800871a:	88bb      	ldrh	r3, [r7, #4]
 800871c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800871e:	78bb      	ldrb	r3, [r7, #2]
 8008720:	08db      	lsrs	r3, r3, #3
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	78bb      	ldrb	r3, [r7, #2]
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	bf14      	ite	ne
 8008732:	2301      	movne	r3, #1
 8008734:	2300      	moveq	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	4413      	add	r3, r2
 800873a:	b2db      	uxtb	r3, r3
 800873c:	78ba      	ldrb	r2, [r7, #2]
 800873e:	0852      	lsrs	r2, r2, #1
 8008740:	b2d2      	uxtb	r2, r2
 8008742:	fb02 f303 	mul.w	r3, r2, r3
 8008746:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	3b20      	subs	r3, #32
 800874c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800874e:	2300      	movs	r3, #0
 8008750:	737b      	strb	r3, [r7, #13]
 8008752:	e069      	b.n	8008828 <LCD_ShowChar+0x12c>
		if (size == 12)
 8008754:	78bb      	ldrb	r3, [r7, #2]
 8008756:	2b0c      	cmp	r3, #12
 8008758:	d10b      	bne.n	8008772 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	7b79      	ldrb	r1, [r7, #13]
 800875e:	4838      	ldr	r0, [pc, #224]	; (8008840 <LCD_ShowChar+0x144>)
 8008760:	4613      	mov	r3, r2
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4403      	add	r3, r0
 800876a:	440b      	add	r3, r1
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e019      	b.n	80087a6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8008772:	78bb      	ldrb	r3, [r7, #2]
 8008774:	2b10      	cmp	r3, #16
 8008776:	d108      	bne.n	800878a <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	7b7b      	ldrb	r3, [r7, #13]
 800877c:	4931      	ldr	r1, [pc, #196]	; (8008844 <LCD_ShowChar+0x148>)
 800877e:	0112      	lsls	r2, r2, #4
 8008780:	440a      	add	r2, r1
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	73fb      	strb	r3, [r7, #15]
 8008788:	e00d      	b.n	80087a6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 800878a:	78bb      	ldrb	r3, [r7, #2]
 800878c:	2b18      	cmp	r3, #24
 800878e:	d150      	bne.n	8008832 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	7b79      	ldrb	r1, [r7, #13]
 8008794:	482c      	ldr	r0, [pc, #176]	; (8008848 <LCD_ShowChar+0x14c>)
 8008796:	4613      	mov	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4403      	add	r3, r0
 80087a0:	440b      	add	r3, r1
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80087a6:	2300      	movs	r3, #0
 80087a8:	73bb      	strb	r3, [r7, #14]
 80087aa:	e035      	b.n	8008818 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80087ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da07      	bge.n	80087c4 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80087b4:	4b25      	ldr	r3, [pc, #148]	; (800884c <LCD_ShowChar+0x150>)
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	88b9      	ldrh	r1, [r7, #4]
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fb fa8b 	bl	8003cd8 <LCD_Fast_DrawPoint>
 80087c2:	e00a      	b.n	80087da <LCD_ShowChar+0xde>
			else if (mode == 0)
 80087c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80087cc:	4b20      	ldr	r3, [pc, #128]	; (8008850 <LCD_ShowChar+0x154>)
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	88b9      	ldrh	r1, [r7, #4]
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fb fa7f 	bl	8003cd8 <LCD_Fast_DrawPoint>
			temp <<= 1;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
			y++;
 80087e0:	88bb      	ldrh	r3, [r7, #4]
 80087e2:	3301      	adds	r3, #1
 80087e4:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 80087e6:	4b1b      	ldr	r3, [pc, #108]	; (8008854 <LCD_ShowChar+0x158>)
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	88ba      	ldrh	r2, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d222      	bcs.n	8008836 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 80087f0:	88ba      	ldrh	r2, [r7, #4]
 80087f2:	897b      	ldrh	r3, [r7, #10]
 80087f4:	1ad2      	subs	r2, r2, r3
 80087f6:	78bb      	ldrb	r3, [r7, #2]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10a      	bne.n	8008812 <LCD_ShowChar+0x116>
				y = y0;
 80087fc:	897b      	ldrh	r3, [r7, #10]
 80087fe:	80bb      	strh	r3, [r7, #4]
				x++;
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	3301      	adds	r3, #1
 8008804:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8008806:	4b13      	ldr	r3, [pc, #76]	; (8008854 <LCD_ShowChar+0x158>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	88fa      	ldrh	r2, [r7, #6]
 800880c:	429a      	cmp	r2, r3
 800880e:	d307      	bcc.n	8008820 <LCD_ShowChar+0x124>
					return;	//超区域了
 8008810:	e012      	b.n	8008838 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	3301      	adds	r3, #1
 8008816:	73bb      	strb	r3, [r7, #14]
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b07      	cmp	r3, #7
 800881c:	d9c6      	bls.n	80087ac <LCD_ShowChar+0xb0>
 800881e:	e000      	b.n	8008822 <LCD_ShowChar+0x126>
				break;
 8008820:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8008822:	7b7b      	ldrb	r3, [r7, #13]
 8008824:	3301      	adds	r3, #1
 8008826:	737b      	strb	r3, [r7, #13]
 8008828:	7b7a      	ldrb	r2, [r7, #13]
 800882a:	7a7b      	ldrb	r3, [r7, #9]
 800882c:	429a      	cmp	r2, r3
 800882e:	d391      	bcc.n	8008754 <LCD_ShowChar+0x58>
 8008830:	e002      	b.n	8008838 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8008832:	bf00      	nop
 8008834:	e000      	b.n	8008838 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8008836:	bf00      	nop
			}
		}
	}
}
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	bd90      	pop	{r4, r7, pc}
 800883e:	bf00      	nop
 8008840:	0800acf4 	.word	0x0800acf4
 8008844:	0800b168 	.word	0x0800b168
 8008848:	0800b758 	.word	0x0800b758
 800884c:	200000b4 	.word	0x200000b4
 8008850:	20000006 	.word	0x20000006
 8008854:	20000494 	.word	0x20000494

08008858 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	460a      	mov	r2, r1
 8008862:	71fb      	strb	r3, [r7, #7]
 8008864:	4613      	mov	r3, r2
 8008866:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8008868:	2301      	movs	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
	while (n--)
 800886c:	e004      	b.n	8008878 <LCD_Pow+0x20>
		result *= m;
 800886e:	79fa      	ldrb	r2, [r7, #7]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	60fb      	str	r3, [r7, #12]
	while (n--)
 8008878:	79bb      	ldrb	r3, [r7, #6]
 800887a:	1e5a      	subs	r2, r3, #1
 800887c:	71ba      	strb	r2, [r7, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f5      	bne.n	800886e <LCD_Pow+0x16>
	return result;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr
	...

08008890 <LCD_ShowxNum>:
//mode:
//[7]:0 without leading zeros; 1 with leading zeros.
//[6:1]: reserve
//[0]: similar as it in LCD_ShowChar, 0 for wipe away and 1 for opposite
void LCD_ShowxNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size, uint8_t mode) {
 8008890:	b590      	push	{r4, r7, lr}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af02      	add	r7, sp, #8
 8008896:	60ba      	str	r2, [r7, #8]
 8008898:	461a      	mov	r2, r3
 800889a:	4603      	mov	r3, r0
 800889c:	81fb      	strh	r3, [r7, #14]
 800889e:	460b      	mov	r3, r1
 80088a0:	81bb      	strh	r3, [r7, #12]
 80088a2:	4613      	mov	r3, r2
 80088a4:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 80088aa:	2300      	movs	r3, #0
 80088ac:	75fb      	strb	r3, [r7, #23]
 80088ae:	e07e      	b.n	80089ae <LCD_ShowxNum+0x11e>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	4619      	mov	r1, r3
 80088be:	200a      	movs	r0, #10
 80088c0:	f7ff ffca 	bl	8008858 <LCD_Pow>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088cc:	4b3c      	ldr	r3, [pc, #240]	; (80089c0 <LCD_ShowxNum+0x130>)
 80088ce:	fba3 2301 	umull	r2, r3, r3, r1
 80088d2:	08da      	lsrs	r2, r3, #3
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	1aca      	subs	r2, r1, r3
 80088de:	4613      	mov	r3, r2
 80088e0:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 80088e2:	7dbb      	ldrb	r3, [r7, #22]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d143      	bne.n	8008970 <LCD_ShowxNum+0xe0>
 80088e8:	7dfa      	ldrb	r2, [r7, #23]
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	429a      	cmp	r2, r3
 80088f0:	da3e      	bge.n	8008970 <LCD_ShowxNum+0xe0>
			if (temp == 0) {
 80088f2:	7d7b      	ldrb	r3, [r7, #21]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d139      	bne.n	800896c <LCD_ShowxNum+0xdc>
				if (mode & 0X80)
 80088f8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da1a      	bge.n	8008936 <LCD_ShowxNum+0xa6>
					LCD_ShowChar(x + (size / 2) * t, y, '0', size, mode & 0X01);
 8008900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008904:	085b      	lsrs	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	7dfa      	ldrb	r2, [r7, #23]
 800890c:	b292      	uxth	r2, r2
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	b29a      	uxth	r2, r3
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	4413      	add	r3, r2
 8008918:	b298      	uxth	r0, r3
 800891a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008928:	89b9      	ldrh	r1, [r7, #12]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	2230      	movs	r2, #48	; 0x30
 8008930:	f7ff fee4 	bl	80086fc <LCD_ShowChar>
				else
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
				continue;
 8008934:	e038      	b.n	80089a8 <LCD_ShowxNum+0x118>
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
 8008936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	7dfa      	ldrb	r2, [r7, #23]
 8008942:	b292      	uxth	r2, r2
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	b29a      	uxth	r2, r3
 800894a:	89fb      	ldrh	r3, [r7, #14]
 800894c:	4413      	add	r3, r2
 800894e:	b298      	uxth	r0, r3
 8008950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800895e:	89b9      	ldrh	r1, [r7, #12]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4613      	mov	r3, r2
 8008964:	2220      	movs	r2, #32
 8008966:	f7ff fec9 	bl	80086fc <LCD_ShowChar>
				continue;
 800896a:	e01d      	b.n	80089a8 <LCD_ShowxNum+0x118>
			} else
				enshow = 1;
 800896c:	2301      	movs	r3, #1
 800896e:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, mode & 0X01);
 8008970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	7dfa      	ldrb	r2, [r7, #23]
 800897c:	b292      	uxth	r2, r2
 800897e:	fb02 f303 	mul.w	r3, r2, r3
 8008982:	b29a      	uxth	r2, r3
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	4413      	add	r3, r2
 8008988:	b298      	uxth	r0, r3
 800898a:	7d7b      	ldrb	r3, [r7, #21]
 800898c:	3330      	adds	r3, #48	; 0x30
 800898e:	b2da      	uxtb	r2, r3
 8008990:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800899e:	89b9      	ldrh	r1, [r7, #12]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	4623      	mov	r3, r4
 80089a4:	f7ff feaa 	bl	80086fc <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	3301      	adds	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
 80089ae:	7dfa      	ldrb	r2, [r7, #23]
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	f4ff af7c 	bcc.w	80088b0 <LCD_ShowxNum+0x20>
	}
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd90      	pop	{r4, r7, pc}
 80089c0:	cccccccd 	.word	0xcccccccd

080089c4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	461a      	mov	r2, r3
 80089d2:	4623      	mov	r3, r4
 80089d4:	80fb      	strh	r3, [r7, #6]
 80089d6:	4603      	mov	r3, r0
 80089d8:	80bb      	strh	r3, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	807b      	strh	r3, [r7, #2]
 80089de:	4613      	mov	r3, r2
 80089e0:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	73fb      	strb	r3, [r7, #15]
	width += x;
 80089e6:	887a      	ldrh	r2, [r7, #2]
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	4413      	add	r3, r2
 80089ec:	807b      	strh	r3, [r7, #2]
	height += y;
 80089ee:	883a      	ldrh	r2, [r7, #0]
 80089f0:	88bb      	ldrh	r3, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80089f6:	e025      	b.n	8008a44 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80089f8:	88fa      	ldrh	r2, [r7, #6]
 80089fa:	887b      	ldrh	r3, [r7, #2]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d307      	bcc.n	8008a10 <LCD_ShowString+0x4c>
			x = x0;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	80fb      	strh	r3, [r7, #6]
			y += size;
 8008a04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	88bb      	ldrh	r3, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8008a10:	88ba      	ldrh	r2, [r7, #4]
 8008a12:	883b      	ldrh	r3, [r7, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d21e      	bcs.n	8008a56 <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8008a20:	88b9      	ldrh	r1, [r7, #4]
 8008a22:	88f8      	ldrh	r0, [r7, #6]
 8008a24:	2300      	movs	r3, #0
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4623      	mov	r3, r4
 8008a2a:	f7ff fe67 	bl	80086fc <LCD_ShowChar>
		x += size / 2;
 8008a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]
		p++;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	3301      	adds	r3, #1
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b7e      	cmp	r3, #126	; 0x7e
 8008a4a:	d805      	bhi.n	8008a58 <LCD_ShowString+0x94>
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b1f      	cmp	r3, #31
 8008a52:	d8d1      	bhi.n	80089f8 <LCD_ShowString+0x34>
	}
}
 8008a54:	e000      	b.n	8008a58 <LCD_ShowString+0x94>
			break;	//退出
 8008a56:	bf00      	nop
}
 8008a58:	bf00      	nop
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <DrawElements>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DrawElements() { // Basic elements in the board
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af02      	add	r7, sp, #8
	LCD_Clear(WHITE);
 8008a66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008a6a:	f7ff fcab 	bl	80083c4 <LCD_Clear>
	POINT_COLOR = BLACK;
 8008a6e:	4b17      	ldr	r3, [pc, #92]	; (8008acc <DrawElements+0x6c>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	801a      	strh	r2, [r3, #0]
	LCD_DrawRectangle(5, 2, 155, 305);
 8008a74:	f240 1331 	movw	r3, #305	; 0x131
 8008a78:	229b      	movs	r2, #155	; 0x9b
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	2005      	movs	r0, #5
 8008a7e:	f7ff fe12 	bl	80086a6 <LCD_DrawRectangle>
	LCD_DrawRectangle(162, 2, 228, 62);
 8008a82:	233e      	movs	r3, #62	; 0x3e
 8008a84:	22e4      	movs	r2, #228	; 0xe4
 8008a86:	2102      	movs	r1, #2
 8008a88:	20a2      	movs	r0, #162	; 0xa2
 8008a8a:	f7ff fe0c 	bl	80086a6 <LCD_DrawRectangle>
	LCD_DrawRectangle(162, 67, 228, 132);
 8008a8e:	2384      	movs	r3, #132	; 0x84
 8008a90:	22e4      	movs	r2, #228	; 0xe4
 8008a92:	2143      	movs	r1, #67	; 0x43
 8008a94:	20a2      	movs	r0, #162	; 0xa2
 8008a96:	f7ff fe06 	bl	80086a6 <LCD_DrawRectangle>
	LCD_ShowString(165, 140, 100, 12, 12, (uint8_t*) "Score:");
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <DrawElements+0x70>)
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	2264      	movs	r2, #100	; 0x64
 8008aa6:	218c      	movs	r1, #140	; 0x8c
 8008aa8:	20a5      	movs	r0, #165	; 0xa5
 8008aaa:	f7ff ff8b 	bl	80089c4 <LCD_ShowString>
	LCD_ShowxNum(205, 140, score, 4, 12, 0);
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <DrawElements+0x74>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	230c      	movs	r3, #12
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	2304      	movs	r3, #4
 8008abe:	218c      	movs	r1, #140	; 0x8c
 8008ac0:	20cd      	movs	r0, #205	; 0xcd
 8008ac2:	f7ff fee5 	bl	8008890 <LCD_ShowxNum>
}
 8008ac6:	bf00      	nop
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	200000b4 	.word	0x200000b4
 8008ad0:	0800acb0 	.word	0x0800acb0
 8008ad4:	20000418 	.word	0x20000418

08008ad8 <CreateSquare>:

void CreateSquare() { // Generate random new born square
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	int index = rand() % 8 + 2;
 8008ade:	f002 f81f 	bl	800ab20 <rand>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	425a      	negs	r2, r3
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	f002 0207 	and.w	r2, r2, #7
 8008aee:	bf58      	it	pl
 8008af0:	4253      	negpl	r3, r2
 8008af2:	3302      	adds	r3, #2
 8008af4:	607b      	str	r3, [r7, #4]
	switch (index) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3b02      	subs	r3, #2
 8008afa:	2b07      	cmp	r3, #7
 8008afc:	f200 810c 	bhi.w	8008d18 <CreateSquare+0x240>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <CreateSquare+0x30>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b29 	.word	0x08008b29
 8008b0c:	08008b67 	.word	0x08008b67
 8008b10:	08008ba5 	.word	0x08008ba5
 8008b14:	08008be3 	.word	0x08008be3
 8008b18:	08008c21 	.word	0x08008c21
 8008b1c:	08008c5f 	.word	0x08008c5f
 8008b20:	08008c9d 	.word	0x08008c9d
 8008b24:	08008cdb 	.word	0x08008cdb
	case 2:
		nextSquare[0][0] = 1, nextSquare[0][1] = 1;
 8008b28:	4b7f      	ldr	r3, [pc, #508]	; (8008d28 <CreateSquare+0x250>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	4b7e      	ldr	r3, [pc, #504]	; (8008d28 <CreateSquare+0x250>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 1, nextSquare[0][3] = 1;
 8008b34:	4b7c      	ldr	r3, [pc, #496]	; (8008d28 <CreateSquare+0x250>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	609a      	str	r2, [r3, #8]
 8008b3a:	4b7b      	ldr	r3, [pc, #492]	; (8008d28 <CreateSquare+0x250>)
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 0, nextSquare[1][1] = 0;
 8008b40:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <CreateSquare+0x250>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	611a      	str	r2, [r3, #16]
 8008b46:	4b78      	ldr	r3, [pc, #480]	; (8008d28 <CreateSquare+0x250>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 0, nextSquare[1][3] = 0;
 8008b4c:	4b76      	ldr	r3, [pc, #472]	; (8008d28 <CreateSquare+0x250>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	619a      	str	r2, [r3, #24]
 8008b52:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <CreateSquare+0x250>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008b58:	4b74      	ldr	r3, [pc, #464]	; (8008d2c <CreateSquare+0x254>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 4;
 8008b5e:	4b73      	ldr	r3, [pc, #460]	; (8008d2c <CreateSquare+0x254>)
 8008b60:	2204      	movs	r2, #4
 8008b62:	60da      	str	r2, [r3, #12]
		break;
 8008b64:	e0d8      	b.n	8008d18 <CreateSquare+0x240>
	case 3:
		nextSquare[0][0] = 0, nextSquare[0][1] = 1;
 8008b66:	4b70      	ldr	r3, [pc, #448]	; (8008d28 <CreateSquare+0x250>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	4b6e      	ldr	r3, [pc, #440]	; (8008d28 <CreateSquare+0x250>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 1, nextSquare[0][3] = 0;
 8008b72:	4b6d      	ldr	r3, [pc, #436]	; (8008d28 <CreateSquare+0x250>)
 8008b74:	2201      	movs	r2, #1
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	4b6b      	ldr	r3, [pc, #428]	; (8008d28 <CreateSquare+0x250>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 0, nextSquare[1][1] = 1;
 8008b7e:	4b6a      	ldr	r3, [pc, #424]	; (8008d28 <CreateSquare+0x250>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	611a      	str	r2, [r3, #16]
 8008b84:	4b68      	ldr	r3, [pc, #416]	; (8008d28 <CreateSquare+0x250>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <CreateSquare+0x250>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	619a      	str	r2, [r3, #24]
 8008b90:	4b65      	ldr	r3, [pc, #404]	; (8008d28 <CreateSquare+0x250>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008b96:	4b65      	ldr	r3, [pc, #404]	; (8008d2c <CreateSquare+0x254>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 4;
 8008b9c:	4b63      	ldr	r3, [pc, #396]	; (8008d2c <CreateSquare+0x254>)
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	60da      	str	r2, [r3, #12]
		break;
 8008ba2:	e0b9      	b.n	8008d18 <CreateSquare+0x240>
	case 4:
		nextSquare[0][0] = 0, nextSquare[0][1] = 1;
 8008ba4:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <CreateSquare+0x250>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	4b5f      	ldr	r3, [pc, #380]	; (8008d28 <CreateSquare+0x250>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 0, nextSquare[0][3] = 0;
 8008bb0:	4b5d      	ldr	r3, [pc, #372]	; (8008d28 <CreateSquare+0x250>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
 8008bb6:	4b5c      	ldr	r3, [pc, #368]	; (8008d28 <CreateSquare+0x250>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 1, nextSquare[1][1] = 1;
 8008bbc:	4b5a      	ldr	r3, [pc, #360]	; (8008d28 <CreateSquare+0x250>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	611a      	str	r2, [r3, #16]
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <CreateSquare+0x250>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008bc8:	4b57      	ldr	r3, [pc, #348]	; (8008d28 <CreateSquare+0x250>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	619a      	str	r2, [r3, #24]
 8008bce:	4b56      	ldr	r3, [pc, #344]	; (8008d28 <CreateSquare+0x250>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008bd4:	4b55      	ldr	r3, [pc, #340]	; (8008d2c <CreateSquare+0x254>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 3;
 8008bda:	4b54      	ldr	r3, [pc, #336]	; (8008d2c <CreateSquare+0x254>)
 8008bdc:	2203      	movs	r2, #3
 8008bde:	60da      	str	r2, [r3, #12]
		break;
 8008be0:	e09a      	b.n	8008d18 <CreateSquare+0x240>
	case 5:
		nextSquare[0][0] = 0, nextSquare[0][1] = 0;
 8008be2:	4b51      	ldr	r3, [pc, #324]	; (8008d28 <CreateSquare+0x250>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <CreateSquare+0x250>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 1, nextSquare[0][3] = 0;
 8008bee:	4b4e      	ldr	r3, [pc, #312]	; (8008d28 <CreateSquare+0x250>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	609a      	str	r2, [r3, #8]
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <CreateSquare+0x250>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 1, nextSquare[1][1] = 1;
 8008bfa:	4b4b      	ldr	r3, [pc, #300]	; (8008d28 <CreateSquare+0x250>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	611a      	str	r2, [r3, #16]
 8008c00:	4b49      	ldr	r3, [pc, #292]	; (8008d28 <CreateSquare+0x250>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008c06:	4b48      	ldr	r3, [pc, #288]	; (8008d28 <CreateSquare+0x250>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	619a      	str	r2, [r3, #24]
 8008c0c:	4b46      	ldr	r3, [pc, #280]	; (8008d28 <CreateSquare+0x250>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008c12:	4b46      	ldr	r3, [pc, #280]	; (8008d2c <CreateSquare+0x254>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 3;
 8008c18:	4b44      	ldr	r3, [pc, #272]	; (8008d2c <CreateSquare+0x254>)
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	60da      	str	r2, [r3, #12]
		break;
 8008c1e:	e07b      	b.n	8008d18 <CreateSquare+0x240>
	case 6:
		nextSquare[0][0] = 1, nextSquare[0][1] = 0;
 8008c20:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <CreateSquare+0x250>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	4b40      	ldr	r3, [pc, #256]	; (8008d28 <CreateSquare+0x250>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 0, nextSquare[0][3] = 0;
 8008c2c:	4b3e      	ldr	r3, [pc, #248]	; (8008d28 <CreateSquare+0x250>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	609a      	str	r2, [r3, #8]
 8008c32:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <CreateSquare+0x250>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 1, nextSquare[1][1] = 1;
 8008c38:	4b3b      	ldr	r3, [pc, #236]	; (8008d28 <CreateSquare+0x250>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	611a      	str	r2, [r3, #16]
 8008c3e:	4b3a      	ldr	r3, [pc, #232]	; (8008d28 <CreateSquare+0x250>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008c44:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <CreateSquare+0x250>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	619a      	str	r2, [r3, #24]
 8008c4a:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <CreateSquare+0x250>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008c50:	4b36      	ldr	r3, [pc, #216]	; (8008d2c <CreateSquare+0x254>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 3;
 8008c56:	4b35      	ldr	r3, [pc, #212]	; (8008d2c <CreateSquare+0x254>)
 8008c58:	2203      	movs	r2, #3
 8008c5a:	60da      	str	r2, [r3, #12]
		break;
 8008c5c:	e05c      	b.n	8008d18 <CreateSquare+0x240>
	case 7:
		nextSquare[0][0] = 0, nextSquare[0][1] = 1;
 8008c5e:	4b32      	ldr	r3, [pc, #200]	; (8008d28 <CreateSquare+0x250>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <CreateSquare+0x250>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 1, nextSquare[0][3] = 0;
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <CreateSquare+0x250>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	4b2d      	ldr	r3, [pc, #180]	; (8008d28 <CreateSquare+0x250>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 1, nextSquare[1][1] = 1;
 8008c76:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <CreateSquare+0x250>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	611a      	str	r2, [r3, #16]
 8008c7c:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <CreateSquare+0x250>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 0, nextSquare[1][3] = 0;
 8008c82:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <CreateSquare+0x250>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	619a      	str	r2, [r3, #24]
 8008c88:	4b27      	ldr	r3, [pc, #156]	; (8008d28 <CreateSquare+0x250>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008c8e:	4b27      	ldr	r3, [pc, #156]	; (8008d2c <CreateSquare+0x254>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 3;
 8008c94:	4b25      	ldr	r3, [pc, #148]	; (8008d2c <CreateSquare+0x254>)
 8008c96:	2203      	movs	r2, #3
 8008c98:	60da      	str	r2, [r3, #12]
		break;
 8008c9a:	e03d      	b.n	8008d18 <CreateSquare+0x240>
	case 8:
		nextSquare[0][0] = 1, nextSquare[0][1] = 1;
 8008c9c:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <CreateSquare+0x250>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <CreateSquare+0x250>)
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 0, nextSquare[0][3] = 0;
 8008ca8:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <CreateSquare+0x250>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
 8008cae:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <CreateSquare+0x250>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 0, nextSquare[1][1] = 1;
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <CreateSquare+0x250>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <CreateSquare+0x250>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008cc0:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <CreateSquare+0x250>)
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	619a      	str	r2, [r3, #24]
 8008cc6:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <CreateSquare+0x250>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008ccc:	4b17      	ldr	r3, [pc, #92]	; (8008d2c <CreateSquare+0x254>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 3;
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <CreateSquare+0x254>)
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	60da      	str	r2, [r3, #12]
		break;
 8008cd8:	e01e      	b.n	8008d18 <CreateSquare+0x240>
	case 9:
		nextSquare[0][0] = 0, nextSquare[0][1] = 1;
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <CreateSquare+0x250>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <CreateSquare+0x250>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	605a      	str	r2, [r3, #4]
		nextSquare[0][2] = 1, nextSquare[0][3] = 0;
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <CreateSquare+0x250>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	609a      	str	r2, [r3, #8]
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <CreateSquare+0x250>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	60da      	str	r2, [r3, #12]
		nextSquare[1][0] = 0, nextSquare[1][1] = 1;
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <CreateSquare+0x250>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	611a      	str	r2, [r3, #16]
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <CreateSquare+0x250>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	615a      	str	r2, [r3, #20]
		nextSquare[1][2] = 1, nextSquare[1][3] = 0;
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <CreateSquare+0x250>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	619a      	str	r2, [r3, #24]
 8008d04:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <CreateSquare+0x250>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	61da      	str	r2, [r3, #28]
		cp_list[1][0] = 0;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <CreateSquare+0x254>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	609a      	str	r2, [r3, #8]
		cp_list[1][1] = 4;
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <CreateSquare+0x254>)
 8008d12:	2204      	movs	r2, #4
 8008d14:	60da      	str	r2, [r3, #12]
		break;
 8008d16:	bf00      	nop
	}
	id[2] = index;
 8008d18:	4a05      	ldr	r2, [pc, #20]	; (8008d30 <CreateSquare+0x258>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6093      	str	r3, [r2, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200003f8 	.word	0x200003f8
 8008d2c:	20000424 	.word	0x20000424
 8008d30:	20000010 	.word	0x20000010

08008d34 <Convert>:

void Convert() { // Convert id and cp_list
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
	id[0] = id[1];
 8008d38:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <Convert+0x3c>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a0c      	ldr	r2, [pc, #48]	; (8008d70 <Convert+0x3c>)
 8008d3e:	6013      	str	r3, [r2, #0]
	cp_row = cp_list[0][0];
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <Convert+0x40>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <Convert+0x44>)
 8008d46:	6013      	str	r3, [r2, #0]
	cp_column = cp_list[0][1];
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <Convert+0x40>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4a0b      	ldr	r2, [pc, #44]	; (8008d7c <Convert+0x48>)
 8008d4e:	6013      	str	r3, [r2, #0]
	id[1] = id[2];
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <Convert+0x3c>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	4a06      	ldr	r2, [pc, #24]	; (8008d70 <Convert+0x3c>)
 8008d56:	6053      	str	r3, [r2, #4]
	cp_list[0][0] = cp_list[1][0];
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <Convert+0x40>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	4a05      	ldr	r2, [pc, #20]	; (8008d74 <Convert+0x40>)
 8008d5e:	6013      	str	r3, [r2, #0]
	cp_list[0][1] = cp_list[1][1];
 8008d60:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <Convert+0x40>)
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	4a03      	ldr	r2, [pc, #12]	; (8008d74 <Convert+0x40>)
 8008d66:	6053      	str	r3, [r2, #4]
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr
 8008d70:	20000010 	.word	0x20000010
 8008d74:	20000424 	.word	0x20000424
 8008d78:	2000041c 	.word	0x2000041c
 8008d7c:	20000420 	.word	0x20000420

08008d80 <BringNexttoBoard>:

void BringNexttoBoard() {  // Bring the next block to the board
 8008d80:	b490      	push	{r4, r7}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
	int row = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
	int column = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
	for (row = 0; row < 2; row++) {
 8008d8e:	2300      	movs	r3, #0
 8008d90:	607b      	str	r3, [r7, #4]
 8008d92:	e01d      	b.n	8008dd0 <BringNexttoBoard+0x50>
		for (column = 0; column < 4; column++) {
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	e014      	b.n	8008dc4 <BringNexttoBoard+0x44>
			board[row][column + 3] = square[row][column];
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	1cd8      	adds	r0, r3, #3
 8008d9e:	4910      	ldr	r1, [pc, #64]	; (8008de0 <BringNexttoBoard+0x60>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	009a      	lsls	r2, r3, #2
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008dac:	4c0d      	ldr	r4, [pc, #52]	; (8008de4 <BringNexttoBoard+0x64>)
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	4403      	add	r3, r0
 8008dba:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		for (column = 0; column < 4; column++) {
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	dde7      	ble.n	8008d9a <BringNexttoBoard+0x1a>
	for (row = 0; row < 2; row++) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	607b      	str	r3, [r7, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	ddde      	ble.n	8008d94 <BringNexttoBoard+0x14>
		}
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc90      	pop	{r4, r7}
 8008dde:	4770      	bx	lr
 8008de0:	200003d8 	.word	0x200003d8
 8008de4:	200000b8 	.word	0x200000b8

08008de8 <DrawNewBornBlock>:

void DrawNewBornBlock() { // Draw the new born block
 8008de8:	b5b0      	push	{r4, r5, r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af02      	add	r7, sp, #8
	int row = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]
	int col = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
	for (row = 0; row < 2; row++) {
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	e032      	b.n	8008e62 <DrawNewBornBlock+0x7a>
		for (col = 0; col < 4; col++) {
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e029      	b.n	8008e56 <DrawNewBornBlock+0x6e>
			int x1 = col * cell_size + 165;
 8008e02:	4b7e      	ldr	r3, [pc, #504]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	fb02 f303 	mul.w	r3, r2, r3
 8008e0c:	33a5      	adds	r3, #165	; 0xa5
 8008e0e:	607b      	str	r3, [r7, #4]
			int y1 = row * cell_size + 85;
 8008e10:	4b7a      	ldr	r3, [pc, #488]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	fb02 f303 	mul.w	r3, r2, r3
 8008e1a:	3355      	adds	r3, #85	; 0x55
 8008e1c:	603b      	str	r3, [r7, #0]
			LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size, WHITE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	b298      	uxth	r0, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	b299      	uxth	r1, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	4b74      	ldr	r3, [pc, #464]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4413      	add	r3, r2
 8008e32:	b29c      	uxth	r4, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	4b70      	ldr	r3, [pc, #448]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4413      	add	r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	f7ff fb1c 	bl	8008488 <LCD_Fill>
		for (col = 0; col < 4; col++) {
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	3301      	adds	r3, #1
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	ddd2      	ble.n	8008e02 <DrawNewBornBlock+0x1a>
	for (row = 0; row < 2; row++) {
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	ddc9      	ble.n	8008dfc <DrawNewBornBlock+0x14>
		}
	}
	for (row = 0; row < 2; row++) {
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e0a7      	b.n	8008fbe <DrawNewBornBlock+0x1d6>
		for (col = 0; col < 4; col++) {
 8008e6e:	2300      	movs	r3, #0
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	e09d      	b.n	8008fb0 <DrawNewBornBlock+0x1c8>
			if (nextSquare[row][col] == 1) {
 8008e74:	4962      	ldr	r1, [pc, #392]	; (8009000 <DrawNewBornBlock+0x218>)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	009a      	lsls	r2, r3, #2
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	f040 8091 	bne.w	8008faa <DrawNewBornBlock+0x1c2>
				int x1 = col * cell_size + 165;
 8008e88:	4b5c      	ldr	r3, [pc, #368]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
 8008e92:	33a5      	adds	r3, #165	; 0xa5
 8008e94:	60fb      	str	r3, [r7, #12]
				int y1 = row * cell_size + 85;
 8008e96:	4b59      	ldr	r3, [pc, #356]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ea0:	3355      	adds	r3, #85	; 0x55
 8008ea2:	60bb      	str	r3, [r7, #8]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	b298      	uxth	r0, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	b299      	uxth	r1, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b52      	ldr	r3, [pc, #328]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	b29c      	uxth	r4, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	4b4f      	ldr	r3, [pc, #316]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	b29d      	uxth	r5, r3
						colortable[id[2]]);
 8008ec8:	4b4e      	ldr	r3, [pc, #312]	; (8009004 <DrawNewBornBlock+0x21c>)
 8008eca:	689b      	ldr	r3, [r3, #8]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 8008ecc:	4a4e      	ldr	r2, [pc, #312]	; (8009008 <DrawNewBornBlock+0x220>)
 8008ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	f7ff fad6 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + cell_size, y1 + 1, BLACK);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	b298      	uxth	r0, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	b299      	uxth	r1, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	4b44      	ldr	r3, [pc, #272]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b29c      	uxth	r4, r3
 8008efa:	2300      	movs	r3, #0
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4623      	mov	r3, r4
 8008f00:	f7ff fac2 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + 1, y1 + cell_size, BLACK);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	b298      	uxth	r0, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	b299      	uxth	r1, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3301      	adds	r3, #1
 8008f12:	b29c      	uxth	r4, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	4b38      	ldr	r3, [pc, #224]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4413      	add	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4613      	mov	r3, r2
 8008f28:	4622      	mov	r2, r4
 8008f2a:	f7ff faad 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1 + cell_size - 1, y1, x1 + cell_size, y1 + cell_size,
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	4b32      	ldr	r3, [pc, #200]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	4413      	add	r3, r2
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b298      	uxth	r0, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	b299      	uxth	r1, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	b29c      	uxth	r4, r3
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	2300      	movs	r3, #0
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	4613      	mov	r3, r2
 8008f66:	4622      	mov	r2, r4
 8008f68:	f7ff fa8e 	bl	8008488 <LCD_Fill>
								BLACK);
				LCD_Fill(x1, y1 + cell_size - 1, x1 + cell_size, y1 + cell_size,
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	b298      	uxth	r0, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	4b21      	ldr	r3, [pc, #132]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b299      	uxth	r1, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	b29c      	uxth	r4, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <DrawNewBornBlock+0x214>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	f7ff fa6f 	bl	8008488 <LCD_Fill>
		for (col = 0; col < 4; col++) {
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	f77f af5e 	ble.w	8008e74 <DrawNewBornBlock+0x8c>
	for (row = 0; row < 2; row++) {
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	f77f af54 	ble.w	8008e6e <DrawNewBornBlock+0x86>
								BLACK);
			}
		}
	}
	if (id[2] == 9) { // TNT
 8008fc6:	4b0f      	ldr	r3, [pc, #60]	; (8009004 <DrawNewBornBlock+0x21c>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b09      	cmp	r3, #9
 8008fcc:	d111      	bne.n	8008ff2 <DrawNewBornBlock+0x20a>
		LCD_Fill(188, 93, 202, 98, RED);
 8008fce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2362      	movs	r3, #98	; 0x62
 8008fd6:	22ca      	movs	r2, #202	; 0xca
 8008fd8:	215d      	movs	r1, #93	; 0x5d
 8008fda:	20bc      	movs	r0, #188	; 0xbc
 8008fdc:	f7ff fa54 	bl	8008488 <LCD_Fill>
		LCD_Fill(193, 98, 197, 110, RED);
 8008fe0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	236e      	movs	r3, #110	; 0x6e
 8008fe8:	22c5      	movs	r2, #197	; 0xc5
 8008fea:	2162      	movs	r1, #98	; 0x62
 8008fec:	20c1      	movs	r0, #193	; 0xc1
 8008fee:	f7ff fa4b 	bl	8008488 <LCD_Fill>
	}
}
 8008ff2:	bf00      	nop
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000008 	.word	0x20000008
 8009000:	200003f8 	.word	0x200003f8
 8009004:	20000010 	.word	0x20000010
 8009008:	2000001c 	.word	0x2000001c

0800900c <DrawNextBlock>:

void DrawNextBlock() {  // Draw the next block
 800900c:	b5b0      	push	{r4, r5, r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af02      	add	r7, sp, #8
	int row = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
	int col = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]
	for (row = 0; row < 2; row++) {
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e019      	b.n	8009054 <DrawNextBlock+0x48>
		for (col = 0; col < 4; col++) {
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	e010      	b.n	8009048 <DrawNextBlock+0x3c>
			square[row][col] = nextSquare[row][col];
 8009026:	498e      	ldr	r1, [pc, #568]	; (8009260 <DrawNextBlock+0x254>)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	009a      	lsls	r2, r3, #2
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	4413      	add	r3, r2
 8009030:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009034:	488b      	ldr	r0, [pc, #556]	; (8009264 <DrawNextBlock+0x258>)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	0099      	lsls	r1, r3, #2
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	440b      	add	r3, r1
 800903e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (col = 0; col < 4; col++) {
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3301      	adds	r3, #1
 8009046:	613b      	str	r3, [r7, #16]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b03      	cmp	r3, #3
 800904c:	ddeb      	ble.n	8009026 <DrawNextBlock+0x1a>
	for (row = 0; row < 2; row++) {
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	3301      	adds	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b01      	cmp	r3, #1
 8009058:	dde2      	ble.n	8009020 <DrawNextBlock+0x14>
		}
	}
	for (row = 0; row < 2; row++) {
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	e032      	b.n	80090c6 <DrawNextBlock+0xba>
		for (col = 0; col < 4; col++) {
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	e029      	b.n	80090ba <DrawNextBlock+0xae>
			int x1 = col * cell_size + 165;
 8009066:	4b80      	ldr	r3, [pc, #512]	; (8009268 <DrawNextBlock+0x25c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	fb02 f303 	mul.w	r3, r2, r3
 8009070:	33a5      	adds	r3, #165	; 0xa5
 8009072:	607b      	str	r3, [r7, #4]
			int y1 = row * cell_size + 20;
 8009074:	4b7c      	ldr	r3, [pc, #496]	; (8009268 <DrawNextBlock+0x25c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	fb02 f303 	mul.w	r3, r2, r3
 800907e:	3314      	adds	r3, #20
 8009080:	603b      	str	r3, [r7, #0]
			LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size, WHITE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	b298      	uxth	r0, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	b299      	uxth	r1, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	b29a      	uxth	r2, r3
 800908e:	4b76      	ldr	r3, [pc, #472]	; (8009268 <DrawNextBlock+0x25c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	b29b      	uxth	r3, r3
 8009094:	4413      	add	r3, r2
 8009096:	b29c      	uxth	r4, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b72      	ldr	r3, [pc, #456]	; (8009268 <DrawNextBlock+0x25c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4413      	add	r3, r2
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	4622      	mov	r2, r4
 80090b0:	f7ff f9ea 	bl	8008488 <LCD_Fill>
		for (col = 0; col < 4; col++) {
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3301      	adds	r3, #1
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	ddd2      	ble.n	8009066 <DrawNextBlock+0x5a>
	for (row = 0; row < 2; row++) {
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	3301      	adds	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	ddc9      	ble.n	8009060 <DrawNextBlock+0x54>
		}
	}
	for (row = 0; row < 2; row++) {
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e0a7      	b.n	8009222 <DrawNextBlock+0x216>
		for (col = 0; col < 4; col++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	e09d      	b.n	8009214 <DrawNextBlock+0x208>
			if (square[row][col] == 1) {
 80090d8:	4962      	ldr	r1, [pc, #392]	; (8009264 <DrawNextBlock+0x258>)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	009a      	lsls	r2, r3, #2
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4413      	add	r3, r2
 80090e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	f040 8091 	bne.w	800920e <DrawNextBlock+0x202>
				int x1 = col * cell_size + 165;
 80090ec:	4b5e      	ldr	r3, [pc, #376]	; (8009268 <DrawNextBlock+0x25c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	33a5      	adds	r3, #165	; 0xa5
 80090f8:	60fb      	str	r3, [r7, #12]
				int y1 = row * cell_size + 20;
 80090fa:	4b5b      	ldr	r3, [pc, #364]	; (8009268 <DrawNextBlock+0x25c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	fb02 f303 	mul.w	r3, r2, r3
 8009104:	3314      	adds	r3, #20
 8009106:	60bb      	str	r3, [r7, #8]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	b298      	uxth	r0, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	b299      	uxth	r1, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	b29a      	uxth	r2, r3
 8009114:	4b54      	ldr	r3, [pc, #336]	; (8009268 <DrawNextBlock+0x25c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	4413      	add	r3, r2
 800911c:	b29c      	uxth	r4, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	b29a      	uxth	r2, r3
 8009122:	4b51      	ldr	r3, [pc, #324]	; (8009268 <DrawNextBlock+0x25c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	4413      	add	r3, r2
 800912a:	b29d      	uxth	r5, r3
						colortable[id[1]]);
 800912c:	4b4f      	ldr	r3, [pc, #316]	; (800926c <DrawNextBlock+0x260>)
 800912e:	685b      	ldr	r3, [r3, #4]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 8009130:	4a4f      	ldr	r2, [pc, #316]	; (8009270 <DrawNextBlock+0x264>)
 8009132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	462b      	mov	r3, r5
 800913a:	4622      	mov	r2, r4
 800913c:	f7ff f9a4 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + cell_size, y1 + 1, BLACK);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	b298      	uxth	r0, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	b299      	uxth	r1, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	b29a      	uxth	r2, r3
 800914c:	4b46      	ldr	r3, [pc, #280]	; (8009268 <DrawNextBlock+0x25c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	4413      	add	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	b29b      	uxth	r3, r3
 800915a:	3301      	adds	r3, #1
 800915c:	b29c      	uxth	r4, r3
 800915e:	2300      	movs	r3, #0
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4623      	mov	r3, r4
 8009164:	f7ff f990 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + 1, y1 + cell_size, BLACK);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	b298      	uxth	r0, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	b299      	uxth	r1, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	b29b      	uxth	r3, r3
 8009174:	3301      	adds	r3, #1
 8009176:	b29c      	uxth	r4, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	b29a      	uxth	r2, r3
 800917c:	4b3a      	ldr	r3, [pc, #232]	; (8009268 <DrawNextBlock+0x25c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	4413      	add	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	4622      	mov	r2, r4
 800918e:	f7ff f97b 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1 + cell_size - 1, y1, x1 + cell_size, y1 + cell_size,
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	b29a      	uxth	r2, r3
 8009196:	4b34      	ldr	r3, [pc, #208]	; (8009268 <DrawNextBlock+0x25c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	4413      	add	r3, r2
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b298      	uxth	r0, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	b299      	uxth	r1, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <DrawNextBlock+0x25c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	b29c      	uxth	r4, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	4b2b      	ldr	r3, [pc, #172]	; (8009268 <DrawNextBlock+0x25c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4413      	add	r3, r2
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	4622      	mov	r2, r4
 80091cc:	f7ff f95c 	bl	8008488 <LCD_Fill>
								BLACK);
				LCD_Fill(x1, y1 + cell_size - 1, x1 + cell_size, y1 + cell_size,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	b298      	uxth	r0, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	4b23      	ldr	r3, [pc, #140]	; (8009268 <DrawNextBlock+0x25c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4413      	add	r3, r2
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b299      	uxth	r1, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <DrawNextBlock+0x25c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	b29c      	uxth	r4, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <DrawNextBlock+0x25c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4413      	add	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	2300      	movs	r3, #0
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	4622      	mov	r2, r4
 800920a:	f7ff f93d 	bl	8008488 <LCD_Fill>
		for (col = 0; col < 4; col++) {
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	3301      	adds	r3, #1
 8009212:	613b      	str	r3, [r7, #16]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b03      	cmp	r3, #3
 8009218:	f77f af5e 	ble.w	80090d8 <DrawNextBlock+0xcc>
	for (row = 0; row < 2; row++) {
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	3301      	adds	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b01      	cmp	r3, #1
 8009226:	f77f af54 	ble.w	80090d2 <DrawNextBlock+0xc6>
								BLACK);
			}
		}
	}
	if (id[1] == 9) {
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <DrawNextBlock+0x260>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2b09      	cmp	r3, #9
 8009230:	d111      	bne.n	8009256 <DrawNextBlock+0x24a>
		LCD_Fill(188, 28, 202, 33, RED);
 8009232:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2321      	movs	r3, #33	; 0x21
 800923a:	22ca      	movs	r2, #202	; 0xca
 800923c:	211c      	movs	r1, #28
 800923e:	20bc      	movs	r0, #188	; 0xbc
 8009240:	f7ff f922 	bl	8008488 <LCD_Fill>
		LCD_Fill(193, 33, 197, 45, RED);
 8009244:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	232d      	movs	r3, #45	; 0x2d
 800924c:	22c5      	movs	r2, #197	; 0xc5
 800924e:	2121      	movs	r1, #33	; 0x21
 8009250:	20c1      	movs	r0, #193	; 0xc1
 8009252:	f7ff f919 	bl	8008488 <LCD_Fill>
	}
}
 8009256:	bf00      	nop
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bdb0      	pop	{r4, r5, r7, pc}
 800925e:	bf00      	nop
 8009260:	200003f8 	.word	0x200003f8
 8009264:	200003d8 	.word	0x200003d8
 8009268:	20000008 	.word	0x20000008
 800926c:	20000010 	.word	0x20000010
 8009270:	2000001c 	.word	0x2000001c

08009274 <DrawBlocks>:

void DrawBlocks() { // Draw all the blocks on the board
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	b08f      	sub	sp, #60	; 0x3c
 8009278:	af02      	add	r7, sp, #8
	int xtnt = 0, ytnt = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800927e:	2300      	movs	r3, #0
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
	int row = 0, col = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	2300      	movs	r3, #0
 8009288:	623b      	str	r3, [r7, #32]
	int num = 0, count = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	2300      	movs	r3, #0
 8009290:	61bb      	str	r3, [r7, #24]
	for (num = 0; num < 4; num++) {
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	e030      	b.n	80092fa <DrawBlocks+0x86>
		int x1 = last_position[num][1] * cell_size + 5;
 8009298:	4a75      	ldr	r2, [pc, #468]	; (8009470 <DrawBlocks+0x1fc>)
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	4413      	add	r3, r2
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4a74      	ldr	r2, [pc, #464]	; (8009474 <DrawBlocks+0x200>)
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	fb02 f303 	mul.w	r3, r2, r3
 80092aa:	3305      	adds	r3, #5
 80092ac:	607b      	str	r3, [r7, #4]
		int y1 = last_position[num][0] * cell_size + 5;
 80092ae:	4a70      	ldr	r2, [pc, #448]	; (8009470 <DrawBlocks+0x1fc>)
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092b6:	4a6f      	ldr	r2, [pc, #444]	; (8009474 <DrawBlocks+0x200>)
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	3305      	adds	r3, #5
 80092c0:	603b      	str	r3, [r7, #0]
		LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size, WHITE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	b298      	uxth	r0, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	b299      	uxth	r1, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	4b69      	ldr	r3, [pc, #420]	; (8009474 <DrawBlocks+0x200>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	b29c      	uxth	r4, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	4b65      	ldr	r3, [pc, #404]	; (8009474 <DrawBlocks+0x200>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	4622      	mov	r2, r4
 80092f0:	f7ff f8ca 	bl	8008488 <LCD_Fill>
	for (num = 0; num < 4; num++) {
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	ddcb      	ble.n	8009298 <DrawBlocks+0x24>
	}
	for (row = 0; row < 20; row++) {
 8009300:	2300      	movs	r3, #0
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
 8009304:	e16f      	b.n	80095e6 <DrawBlocks+0x372>
		for (col = 0; col < 10; col++) {
 8009306:	2300      	movs	r3, #0
 8009308:	623b      	str	r3, [r7, #32]
 800930a:	e165      	b.n	80095d8 <DrawBlocks+0x364>
			if (board[row][col] == 1) {
 800930c:	495a      	ldr	r1, [pc, #360]	; (8009478 <DrawBlocks+0x204>)
 800930e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	4413      	add	r3, r2
 800931c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009320:	2b01      	cmp	r3, #1
 8009322:	f040 80af 	bne.w	8009484 <DrawBlocks+0x210>
				// living block
				int x1 = col * cell_size + 5;
 8009326:	4b53      	ldr	r3, [pc, #332]	; (8009474 <DrawBlocks+0x200>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6a3a      	ldr	r2, [r7, #32]
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	3305      	adds	r3, #5
 8009332:	60fb      	str	r3, [r7, #12]
				int y1 = row * cell_size + 5;
 8009334:	4b4f      	ldr	r3, [pc, #316]	; (8009474 <DrawBlocks+0x200>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933a:	fb02 f303 	mul.w	r3, r2, r3
 800933e:	3305      	adds	r3, #5
 8009340:	60bb      	str	r3, [r7, #8]
				xtnt = x1;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
				ytnt = y1;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	b298      	uxth	r0, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	b299      	uxth	r1, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	b29a      	uxth	r2, r3
 8009356:	4b47      	ldr	r3, [pc, #284]	; (8009474 <DrawBlocks+0x200>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	4413      	add	r3, r2
 800935e:	b29c      	uxth	r4, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	b29a      	uxth	r2, r3
 8009364:	4b43      	ldr	r3, [pc, #268]	; (8009474 <DrawBlocks+0x200>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	4413      	add	r3, r2
 800936c:	b29d      	uxth	r5, r3
						colortable[id[0]]);
 800936e:	4b43      	ldr	r3, [pc, #268]	; (800947c <DrawBlocks+0x208>)
 8009370:	681b      	ldr	r3, [r3, #0]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 8009372:	4a43      	ldr	r2, [pc, #268]	; (8009480 <DrawBlocks+0x20c>)
 8009374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	462b      	mov	r3, r5
 800937c:	4622      	mov	r2, r4
 800937e:	f7ff f883 	bl	8008488 <LCD_Fill>
				last_position[count][1] = col;
 8009382:	4a3b      	ldr	r2, [pc, #236]	; (8009470 <DrawBlocks+0x1fc>)
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	605a      	str	r2, [r3, #4]
				last_position[count][0] = row;
 800938e:	4938      	ldr	r1, [pc, #224]	; (8009470 <DrawBlocks+0x1fc>)
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009394:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				count++;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	3301      	adds	r3, #1
 800939c:	61bb      	str	r3, [r7, #24]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + 1, BLACK);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	b298      	uxth	r0, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	b299      	uxth	r1, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	4b32      	ldr	r3, [pc, #200]	; (8009474 <DrawBlocks+0x200>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	4413      	add	r3, r2
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	3301      	adds	r3, #1
 80093ba:	b29c      	uxth	r4, r3
 80093bc:	2300      	movs	r3, #0
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4623      	mov	r3, r4
 80093c2:	f7ff f861 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + 1, y1 + cell_size, BLACK);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	b298      	uxth	r0, r3
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	b299      	uxth	r1, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	3301      	adds	r3, #1
 80093d4:	b29c      	uxth	r4, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	b29a      	uxth	r2, r3
 80093da:	4b26      	ldr	r3, [pc, #152]	; (8009474 <DrawBlocks+0x200>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4413      	add	r3, r2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4613      	mov	r3, r2
 80093ea:	4622      	mov	r2, r4
 80093ec:	f7ff f84c 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1 + cell_size - 1, y1, x1 + cell_size, y1 + cell_size,
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	4b1f      	ldr	r3, [pc, #124]	; (8009474 <DrawBlocks+0x200>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b298      	uxth	r0, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	b299      	uxth	r1, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	b29a      	uxth	r2, r3
 800940a:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <DrawBlocks+0x200>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	4413      	add	r3, r2
 8009412:	b29c      	uxth	r4, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	b29a      	uxth	r2, r3
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <DrawBlocks+0x200>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	4413      	add	r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	2300      	movs	r3, #0
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4613      	mov	r3, r2
 8009428:	4622      	mov	r2, r4
 800942a:	f7ff f82d 	bl	8008488 <LCD_Fill>
				BLACK);
				LCD_Fill(x1, y1 + cell_size - 1, x1 + cell_size, y1 + cell_size,
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	b298      	uxth	r0, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	b29a      	uxth	r2, r3
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <DrawBlocks+0x200>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	4413      	add	r3, r2
 800943e:	b29b      	uxth	r3, r3
 8009440:	3b01      	subs	r3, #1
 8009442:	b299      	uxth	r1, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	b29a      	uxth	r2, r3
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <DrawBlocks+0x200>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	4413      	add	r3, r2
 8009450:	b29c      	uxth	r4, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	b29a      	uxth	r2, r3
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <DrawBlocks+0x200>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	4413      	add	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	2300      	movs	r3, #0
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	4622      	mov	r2, r4
 8009468:	f7ff f80e 	bl	8008488 <LCD_Fill>
 800946c:	e0b1      	b.n	80095d2 <DrawBlocks+0x35e>
 800946e:	bf00      	nop
 8009470:	20000434 	.word	0x20000434
 8009474:	20000008 	.word	0x20000008
 8009478:	200000b8 	.word	0x200000b8
 800947c:	20000010 	.word	0x20000010
 8009480:	2000001c 	.word	0x2000001c
				BLACK);
			} else if (board[row][col] > 1) {
 8009484:	4977      	ldr	r1, [pc, #476]	; (8009664 <DrawBlocks+0x3f0>)
 8009486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	4413      	add	r3, r2
 8009494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009498:	2b01      	cmp	r3, #1
 800949a:	f340 809a 	ble.w	80095d2 <DrawBlocks+0x35e>
				// dead block
				int x1 = col * cell_size + 5;
 800949e:	4b72      	ldr	r3, [pc, #456]	; (8009668 <DrawBlocks+0x3f4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	fb02 f303 	mul.w	r3, r2, r3
 80094a8:	3305      	adds	r3, #5
 80094aa:	617b      	str	r3, [r7, #20]
				int y1 = row * cell_size + 5;
 80094ac:	4b6e      	ldr	r3, [pc, #440]	; (8009668 <DrawBlocks+0x3f4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	3305      	adds	r3, #5
 80094b8:	613b      	str	r3, [r7, #16]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	b298      	uxth	r0, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	b29c      	uxth	r4, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	4b68      	ldr	r3, [pc, #416]	; (8009668 <DrawBlocks+0x3f4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	b29d      	uxth	r5, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	4b64      	ldr	r3, [pc, #400]	; (8009668 <DrawBlocks+0x3f4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	4413      	add	r3, r2
 80094dc:	b29e      	uxth	r6, r3
						colortable[board[row][col]]);
 80094de:	4961      	ldr	r1, [pc, #388]	; (8009664 <DrawBlocks+0x3f0>)
 80094e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	6a3a      	ldr	r2, [r7, #32]
 80094ec:	4413      	add	r3, r2
 80094ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 80094f2:	4a5e      	ldr	r2, [pc, #376]	; (800966c <DrawBlocks+0x3f8>)
 80094f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	4633      	mov	r3, r6
 80094fc:	462a      	mov	r2, r5
 80094fe:	4621      	mov	r1, r4
 8009500:	f7fe ffc2 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + cell_size, y1 + 1, BLACK);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	b298      	uxth	r0, r3
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	b299      	uxth	r1, r3
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	b29a      	uxth	r2, r3
 8009510:	4b55      	ldr	r3, [pc, #340]	; (8009668 <DrawBlocks+0x3f4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	4413      	add	r3, r2
 8009518:	b29a      	uxth	r2, r3
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	b29b      	uxth	r3, r3
 800951e:	3301      	adds	r3, #1
 8009520:	b29c      	uxth	r4, r3
 8009522:	2300      	movs	r3, #0
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	4623      	mov	r3, r4
 8009528:	f7fe ffae 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1, y1, x1 + 1, y1 + cell_size, BLACK);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	b298      	uxth	r0, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	b299      	uxth	r1, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	b29b      	uxth	r3, r3
 8009538:	3301      	adds	r3, #1
 800953a:	b29c      	uxth	r4, r3
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	b29a      	uxth	r2, r3
 8009540:	4b49      	ldr	r3, [pc, #292]	; (8009668 <DrawBlocks+0x3f4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4413      	add	r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	2300      	movs	r3, #0
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	4622      	mov	r2, r4
 8009552:	f7fe ff99 	bl	8008488 <LCD_Fill>
				LCD_Fill(x1 + cell_size - 1, y1, x1 + cell_size, y1 + cell_size,
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	b29a      	uxth	r2, r3
 800955a:	4b43      	ldr	r3, [pc, #268]	; (8009668 <DrawBlocks+0x3f4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	4413      	add	r3, r2
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b01      	subs	r3, #1
 8009566:	b298      	uxth	r0, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	b299      	uxth	r1, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	b29a      	uxth	r2, r3
 8009570:	4b3d      	ldr	r3, [pc, #244]	; (8009668 <DrawBlocks+0x3f4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	4413      	add	r3, r2
 8009578:	b29c      	uxth	r4, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	b29a      	uxth	r2, r3
 800957e:	4b3a      	ldr	r3, [pc, #232]	; (8009668 <DrawBlocks+0x3f4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	4413      	add	r3, r2
 8009586:	b29a      	uxth	r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	4622      	mov	r2, r4
 8009590:	f7fe ff7a 	bl	8008488 <LCD_Fill>
				BLACK);
				LCD_Fill(x1, y1 + cell_size - 1, x1 + cell_size, y1 + cell_size,
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	b298      	uxth	r0, r3
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	b29a      	uxth	r2, r3
 800959c:	4b32      	ldr	r3, [pc, #200]	; (8009668 <DrawBlocks+0x3f4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b299      	uxth	r1, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <DrawBlocks+0x3f4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	b29c      	uxth	r4, r3
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	4b2a      	ldr	r3, [pc, #168]	; (8009668 <DrawBlocks+0x3f4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	2300      	movs	r3, #0
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	4613      	mov	r3, r2
 80095cc:	4622      	mov	r2, r4
 80095ce:	f7fe ff5b 	bl	8008488 <LCD_Fill>
		for (col = 0; col < 10; col++) {
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	3301      	adds	r3, #1
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2b09      	cmp	r3, #9
 80095dc:	f77f ae96 	ble.w	800930c <DrawBlocks+0x98>
	for (row = 0; row < 20; row++) {
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	3301      	adds	r3, #1
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	2b13      	cmp	r3, #19
 80095ea:	f77f ae8c 	ble.w	8009306 <DrawBlocks+0x92>
				BLACK);
			}
		}
	}
	if (id[0] == 9) {
 80095ee:	4b20      	ldr	r3, [pc, #128]	; (8009670 <DrawBlocks+0x3fc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b09      	cmp	r3, #9
 80095f4:	d131      	bne.n	800965a <DrawBlocks+0x3e6>
		xtnt = xtnt - 15;
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	3b0f      	subs	r3, #15
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		ytnt = ytnt - 15;
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	3b0f      	subs	r3, #15
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
		LCD_Fill(xtnt + 8, ytnt + 8, xtnt + 22, ytnt + 13, RED);
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	b29b      	uxth	r3, r3
 8009606:	3308      	adds	r3, #8
 8009608:	b298      	uxth	r0, r3
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	b29b      	uxth	r3, r3
 800960e:	3308      	adds	r3, #8
 8009610:	b299      	uxth	r1, r3
 8009612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009614:	b29b      	uxth	r3, r3
 8009616:	3316      	adds	r3, #22
 8009618:	b29a      	uxth	r2, r3
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	b29b      	uxth	r3, r3
 800961e:	330d      	adds	r3, #13
 8009620:	b29c      	uxth	r4, r3
 8009622:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	4623      	mov	r3, r4
 800962a:	f7fe ff2d 	bl	8008488 <LCD_Fill>
		LCD_Fill(xtnt + 13, ytnt + 13, xtnt + 17, ytnt + 25, RED);
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	b29b      	uxth	r3, r3
 8009632:	330d      	adds	r3, #13
 8009634:	b298      	uxth	r0, r3
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	b29b      	uxth	r3, r3
 800963a:	330d      	adds	r3, #13
 800963c:	b299      	uxth	r1, r3
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	b29b      	uxth	r3, r3
 8009642:	3311      	adds	r3, #17
 8009644:	b29a      	uxth	r2, r3
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	b29b      	uxth	r3, r3
 800964a:	3319      	adds	r3, #25
 800964c:	b29c      	uxth	r4, r3
 800964e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	4623      	mov	r3, r4
 8009656:	f7fe ff17 	bl	8008488 <LCD_Fill>
	}
}
 800965a:	bf00      	nop
 800965c:	3734      	adds	r7, #52	; 0x34
 800965e:	46bd      	mov	sp, r7
 8009660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009662:	bf00      	nop
 8009664:	200000b8 	.word	0x200000b8
 8009668:	20000008 	.word	0x20000008
 800966c:	2000001c 	.word	0x2000001c
 8009670:	20000010 	.word	0x20000010

08009674 <Initial>:

void Initial() { // Initialize blocks at the beginning
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++) {
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	e016      	b.n	80096ae <Initial+0x3a>
		for (int j = 0; j < 10; j++) {
 8009680:	2300      	movs	r3, #0
 8009682:	60bb      	str	r3, [r7, #8]
 8009684:	e00d      	b.n	80096a2 <Initial+0x2e>
			board[i][j] = 0;
 8009686:	4918      	ldr	r1, [pc, #96]	; (80096e8 <Initial+0x74>)
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	4413      	add	r3, r2
 8009696:	2200      	movs	r2, #0
 8009698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 10; j++) {
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	3301      	adds	r3, #1
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	ddee      	ble.n	8009686 <Initial+0x12>
	for (int i = 0; i < 20; i++) {
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3301      	adds	r3, #1
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b13      	cmp	r3, #19
 80096b2:	dde5      	ble.n	8009680 <Initial+0xc>
		}
	}
	for (int i = 0; i < 3; i++) {
 80096b4:	2300      	movs	r3, #0
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	e00e      	b.n	80096d8 <Initial+0x64>
		BringNexttoBoard();
 80096ba:	f7ff fb61 	bl	8008d80 <BringNexttoBoard>
		Convert();
 80096be:	f7ff fb39 	bl	8008d34 <Convert>
		DrawBlocks();
 80096c2:	f7ff fdd7 	bl	8009274 <DrawBlocks>
		DrawNextBlock();
 80096c6:	f7ff fca1 	bl	800900c <DrawNextBlock>
		CreateSquare();
 80096ca:	f7ff fa05 	bl	8008ad8 <CreateSquare>
		DrawNewBornBlock();
 80096ce:	f7ff fb8b 	bl	8008de8 <DrawNewBornBlock>
	for (int i = 0; i < 3; i++) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3301      	adds	r3, #1
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	dded      	ble.n	80096ba <Initial+0x46>
	}
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200000b8 	.word	0x200000b8

080096ec <CanSqureDown>:

int CanSqureDown() { // Decide whether land
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e00b      	b.n	8009710 <CanSqureDown+0x24>
		if (board[19][i] == 1) {
 80096f8:	4a20      	ldr	r2, [pc, #128]	; (800977c <CanSqureDown+0x90>)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	33be      	adds	r3, #190	; 0xbe
 80096fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <CanSqureDown+0x1e>
			return 0;
 8009706:	2300      	movs	r3, #0
 8009708:	e033      	b.n	8009772 <CanSqureDown+0x86>
	for (int i = 0; i < 10; i++) {
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b09      	cmp	r3, #9
 8009714:	ddf0      	ble.n	80096f8 <CanSqureDown+0xc>
		}
	}
	for (int i = 18; i >= 0; i--) {
 8009716:	2312      	movs	r3, #18
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	e026      	b.n	800976a <CanSqureDown+0x7e>
		for (int j = 0; j < 10; j++) {
 800971c:	2300      	movs	r3, #0
 800971e:	607b      	str	r3, [r7, #4]
 8009720:	e01d      	b.n	800975e <CanSqureDown+0x72>
			if (board[i][j] == 1 && board[i + 1][j] >= 2) {
 8009722:	4916      	ldr	r1, [pc, #88]	; (800977c <CanSqureDown+0x90>)
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	4413      	add	r3, r2
 8009732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d10e      	bne.n	8009758 <CanSqureDown+0x6c>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	490f      	ldr	r1, [pc, #60]	; (800977c <CanSqureDown+0x90>)
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4413      	add	r3, r2
 800974c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009750:	2b01      	cmp	r3, #1
 8009752:	dd01      	ble.n	8009758 <CanSqureDown+0x6c>
				return 0;
 8009754:	2300      	movs	r3, #0
 8009756:	e00c      	b.n	8009772 <CanSqureDown+0x86>
		for (int j = 0; j < 10; j++) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3301      	adds	r3, #1
 800975c:	607b      	str	r3, [r7, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b09      	cmp	r3, #9
 8009762:	ddde      	ble.n	8009722 <CanSqureDown+0x36>
	for (int i = 18; i >= 0; i--) {
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3b01      	subs	r3, #1
 8009768:	60bb      	str	r3, [r7, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dad5      	bge.n	800971c <CanSqureDown+0x30>
			}
		}
	}
	return 1;
 8009770:	2301      	movs	r3, #1
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	bc80      	pop	{r7}
 800977a:	4770      	bx	lr
 800977c:	200000b8 	.word	0x200000b8

08009780 <SqureDown>:

void SqureDown() { // Land one cell
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
	for (int i = 18; i >= 0; i--) {
 8009786:	2312      	movs	r3, #18
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	e037      	b.n	80097fc <SqureDown+0x7c>
		for (int j = 0; j < 10; j++) {
 800978c:	2300      	movs	r3, #0
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	e02e      	b.n	80097f0 <SqureDown+0x70>
			if (board[i][j] == 1) {
 8009792:	4921      	ldr	r1, [pc, #132]	; (8009818 <SqureDown+0x98>)
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4413      	add	r3, r2
 80097a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d11f      	bne.n	80097ea <SqureDown+0x6a>
				board[i + 1][j] = board[i][j];
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	481a      	ldr	r0, [pc, #104]	; (8009818 <SqureDown+0x98>)
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	440b      	add	r3, r1
 80097be:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80097c2:	4815      	ldr	r0, [pc, #84]	; (8009818 <SqureDown+0x98>)
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	4413      	add	r3, r2
 80097d0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				board[i][j] = 0;
 80097d4:	4910      	ldr	r1, [pc, #64]	; (8009818 <SqureDown+0x98>)
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	4413      	add	r3, r2
 80097e4:	2200      	movs	r2, #0
 80097e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 10; j++) {
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	ddcd      	ble.n	8009792 <SqureDown+0x12>
	for (int i = 18; i >= 0; i--) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	607b      	str	r3, [r7, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dac4      	bge.n	800978c <SqureDown+0xc>
			}
		}
	}
	cp_row++;
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <SqureDown+0x9c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	4a04      	ldr	r2, [pc, #16]	; (800981c <SqureDown+0x9c>)
 800980a:	6013      	str	r3, [r2, #0]
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	bc80      	pop	{r7}
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200000b8 	.word	0x200000b8
 800981c:	2000041c 	.word	0x2000041c

08009820 <TurnDeath>:

void TurnDeath() { // Landing block turn death
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
	int i = 0, j = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
 800982a:	2300      	movs	r3, #0
 800982c:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 20; i++) {
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	e023      	b.n	800987c <TurnDeath+0x5c>
		for (j = 0; j < 10; j++) {
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	e01a      	b.n	8009870 <TurnDeath+0x50>
			if (board[i][j] == 1) {
 800983a:	4914      	ldr	r1, [pc, #80]	; (800988c <TurnDeath+0x6c>)
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4413      	add	r3, r2
 800984a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d10b      	bne.n	800986a <TurnDeath+0x4a>
				board[i][j] = id[0];
 8009852:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <TurnDeath+0x70>)
 8009854:	6819      	ldr	r1, [r3, #0]
 8009856:	480d      	ldr	r0, [pc, #52]	; (800988c <TurnDeath+0x6c>)
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4413      	add	r3, r2
 8009866:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (j = 0; j < 10; j++) {
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3301      	adds	r3, #1
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b09      	cmp	r3, #9
 8009874:	dde1      	ble.n	800983a <TurnDeath+0x1a>
	for (i = 0; i < 20; i++) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3301      	adds	r3, #1
 800987a:	607b      	str	r3, [r7, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b13      	cmp	r3, #19
 8009880:	ddd8      	ble.n	8009834 <TurnDeath+0x14>
			}
		}
	}
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	bc80      	pop	{r7}
 800988a:	4770      	bx	lr
 800988c:	200000b8 	.word	0x200000b8
 8009890:	20000010 	.word	0x20000010

08009894 <CanShiftRight>:

int CanShiftRight() { // Decide whether can shift right
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	int i = 0, j = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	2300      	movs	r3, #0
 80098a0:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 20; i++) {
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	e00f      	b.n	80098c8 <CanShiftRight+0x34>
		if (board[i][9] == 1) {
 80098a8:	4922      	ldr	r1, [pc, #136]	; (8009934 <CanShiftRight+0xa0>)
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	440b      	add	r3, r1
 80098b6:	3324      	adds	r3, #36	; 0x24
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <CanShiftRight+0x2e>
			return 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	e033      	b.n	800992a <CanShiftRight+0x96>
	for (i = 0; i < 20; i++) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3301      	adds	r3, #1
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b13      	cmp	r3, #19
 80098cc:	ddec      	ble.n	80098a8 <CanShiftRight+0x14>
		}
	}
	for (i = 0; i < 20; i++) {
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	e026      	b.n	8009922 <CanShiftRight+0x8e>
		for (j = 9; j >= 0; j--) {
 80098d4:	2309      	movs	r3, #9
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	e01d      	b.n	8009916 <CanShiftRight+0x82>
			if (board[i][j] == 1 && board[i][j + 1] > 1) {
 80098da:	4916      	ldr	r1, [pc, #88]	; (8009934 <CanShiftRight+0xa0>)
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4413      	add	r3, r2
 80098ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d10e      	bne.n	8009910 <CanShiftRight+0x7c>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	1c59      	adds	r1, r3, #1
 80098f6:	480f      	ldr	r0, [pc, #60]	; (8009934 <CanShiftRight+0xa0>)
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	440b      	add	r3, r1
 8009904:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009908:	2b01      	cmp	r3, #1
 800990a:	dd01      	ble.n	8009910 <CanShiftRight+0x7c>
				return 0;
 800990c:	2300      	movs	r3, #0
 800990e:	e00c      	b.n	800992a <CanShiftRight+0x96>
		for (j = 9; j >= 0; j--) {
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	3b01      	subs	r3, #1
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	dade      	bge.n	80098da <CanShiftRight+0x46>
	for (i = 0; i < 20; i++) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3301      	adds	r3, #1
 8009920:	607b      	str	r3, [r7, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b13      	cmp	r3, #19
 8009926:	ddd5      	ble.n	80098d4 <CanShiftRight+0x40>
			}
		}
	}
	return 1;
 8009928:	2301      	movs	r3, #1
}
 800992a:	4618      	mov	r0, r3
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr
 8009934:	200000b8 	.word	0x200000b8

08009938 <ShiftRight>:

void ShiftRight() {
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
	if (CanShiftRight()) {
 800993e:	f7ff ffa9 	bl	8009894 <CanShiftRight>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d046      	beq.n	80099d6 <ShiftRight+0x9e>
		int i = 0, j = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	2300      	movs	r3, #0
 800994e:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 20; i++) {
 8009950:	2300      	movs	r3, #0
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	e037      	b.n	80099c6 <ShiftRight+0x8e>
			for (j = 9; j >= 0; j--) {
 8009956:	2309      	movs	r3, #9
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	e02e      	b.n	80099ba <ShiftRight+0x82>
				if (board[i][j] == 1) {
 800995c:	4920      	ldr	r1, [pc, #128]	; (80099e0 <ShiftRight+0xa8>)
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	4413      	add	r3, r2
 800996c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11f      	bne.n	80099b4 <ShiftRight+0x7c>
					board[i][j + 1] = board[i][j];
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	1c58      	adds	r0, r3, #1
 8009978:	4919      	ldr	r1, [pc, #100]	; (80099e0 <ShiftRight+0xa8>)
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	4413      	add	r3, r2
 8009988:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800998c:	4c14      	ldr	r4, [pc, #80]	; (80099e0 <ShiftRight+0xa8>)
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	4403      	add	r3, r0
 800999a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
					board[i][j] = 0;
 800999e:	4910      	ldr	r1, [pc, #64]	; (80099e0 <ShiftRight+0xa8>)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4413      	add	r3, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = 9; j >= 0; j--) {
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	603b      	str	r3, [r7, #0]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dacd      	bge.n	800995c <ShiftRight+0x24>
		for (i = 0; i < 20; i++) {
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3301      	adds	r3, #1
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b13      	cmp	r3, #19
 80099ca:	ddc4      	ble.n	8009956 <ShiftRight+0x1e>
				}
			}
		}
		cp_column++;
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <ShiftRight+0xac>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	4a04      	ldr	r2, [pc, #16]	; (80099e4 <ShiftRight+0xac>)
 80099d4:	6013      	str	r3, [r2, #0]
	}
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd90      	pop	{r4, r7, pc}
 80099de:	bf00      	nop
 80099e0:	200000b8 	.word	0x200000b8
 80099e4:	20000420 	.word	0x20000420

080099e8 <CanShiftLeft>:

int CanShiftLeft() { // Decide whether can shift left
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
	int i = 0, j = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
 80099f2:	2300      	movs	r3, #0
 80099f4:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 20; i++) {
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	e00e      	b.n	8009a1a <CanShiftLeft+0x32>
		if (board[i][0] == 1) {
 80099fc:	4922      	ldr	r1, [pc, #136]	; (8009a88 <CanShiftLeft+0xa0>)
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <CanShiftLeft+0x2c>
			return 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e033      	b.n	8009a7c <CanShiftLeft+0x94>
	for (i = 0; i < 20; i++) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3301      	adds	r3, #1
 8009a18:	607b      	str	r3, [r7, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b13      	cmp	r3, #19
 8009a1e:	dded      	ble.n	80099fc <CanShiftLeft+0x14>
		}
	}
	for (i = 0; i < 20; i++) {
 8009a20:	2300      	movs	r3, #0
 8009a22:	607b      	str	r3, [r7, #4]
 8009a24:	e026      	b.n	8009a74 <CanShiftLeft+0x8c>
		for (j = 0; j < 10; j++) {
 8009a26:	2300      	movs	r3, #0
 8009a28:	603b      	str	r3, [r7, #0]
 8009a2a:	e01d      	b.n	8009a68 <CanShiftLeft+0x80>
			if (board[i][j] == 1 && board[i][j - 1] > 1) {
 8009a2c:	4916      	ldr	r1, [pc, #88]	; (8009a88 <CanShiftLeft+0xa0>)
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d10e      	bne.n	8009a62 <CanShiftLeft+0x7a>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	1e59      	subs	r1, r3, #1
 8009a48:	480f      	ldr	r0, [pc, #60]	; (8009a88 <CanShiftLeft+0xa0>)
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	440b      	add	r3, r1
 8009a56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	dd01      	ble.n	8009a62 <CanShiftLeft+0x7a>
				return 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e00c      	b.n	8009a7c <CanShiftLeft+0x94>
		for (j = 0; j < 10; j++) {
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	ddde      	ble.n	8009a2c <CanShiftLeft+0x44>
	for (i = 0; i < 20; i++) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3301      	adds	r3, #1
 8009a72:	607b      	str	r3, [r7, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b13      	cmp	r3, #19
 8009a78:	ddd5      	ble.n	8009a26 <CanShiftLeft+0x3e>
			}
		}
	}
	return 1;
 8009a7a:	2301      	movs	r3, #1
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	200000b8 	.word	0x200000b8

08009a8c <ShiftLeft>:

void ShiftLeft() {
 8009a8c:	b590      	push	{r4, r7, lr}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
	if (CanShiftLeft()) {
 8009a92:	f7ff ffa9 	bl	80099e8 <CanShiftLeft>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d046      	beq.n	8009b2a <ShiftLeft+0x9e>
		int i = 0, j = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	607b      	str	r3, [r7, #4]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 20; i++) {
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	607b      	str	r3, [r7, #4]
 8009aa8:	e037      	b.n	8009b1a <ShiftLeft+0x8e>
			for (j = 0; j < 10; j++) {
 8009aaa:	2300      	movs	r3, #0
 8009aac:	603b      	str	r3, [r7, #0]
 8009aae:	e02e      	b.n	8009b0e <ShiftLeft+0x82>
				if (board[i][j] == 1) {
 8009ab0:	4920      	ldr	r1, [pc, #128]	; (8009b34 <ShiftLeft+0xa8>)
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d11f      	bne.n	8009b08 <ShiftLeft+0x7c>
					board[i][j - 1] = board[i][j];
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	1e58      	subs	r0, r3, #1
 8009acc:	4919      	ldr	r1, [pc, #100]	; (8009b34 <ShiftLeft+0xa8>)
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	4413      	add	r3, r2
 8009adc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ae0:	4c14      	ldr	r4, [pc, #80]	; (8009b34 <ShiftLeft+0xa8>)
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	4403      	add	r3, r0
 8009aee:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
					board[i][j] = 0;
 8009af2:	4910      	ldr	r1, [pc, #64]	; (8009b34 <ShiftLeft+0xa8>)
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (j = 0; j < 10; j++) {
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b09      	cmp	r3, #9
 8009b12:	ddcd      	ble.n	8009ab0 <ShiftLeft+0x24>
		for (i = 0; i < 20; i++) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3301      	adds	r3, #1
 8009b18:	607b      	str	r3, [r7, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b13      	cmp	r3, #19
 8009b1e:	ddc4      	ble.n	8009aaa <ShiftLeft+0x1e>
				}
			}
		}
		cp_column--;
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <ShiftLeft+0xac>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	4a04      	ldr	r2, [pc, #16]	; (8009b38 <ShiftLeft+0xac>)
 8009b28:	6013      	str	r3, [r2, #0]
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200000b8 	.word	0x200000b8
 8009b38:	20000420 	.word	0x20000420

08009b3c <NormalShapeVerify>:

int NormalShapeVerify() {
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
	if (id[0] == 3)
 8009b42:	4b22      	ldr	r3, [pc, #136]	; (8009bcc <NormalShapeVerify+0x90>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d101      	bne.n	8009b4e <NormalShapeVerify+0x12>
		return 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e039      	b.n	8009bc2 <NormalShapeVerify+0x86>
	if(id[0]==9)
 8009b4e:	4b1f      	ldr	r3, [pc, #124]	; (8009bcc <NormalShapeVerify+0x90>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d101      	bne.n	8009b5a <NormalShapeVerify+0x1e>
		return 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	e033      	b.n	8009bc2 <NormalShapeVerify+0x86>
	else {
		int i = 0, j = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 3; i++) {
 8009b62:	2300      	movs	r3, #0
 8009b64:	607b      	str	r3, [r7, #4]
 8009b66:	e019      	b.n	8009b9c <NormalShapeVerify+0x60>
			for (j = 0; j < 3; j++) {
 8009b68:	2300      	movs	r3, #0
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	e010      	b.n	8009b90 <NormalShapeVerify+0x54>
				if (board[i][j] > 1)
 8009b6e:	4918      	ldr	r1, [pc, #96]	; (8009bd0 <NormalShapeVerify+0x94>)
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	dd01      	ble.n	8009b8a <NormalShapeVerify+0x4e>
					return 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e01b      	b.n	8009bc2 <NormalShapeVerify+0x86>
			for (j = 0; j < 3; j++) {
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	ddeb      	ble.n	8009b6e <NormalShapeVerify+0x32>
		for (i = 0; i < 3; i++) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	dde2      	ble.n	8009b68 <NormalShapeVerify+0x2c>
			}
		}
	}
	if (cp_column < 0)
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <NormalShapeVerify+0x98>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	da03      	bge.n	8009bb2 <NormalShapeVerify+0x76>
		cp_column = 0;
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <NormalShapeVerify+0x98>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e006      	b.n	8009bc0 <NormalShapeVerify+0x84>
	else if (cp_column > 7)
 8009bb2:	4b08      	ldr	r3, [pc, #32]	; (8009bd4 <NormalShapeVerify+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b07      	cmp	r3, #7
 8009bb8:	dd02      	ble.n	8009bc0 <NormalShapeVerify+0x84>
		cp_column = 7;
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <NormalShapeVerify+0x98>)
 8009bbc:	2207      	movs	r2, #7
 8009bbe:	601a      	str	r2, [r3, #0]

	return 1;
 8009bc0:	2301      	movs	r3, #1

}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr
 8009bcc:	20000010 	.word	0x20000010
 8009bd0:	200000b8 	.word	0x200000b8
 8009bd4:	20000420 	.word	0x20000420

08009bd8 <NormalShapChange>:

void NormalShapChange() {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b094      	sub	sp, #80	; 0x50
 8009bdc:	af00      	add	r7, sp, #0
	if (id[0] == 3 ||id[0]==9)
 8009bde:	4b93      	ldr	r3, [pc, #588]	; (8009e2c <NormalShapChange+0x254>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	f000 811b 	beq.w	8009e1e <NormalShapChange+0x246>
 8009be8:	4b90      	ldr	r3, [pc, #576]	; (8009e2c <NormalShapChange+0x254>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	f000 8116 	beq.w	8009e1e <NormalShapChange+0x246>
		return;
	else {
		int i = 0, j = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	64bb      	str	r3, [r7, #72]	; 0x48
		int tempAry[3][3] = { 0 };
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	2224      	movs	r2, #36	; 0x24
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 ff61 	bl	800aac8 <memset>
		for (i = 0; i < 3; i++) {
 8009c06:	2300      	movs	r3, #0
 8009c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c0a:	e039      	b.n	8009c80 <NormalShapChange+0xa8>
			for (j = 0; j < 3; j++) {
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c10:	e030      	b.n	8009c74 <NormalShapChange+0x9c>
				if (board[cp_row + i][cp_column + j] == 1)
 8009c12:	4b87      	ldr	r3, [pc, #540]	; (8009e30 <NormalShapChange+0x258>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c18:	441a      	add	r2, r3
 8009c1a:	4b86      	ldr	r3, [pc, #536]	; (8009e34 <NormalShapChange+0x25c>)
 8009c1c:	6819      	ldr	r1, [r3, #0]
 8009c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c20:	4419      	add	r1, r3
 8009c22:	4885      	ldr	r0, [pc, #532]	; (8009e38 <NormalShapChange+0x260>)
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	440b      	add	r3, r1
 8009c2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d11b      	bne.n	8009c6e <NormalShapChange+0x96>
					tempAry[i][j] = board[cp_row + i][cp_column + j];
 8009c36:	4b7e      	ldr	r3, [pc, #504]	; (8009e30 <NormalShapChange+0x258>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3c:	441a      	add	r2, r3
 8009c3e:	4b7d      	ldr	r3, [pc, #500]	; (8009e34 <NormalShapChange+0x25c>)
 8009c40:	6819      	ldr	r1, [r3, #0]
 8009c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c44:	4419      	add	r1, r3
 8009c46:	487c      	ldr	r0, [pc, #496]	; (8009e38 <NormalShapChange+0x260>)
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	440b      	add	r3, r1
 8009c52:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8009c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009c68:	4413      	add	r3, r2
 8009c6a:	f843 1c50 	str.w	r1, [r3, #-80]
			for (j = 0; j < 3; j++) {
 8009c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c70:	3301      	adds	r3, #1
 8009c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	ddcb      	ble.n	8009c12 <NormalShapChange+0x3a>
		for (i = 0; i < 3; i++) {
 8009c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	ddc2      	ble.n	8009c0c <NormalShapChange+0x34>
			}
		}
		int temp2Ary[3][3] = { 0 };
 8009c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c8a:	2224      	movs	r2, #36	; 0x24
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 ff1a 	bl	800aac8 <memset>
		for (i = 0; i < 3; i++) {
 8009c94:	2300      	movs	r3, #0
 8009c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c98:	e025      	b.n	8009ce6 <NormalShapChange+0x10e>
			for (j = 0; j < 3; j++) {
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c9e:	e01c      	b.n	8009cda <NormalShapChange+0x102>
				temp2Ary[i][j] = tempAry[2 - j][i];
 8009ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca2:	f1c3 0202 	rsb	r2, r3, #2
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	4413      	add	r3, r2
 8009cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8009cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	4413      	add	r3, r2
 8009cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009cce:	4413      	add	r3, r2
 8009cd0:	f843 1c2c 	str.w	r1, [r3, #-44]
			for (j = 0; j < 3; j++) {
 8009cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	dddf      	ble.n	8009ca0 <NormalShapChange+0xc8>
		for (i = 0; i < 3; i++) {
 8009ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	ddd6      	ble.n	8009c9a <NormalShapChange+0xc2>
			}
		}
		for (i = 0; i < 3; i++) {
 8009cec:	2300      	movs	r3, #0
 8009cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf0:	e02b      	b.n	8009d4a <NormalShapChange+0x172>
			for (j = 0; j < 3; j++) {
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cf6:	e022      	b.n	8009d3e <NormalShapChange+0x166>
				if (temp2Ary[i][j] == 1 && board[cp_row + i][cp_column + j] > 1)
 8009cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	4413      	add	r3, r2
 8009d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d111      	bne.n	8009d38 <NormalShapChange+0x160>
 8009d14:	4b46      	ldr	r3, [pc, #280]	; (8009e30 <NormalShapChange+0x258>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	441a      	add	r2, r3
 8009d1c:	4b45      	ldr	r3, [pc, #276]	; (8009e34 <NormalShapChange+0x25c>)
 8009d1e:	6819      	ldr	r1, [r3, #0]
 8009d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d22:	4419      	add	r1, r3
 8009d24:	4844      	ldr	r0, [pc, #272]	; (8009e38 <NormalShapChange+0x260>)
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	440b      	add	r3, r1
 8009d30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	dc74      	bgt.n	8009e22 <NormalShapChange+0x24a>
			for (j = 0; j < 3; j++) {
 8009d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	ddd9      	ble.n	8009cf8 <NormalShapChange+0x120>
		for (i = 0; i < 3; i++) {
 8009d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d46:	3301      	adds	r3, #1
 8009d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	ddd0      	ble.n	8009cf2 <NormalShapChange+0x11a>
					return;
			}
		}
		for (i = 0; i < 3; i++) {
 8009d50:	2300      	movs	r3, #0
 8009d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d54:	e02e      	b.n	8009db4 <NormalShapChange+0x1dc>
			for (j = 0; j < 3; j++) {
 8009d56:	2300      	movs	r3, #0
 8009d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d5a:	e025      	b.n	8009da8 <NormalShapChange+0x1d0>
				if (board[cp_row + i][cp_column + j] == 1)
 8009d5c:	4b34      	ldr	r3, [pc, #208]	; (8009e30 <NormalShapChange+0x258>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d62:	441a      	add	r2, r3
 8009d64:	4b33      	ldr	r3, [pc, #204]	; (8009e34 <NormalShapChange+0x25c>)
 8009d66:	6819      	ldr	r1, [r3, #0]
 8009d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d6a:	4419      	add	r1, r3
 8009d6c:	4832      	ldr	r0, [pc, #200]	; (8009e38 <NormalShapChange+0x260>)
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	440b      	add	r3, r1
 8009d78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d110      	bne.n	8009da2 <NormalShapChange+0x1ca>
					board[cp_row + i][cp_column + j] = 0;
 8009d80:	4b2b      	ldr	r3, [pc, #172]	; (8009e30 <NormalShapChange+0x258>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d86:	441a      	add	r2, r3
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <NormalShapChange+0x25c>)
 8009d8a:	6819      	ldr	r1, [r3, #0]
 8009d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8e:	4419      	add	r1, r3
 8009d90:	4829      	ldr	r0, [pc, #164]	; (8009e38 <NormalShapChange+0x260>)
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	440b      	add	r3, r1
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (j = 0; j < 3; j++) {
 8009da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da4:	3301      	adds	r3, #1
 8009da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	ddd6      	ble.n	8009d5c <NormalShapChange+0x184>
		for (i = 0; i < 3; i++) {
 8009dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db0:	3301      	adds	r3, #1
 8009db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	ddcd      	ble.n	8009d56 <NormalShapChange+0x17e>
			}
		}
		for (i = 0; i < 3; i++) {
 8009dba:	2300      	movs	r3, #0
 8009dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dbe:	e02a      	b.n	8009e16 <NormalShapChange+0x23e>
			for (j = 0; j < 3; j++) {
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dc4:	e021      	b.n	8009e0a <NormalShapChange+0x232>
				if (temp2Ary[i][j] == 1)
 8009dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dc8:	4613      	mov	r3, r2
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	4413      	add	r3, r2
 8009dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009dd8:	4413      	add	r3, r2
 8009dda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d110      	bne.n	8009e04 <NormalShapChange+0x22c>
					board[cp_row + i][cp_column + j] = 1;
 8009de2:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <NormalShapChange+0x258>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de8:	441a      	add	r2, r3
 8009dea:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <NormalShapChange+0x25c>)
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009df0:	4419      	add	r1, r3
 8009df2:	4811      	ldr	r0, [pc, #68]	; (8009e38 <NormalShapChange+0x260>)
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	440b      	add	r3, r1
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (j = 0; j < 3; j++) {
 8009e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e06:	3301      	adds	r3, #1
 8009e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	ddda      	ble.n	8009dc6 <NormalShapChange+0x1ee>
		for (i = 0; i < 3; i++) {
 8009e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e12:	3301      	adds	r3, #1
 8009e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	ddd1      	ble.n	8009dc0 <NormalShapChange+0x1e8>
 8009e1c:	e002      	b.n	8009e24 <NormalShapChange+0x24c>
		return;
 8009e1e:	bf00      	nop
 8009e20:	e000      	b.n	8009e24 <NormalShapChange+0x24c>
					return;
 8009e22:	bf00      	nop
			}
		}

	}

}
 8009e24:	3750      	adds	r7, #80	; 0x50
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000010 	.word	0x20000010
 8009e30:	2000041c 	.word	0x2000041c
 8009e34:	20000420 	.word	0x20000420
 8009e38:	200000b8 	.word	0x200000b8

08009e3c <LongShapeVerify>:

int LongShapeVerify() {
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
	if (cp_row == 0 || cp_column == 0 || cp_column >= 8)
 8009e42:	4b2e      	ldr	r3, [pc, #184]	; (8009efc <LongShapeVerify+0xc0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <LongShapeVerify+0x1e>
 8009e4a:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <LongShapeVerify+0xc4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <LongShapeVerify+0x1e>
 8009e52:	4b2b      	ldr	r3, [pc, #172]	; (8009f00 <LongShapeVerify+0xc4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b07      	cmp	r3, #7
 8009e58:	dd01      	ble.n	8009e5e <LongShapeVerify+0x22>
		return 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e049      	b.n	8009ef2 <LongShapeVerify+0xb6>
	int i = 0, j = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	607b      	str	r3, [r7, #4]
 8009e62:	2300      	movs	r3, #0
 8009e64:	603b      	str	r3, [r7, #0]
	for (i = 1; i < 4; i++) { // |==>--, right
 8009e66:	2301      	movs	r3, #1
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	e018      	b.n	8009e9e <LongShapeVerify+0x62>
		if (board[cp_row][cp_column + i] > 1 || cp_column + i > 9)
 8009e6c:	4b23      	ldr	r3, [pc, #140]	; (8009efc <LongShapeVerify+0xc0>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <LongShapeVerify+0xc4>)
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4419      	add	r1, r3
 8009e78:	4822      	ldr	r0, [pc, #136]	; (8009f04 <LongShapeVerify+0xc8>)
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	440b      	add	r3, r1
 8009e84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	dc0b      	bgt.n	8009ea4 <LongShapeVerify+0x68>
 8009e8c:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <LongShapeVerify+0xc4>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4413      	add	r3, r2
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	dc05      	bgt.n	8009ea4 <LongShapeVerify+0x68>
	for (i = 1; i < 4; i++) { // |==>--, right
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	607b      	str	r3, [r7, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	dde3      	ble.n	8009e6c <LongShapeVerify+0x30>
			break;
	}
	for (j = 1; j < 4; j++) { // --==>|, left
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	e018      	b.n	8009edc <LongShapeVerify+0xa0>
		if (board[cp_row][cp_column - j] > 1 || cp_column - j < 0)
 8009eaa:	4b14      	ldr	r3, [pc, #80]	; (8009efc <LongShapeVerify+0xc0>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4b14      	ldr	r3, [pc, #80]	; (8009f00 <LongShapeVerify+0xc4>)
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	1ac9      	subs	r1, r1, r3
 8009eb6:	4813      	ldr	r0, [pc, #76]	; (8009f04 <LongShapeVerify+0xc8>)
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	440b      	add	r3, r1
 8009ec2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	dc0b      	bgt.n	8009ee2 <LongShapeVerify+0xa6>
 8009eca:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <LongShapeVerify+0xc4>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db05      	blt.n	8009ee2 <LongShapeVerify+0xa6>
	for (j = 1; j < 4; j++) { // --==>|, left
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	dde3      	ble.n	8009eaa <LongShapeVerify+0x6e>
			break;
	}
	if (i + j < 5)
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	dc01      	bgt.n	8009ef0 <LongShapeVerify+0xb4>
		return 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	e000      	b.n	8009ef2 <LongShapeVerify+0xb6>
	return 1;
 8009ef0:	2301      	movs	r3, #1
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bc80      	pop	{r7}
 8009efa:	4770      	bx	lr
 8009efc:	2000041c 	.word	0x2000041c
 8009f00:	20000420 	.word	0x20000420
 8009f04:	200000b8 	.word	0x200000b8

08009f08 <LongShapeChange>:

void LongShapeChange() {
 8009f08:	b490      	push	{r4, r7}
 8009f0a:	af00      	add	r7, sp, #0
	if (board[cp_row][cp_column - 1] == 1) { // -- ==>|
 8009f0c:	4b7a      	ldr	r3, [pc, #488]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	4b7a      	ldr	r3, [pc, #488]	; (800a0fc <LongShapeChange+0x1f4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	1e59      	subs	r1, r3, #1
 8009f16:	487a      	ldr	r0, [pc, #488]	; (800a100 <LongShapeChange+0x1f8>)
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	440b      	add	r3, r1
 8009f22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d15a      	bne.n	8009fe0 <LongShapeChange+0xd8>
		if (cp_row + 2 > 19)
 8009f2a:	4b73      	ldr	r3, [pc, #460]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3302      	adds	r3, #2
 8009f30:	2b13      	cmp	r3, #19
 8009f32:	f300 80da 	bgt.w	800a0ea <LongShapeChange+0x1e2>
			return;
		board[cp_row][cp_column - 1] = 0;
 8009f36:	4b70      	ldr	r3, [pc, #448]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	4b70      	ldr	r3, [pc, #448]	; (800a0fc <LongShapeChange+0x1f4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	1e59      	subs	r1, r3, #1
 8009f40:	486f      	ldr	r0, [pc, #444]	; (800a100 <LongShapeChange+0x1f8>)
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	440b      	add	r3, r1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		board[cp_row][cp_column + 1] = 0;
 8009f52:	4b69      	ldr	r3, [pc, #420]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	4b69      	ldr	r3, [pc, #420]	; (800a0fc <LongShapeChange+0x1f4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	1c59      	adds	r1, r3, #1
 8009f5c:	4868      	ldr	r0, [pc, #416]	; (800a100 <LongShapeChange+0x1f8>)
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	440b      	add	r3, r1
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		board[cp_row][cp_column + 2] = 0;
 8009f6e:	4b62      	ldr	r3, [pc, #392]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b62      	ldr	r3, [pc, #392]	; (800a0fc <LongShapeChange+0x1f4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	1c99      	adds	r1, r3, #2
 8009f78:	4861      	ldr	r0, [pc, #388]	; (800a100 <LongShapeChange+0x1f8>)
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	440b      	add	r3, r1
 8009f84:	2200      	movs	r2, #0
 8009f86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		board[cp_row - 1][cp_column] = 1;
 8009f8a:	4b5b      	ldr	r3, [pc, #364]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1e5a      	subs	r2, r3, #1
 8009f90:	4b5a      	ldr	r3, [pc, #360]	; (800a0fc <LongShapeChange+0x1f4>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	485a      	ldr	r0, [pc, #360]	; (800a100 <LongShapeChange+0x1f8>)
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	440b      	add	r3, r1
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		board[cp_row + 1][cp_column] = 1;
 8009fa6:	4b54      	ldr	r3, [pc, #336]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	4b53      	ldr	r3, [pc, #332]	; (800a0fc <LongShapeChange+0x1f4>)
 8009fae:	6819      	ldr	r1, [r3, #0]
 8009fb0:	4853      	ldr	r0, [pc, #332]	; (800a100 <LongShapeChange+0x1f8>)
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	440b      	add	r3, r1
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		board[cp_row + 2][cp_column] = 1;
 8009fc2:	4b4d      	ldr	r3, [pc, #308]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	1c9a      	adds	r2, r3, #2
 8009fc8:	4b4c      	ldr	r3, [pc, #304]	; (800a0fc <LongShapeChange+0x1f4>)
 8009fca:	6819      	ldr	r1, [r3, #0]
 8009fcc:	484c      	ldr	r0, [pc, #304]	; (800a100 <LongShapeChange+0x1f8>)
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	440b      	add	r3, r1
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009fde:	e087      	b.n	800a0f0 <LongShapeChange+0x1e8>

	} else { // | ==> --
		if (!(board[cp_row][cp_column - 1] + board[cp_row][cp_column + 1]
 8009fe0:	4b45      	ldr	r3, [pc, #276]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	4b45      	ldr	r3, [pc, #276]	; (800a0fc <LongShapeChange+0x1f4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	1e59      	subs	r1, r3, #1
 8009fea:	4845      	ldr	r0, [pc, #276]	; (800a100 <LongShapeChange+0x1f8>)
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	440b      	add	r3, r1
 8009ff6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8009ffa:	4b3f      	ldr	r3, [pc, #252]	; (800a0f8 <LongShapeChange+0x1f0>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b3f      	ldr	r3, [pc, #252]	; (800a0fc <LongShapeChange+0x1f4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	1c58      	adds	r0, r3, #1
 800a004:	4c3e      	ldr	r4, [pc, #248]	; (800a100 <LongShapeChange+0x1f8>)
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4403      	add	r3, r0
 800a010:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a014:	4419      	add	r1, r3
				+ board[cp_row][cp_column + 2] >= 6)) {
 800a016:	4b38      	ldr	r3, [pc, #224]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	4b38      	ldr	r3, [pc, #224]	; (800a0fc <LongShapeChange+0x1f4>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	1c98      	adds	r0, r3, #2
 800a020:	4c37      	ldr	r4, [pc, #220]	; (800a100 <LongShapeChange+0x1f8>)
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4403      	add	r3, r0
 800a02c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a030:	440b      	add	r3, r1
		if (!(board[cp_row][cp_column - 1] + board[cp_row][cp_column + 1]
 800a032:	2b05      	cmp	r3, #5
 800a034:	dc5c      	bgt.n	800a0f0 <LongShapeChange+0x1e8>
			if (cp_column + 2 > 9)
 800a036:	4b31      	ldr	r3, [pc, #196]	; (800a0fc <LongShapeChange+0x1f4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3302      	adds	r3, #2
 800a03c:	2b09      	cmp	r3, #9
 800a03e:	dc56      	bgt.n	800a0ee <LongShapeChange+0x1e6>
				return;
			board[cp_row - 1][cp_column] = 0;
 800a040:	4b2d      	ldr	r3, [pc, #180]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	1e5a      	subs	r2, r3, #1
 800a046:	4b2d      	ldr	r3, [pc, #180]	; (800a0fc <LongShapeChange+0x1f4>)
 800a048:	6819      	ldr	r1, [r3, #0]
 800a04a:	482d      	ldr	r0, [pc, #180]	; (800a100 <LongShapeChange+0x1f8>)
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	440b      	add	r3, r1
 800a056:	2200      	movs	r2, #0
 800a058:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			board[cp_row + 1][cp_column] = 0;
 800a05c:	4b26      	ldr	r3, [pc, #152]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	4b26      	ldr	r3, [pc, #152]	; (800a0fc <LongShapeChange+0x1f4>)
 800a064:	6819      	ldr	r1, [r3, #0]
 800a066:	4826      	ldr	r0, [pc, #152]	; (800a100 <LongShapeChange+0x1f8>)
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	440b      	add	r3, r1
 800a072:	2200      	movs	r2, #0
 800a074:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			board[cp_row + 2][cp_column] = 0;
 800a078:	4b1f      	ldr	r3, [pc, #124]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	1c9a      	adds	r2, r3, #2
 800a07e:	4b1f      	ldr	r3, [pc, #124]	; (800a0fc <LongShapeChange+0x1f4>)
 800a080:	6819      	ldr	r1, [r3, #0]
 800a082:	481f      	ldr	r0, [pc, #124]	; (800a100 <LongShapeChange+0x1f8>)
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	440b      	add	r3, r1
 800a08e:	2200      	movs	r2, #0
 800a090:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

			board[cp_row][cp_column - 1] = 1;
 800a094:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	4b18      	ldr	r3, [pc, #96]	; (800a0fc <LongShapeChange+0x1f4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	1e59      	subs	r1, r3, #1
 800a09e:	4818      	ldr	r0, [pc, #96]	; (800a100 <LongShapeChange+0x1f8>)
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	440b      	add	r3, r1
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			board[cp_row][cp_column + 1] = 1;
 800a0b0:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <LongShapeChange+0x1f4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	1c59      	adds	r1, r3, #1
 800a0ba:	4811      	ldr	r0, [pc, #68]	; (800a100 <LongShapeChange+0x1f8>)
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	440b      	add	r3, r1
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			board[cp_row][cp_column + 2] = 1;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <LongShapeChange+0x1f0>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <LongShapeChange+0x1f4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	1c99      	adds	r1, r3, #2
 800a0d6:	480a      	ldr	r0, [pc, #40]	; (800a100 <LongShapeChange+0x1f8>)
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	440b      	add	r3, r1
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a0e8:	e002      	b.n	800a0f0 <LongShapeChange+0x1e8>
			return;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <LongShapeChange+0x1e8>
				return;
 800a0ee:	bf00      	nop
		}
	}
}
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc90      	pop	{r4, r7}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	2000041c 	.word	0x2000041c
 800a0fc:	20000420 	.word	0x20000420
 800a100:	200000b8 	.word	0x200000b8

0800a104 <ChangeVerify>:

void ChangeVerify() {
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
	switch (id[0]) {
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <ChangeVerify+0x48>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d107      	bne.n	800a120 <ChangeVerify+0x1c>
	case 2:
		if (LongShapeVerify())
 800a110:	f7ff fe94 	bl	8009e3c <LongShapeVerify>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <ChangeVerify+0x2c>
			LongShapeChange();
 800a11a:	f7ff fef5 	bl	8009f08 <LongShapeChange>
		break;
 800a11e:	e007      	b.n	800a130 <ChangeVerify+0x2c>
	default:
		if (NormalShapeVerify())
 800a120:	f7ff fd0c 	bl	8009b3c <NormalShapeVerify>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d004      	beq.n	800a134 <ChangeVerify+0x30>
			NormalShapChange();
 800a12a:	f7ff fd55 	bl	8009bd8 <NormalShapChange>
		break;
 800a12e:	e001      	b.n	800a134 <ChangeVerify+0x30>
		break;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <ChangeVerify+0x32>
		break;
 800a134:	bf00      	nop
	}
	DrawBlocks();
 800a136:	f7ff f89d 	bl	8009274 <DrawBlocks>
	LCD_DrawRectangle(5, 2, 155, 305);
 800a13a:	f240 1331 	movw	r3, #305	; 0x131
 800a13e:	229b      	movs	r2, #155	; 0x9b
 800a140:	2102      	movs	r1, #2
 800a142:	2005      	movs	r0, #5
 800a144:	f7fe faaf 	bl	80086a6 <LCD_DrawRectangle>
}
 800a148:	bf00      	nop
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20000010 	.word	0x20000010

0800a150 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	d005      	beq.n	800a16c <HAL_GPIO_EXTI_Callback+0x1c>
 800a160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a164:	d008      	beq.n	800a178 <HAL_GPIO_EXTI_Callback+0x28>
 800a166:	2b01      	cmp	r3, #1
 800a168:	d00c      	beq.n	800a184 <HAL_GPIO_EXTI_Callback+0x34>
		HAL_Delay(125);
		ChangeVerify();
		HAL_Delay(125);
		break;
	default:
		break;
 800a16a:	e014      	b.n	800a196 <HAL_GPIO_EXTI_Callback+0x46>
		ShiftRight();
 800a16c:	f7ff fbe4 	bl	8009938 <ShiftRight>
		HAL_Delay(75);
 800a170:	204b      	movs	r0, #75	; 0x4b
 800a172:	f7f6 fca9 	bl	8000ac8 <HAL_Delay>
		break;
 800a176:	e00e      	b.n	800a196 <HAL_GPIO_EXTI_Callback+0x46>
		ShiftLeft();
 800a178:	f7ff fc88 	bl	8009a8c <ShiftLeft>
		HAL_Delay(75);
 800a17c:	204b      	movs	r0, #75	; 0x4b
 800a17e:	f7f6 fca3 	bl	8000ac8 <HAL_Delay>
		break;
 800a182:	e008      	b.n	800a196 <HAL_GPIO_EXTI_Callback+0x46>
		HAL_Delay(125);
 800a184:	207d      	movs	r0, #125	; 0x7d
 800a186:	f7f6 fc9f 	bl	8000ac8 <HAL_Delay>
		ChangeVerify();
 800a18a:	f7ff ffbb 	bl	800a104 <ChangeVerify>
		HAL_Delay(125);
 800a18e:	207d      	movs	r0, #125	; 0x7d
 800a190:	f7f6 fc9a 	bl	8000ac8 <HAL_Delay>
		break;
 800a194:	bf00      	nop
	}

}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <ChangeSpeed>:

void ChangeSpeed() {
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
	if (score >= 200 && score < 400) {
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <ChangeSpeed+0x38>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2bc7      	cmp	r3, #199	; 0xc7
 800a1aa:	dd08      	ble.n	800a1be <ChangeSpeed+0x1e>
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <ChangeSpeed+0x38>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1b4:	da03      	bge.n	800a1be <ChangeSpeed+0x1e>
		delaytime = 500;
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <ChangeSpeed+0x3c>)
 800a1b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a1bc:	601a      	str	r2, [r3, #0]
	}
	if (score >= 400) {
 800a1be:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <ChangeSpeed+0x38>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1c6:	db03      	blt.n	800a1d0 <ChangeSpeed+0x30>
		delaytime = 300;
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <ChangeSpeed+0x3c>)
 800a1ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a1ce:	601a      	str	r2, [r3, #0]
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr
 800a1d8:	20000418 	.word	0x20000418
 800a1dc:	2000000c 	.word	0x2000000c

0800a1e0 <EliminateLine>:

void EliminateLine() {
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	b08d      	sub	sp, #52	; 0x34
 800a1e4:	af02      	add	r7, sp, #8
	int i = 0, j = 0, k = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	623b      	str	r3, [r7, #32]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61fb      	str	r3, [r7, #28]
	int flag = 1;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	61bb      	str	r3, [r7, #24]
	int cflag = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	617b      	str	r3, [r7, #20]
	for (i = 19; i >= 0; i--) {
 800a1fa:	2313      	movs	r3, #19
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fe:	e05f      	b.n	800a2c0 <EliminateLine+0xe0>
		for (j = 0; j < 10; j++) {
 800a200:	2300      	movs	r3, #0
 800a202:	623b      	str	r3, [r7, #32]
 800a204:	e011      	b.n	800a22a <EliminateLine+0x4a>
			if (board[i][j] <= 1) {
 800a206:	4958      	ldr	r1, [pc, #352]	; (800a368 <EliminateLine+0x188>)
 800a208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	6a3a      	ldr	r2, [r7, #32]
 800a214:	4413      	add	r3, r2
 800a216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	dc02      	bgt.n	800a224 <EliminateLine+0x44>
				flag = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	61bb      	str	r3, [r7, #24]
				break;
 800a222:	e005      	b.n	800a230 <EliminateLine+0x50>
		for (j = 0; j < 10; j++) {
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	3301      	adds	r3, #1
 800a228:	623b      	str	r3, [r7, #32]
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	ddea      	ble.n	800a206 <EliminateLine+0x26>
			}
		}
		if (flag) {
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d03f      	beq.n	800a2b6 <EliminateLine+0xd6>
			for (k = i - 1; k >= 0; k--) {
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	3b01      	subs	r3, #1
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	e020      	b.n	800a280 <EliminateLine+0xa0>
				for (j = 0; j < 10; j++) {
 800a23e:	2300      	movs	r3, #0
 800a240:	623b      	str	r3, [r7, #32]
 800a242:	e017      	b.n	800a274 <EliminateLine+0x94>
					board[k + 1][j] = board[k][j];
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	4847      	ldr	r0, [pc, #284]	; (800a368 <EliminateLine+0x188>)
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	460b      	mov	r3, r1
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	440b      	add	r3, r1
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	6a39      	ldr	r1, [r7, #32]
 800a256:	440b      	add	r3, r1
 800a258:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800a25c:	4842      	ldr	r0, [pc, #264]	; (800a368 <EliminateLine+0x188>)
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	6a3a      	ldr	r2, [r7, #32]
 800a268:	4413      	add	r3, r2
 800a26a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				for (j = 0; j < 10; j++) {
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	3301      	adds	r3, #1
 800a272:	623b      	str	r3, [r7, #32]
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	2b09      	cmp	r3, #9
 800a278:	dde4      	ble.n	800a244 <EliminateLine+0x64>
			for (k = i - 1; k >= 0; k--) {
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	61fb      	str	r3, [r7, #28]
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dadb      	bge.n	800a23e <EliminateLine+0x5e>
				}
			}
			cflag = 1;
 800a286:	2301      	movs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
			score += 100;
 800a28a:	4b38      	ldr	r3, [pc, #224]	; (800a36c <EliminateLine+0x18c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3364      	adds	r3, #100	; 0x64
 800a290:	4a36      	ldr	r2, [pc, #216]	; (800a36c <EliminateLine+0x18c>)
 800a292:	6013      	str	r3, [r2, #0]
			ChangeSpeed();
 800a294:	f7ff ff84 	bl	800a1a0 <ChangeSpeed>
			LCD_ShowxNum(205, 140, score, 4, 12, 0);
 800a298:	4b34      	ldr	r3, [pc, #208]	; (800a36c <EliminateLine+0x18c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	461a      	mov	r2, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	230c      	movs	r3, #12
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	2304      	movs	r3, #4
 800a2a8:	218c      	movs	r1, #140	; 0x8c
 800a2aa:	20cd      	movs	r0, #205	; 0xcd
 800a2ac:	f7fe faf0 	bl	8008890 <LCD_ShowxNum>
			i++;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		flag = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	61bb      	str	r3, [r7, #24]
	for (i = 19; i >= 0; i--) {
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da9c      	bge.n	800a200 <EliminateLine+0x20>
	}
	if (cflag) {
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d048      	beq.n	800a35e <EliminateLine+0x17e>
		int row = 0, col = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
		for (row = 0; row < 20; row++) {
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	e03e      	b.n	800a358 <EliminateLine+0x178>
			for (col = 0; col < 10; col++) {
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e035      	b.n	800a34c <EliminateLine+0x16c>
				int x1 = col * cell_size + 5;
 800a2e0:	4b23      	ldr	r3, [pc, #140]	; (800a370 <EliminateLine+0x190>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ea:	3305      	adds	r3, #5
 800a2ec:	60bb      	str	r3, [r7, #8]
				int y1 = row * cell_size + 5;
 800a2ee:	4b20      	ldr	r3, [pc, #128]	; (800a370 <EliminateLine+0x190>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	fb02 f303 	mul.w	r3, r2, r3
 800a2f8:	3305      	adds	r3, #5
 800a2fa:	607b      	str	r3, [r7, #4]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	b298      	uxth	r0, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	b29c      	uxth	r4, r3
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	b29a      	uxth	r2, r3
 800a308:	4b19      	ldr	r3, [pc, #100]	; (800a370 <EliminateLine+0x190>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4413      	add	r3, r2
 800a310:	b29d      	uxth	r5, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	b29a      	uxth	r2, r3
 800a316:	4b16      	ldr	r3, [pc, #88]	; (800a370 <EliminateLine+0x190>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4413      	add	r3, r2
 800a31e:	b29e      	uxth	r6, r3
						colortable[board[row][col]]);
 800a320:	4911      	ldr	r1, [pc, #68]	; (800a368 <EliminateLine+0x188>)
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
				LCD_Fill(x1, y1, x1 + cell_size, y1 + cell_size,
 800a334:	4a0f      	ldr	r2, [pc, #60]	; (800a374 <EliminateLine+0x194>)
 800a336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4633      	mov	r3, r6
 800a33e:	462a      	mov	r2, r5
 800a340:	4621      	mov	r1, r4
 800a342:	f7fe f8a1 	bl	8008488 <LCD_Fill>
			for (col = 0; col < 10; col++) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b09      	cmp	r3, #9
 800a350:	ddc6      	ble.n	800a2e0 <EliminateLine+0x100>
		for (row = 0; row < 20; row++) {
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3301      	adds	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b13      	cmp	r3, #19
 800a35c:	ddbd      	ble.n	800a2da <EliminateLine+0xfa>
			}
		}
	}
}
 800a35e:	bf00      	nop
 800a360:	372c      	adds	r7, #44	; 0x2c
 800a362:	46bd      	mov	sp, r7
 800a364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a366:	bf00      	nop
 800a368:	200000b8 	.word	0x200000b8
 800a36c:	20000418 	.word	0x20000418
 800a370:	20000008 	.word	0x20000008
 800a374:	2000001c 	.word	0x2000001c

0800a378 <isGameOver>:

int isGameOver() {
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
	int i = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 10; i++) {
 800a382:	2300      	movs	r3, #0
 800a384:	607b      	str	r3, [r7, #4]
 800a386:	e00a      	b.n	800a39e <isGameOver+0x26>
		if (board[0][i] >= 2) {
 800a388:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <isGameOver+0x38>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a390:	2b01      	cmp	r3, #1
 800a392:	dd01      	ble.n	800a398 <isGameOver+0x20>
			return 1;
 800a394:	2301      	movs	r3, #1
 800a396:	e006      	b.n	800a3a6 <isGameOver+0x2e>
	for (i = 0; i < 10; i++) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3301      	adds	r3, #1
 800a39c:	607b      	str	r3, [r7, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b09      	cmp	r3, #9
 800a3a2:	ddf1      	ble.n	800a388 <isGameOver+0x10>
		}
	}
	return 0;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr
 800a3b0:	200000b8 	.word	0x200000b8

0800a3b4 <Bomb>:

void Bomb() {
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b089      	sub	sp, #36	; 0x24
 800a3b8:	af02      	add	r7, sp, #8
	int i = 0, j = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	613b      	str	r3, [r7, #16]
	for (i = cp_row - 1; i <= cp_row + 2; i++) {
 800a3c2:	4b68      	ldr	r3, [pc, #416]	; (800a564 <Bomb+0x1b0>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	e05f      	b.n	800a48c <Bomb+0xd8>
		for (j = cp_column - 1; j <= cp_column + 2; j++) {
 800a3cc:	4b66      	ldr	r3, [pc, #408]	; (800a568 <Bomb+0x1b4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	613b      	str	r3, [r7, #16]
 800a3d4:	e051      	b.n	800a47a <Bomb+0xc6>
			if (i >= 0 && i < 20 && j >= 0 && j < 10) {
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	db4b      	blt.n	800a474 <Bomb+0xc0>
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b13      	cmp	r3, #19
 800a3e0:	dc48      	bgt.n	800a474 <Bomb+0xc0>
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	db45      	blt.n	800a474 <Bomb+0xc0>
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	dc42      	bgt.n	800a474 <Bomb+0xc0>
				if (board[i][j] >= 2) {
 800a3ee:	495f      	ldr	r1, [pc, #380]	; (800a56c <Bomb+0x1b8>)
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a402:	2b01      	cmp	r3, #1
 800a404:	dd04      	ble.n	800a410 <Bomb+0x5c>
					score += 20;
 800a406:	4b5a      	ldr	r3, [pc, #360]	; (800a570 <Bomb+0x1bc>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3314      	adds	r3, #20
 800a40c:	4a58      	ldr	r2, [pc, #352]	; (800a570 <Bomb+0x1bc>)
 800a40e:	6013      	str	r3, [r2, #0]
				}
				board[i][j] = 0;
 800a410:	4956      	ldr	r1, [pc, #344]	; (800a56c <Bomb+0x1b8>)
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4413      	add	r3, r2
 800a420:	2200      	movs	r2, #0
 800a422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int x = j * cell_size + 5;
 800a426:	4b53      	ldr	r3, [pc, #332]	; (800a574 <Bomb+0x1c0>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	fb02 f303 	mul.w	r3, r2, r3
 800a430:	3305      	adds	r3, #5
 800a432:	607b      	str	r3, [r7, #4]
				int y = i * cell_size + 5;
 800a434:	4b4f      	ldr	r3, [pc, #316]	; (800a574 <Bomb+0x1c0>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	3305      	adds	r3, #5
 800a440:	603b      	str	r3, [r7, #0]
				LCD_Fill(x, y, x + cell_size, y + cell_size, RED);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	b298      	uxth	r0, r3
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	b299      	uxth	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	4b49      	ldr	r3, [pc, #292]	; (800a574 <Bomb+0x1c0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	4413      	add	r3, r2
 800a456:	b29c      	uxth	r4, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	4b45      	ldr	r3, [pc, #276]	; (800a574 <Bomb+0x1c0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	4413      	add	r3, r2
 800a464:	b29a      	uxth	r2, r3
 800a466:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4613      	mov	r3, r2
 800a46e:	4622      	mov	r2, r4
 800a470:	f7fe f80a 	bl	8008488 <LCD_Fill>
		for (j = cp_column - 1; j <= cp_column + 2; j++) {
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	3301      	adds	r3, #1
 800a478:	613b      	str	r3, [r7, #16]
 800a47a:	4b3b      	ldr	r3, [pc, #236]	; (800a568 <Bomb+0x1b4>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3302      	adds	r3, #2
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	dda7      	ble.n	800a3d6 <Bomb+0x22>
	for (i = cp_row - 1; i <= cp_row + 2; i++) {
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	3301      	adds	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	4b35      	ldr	r3, [pc, #212]	; (800a564 <Bomb+0x1b0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3302      	adds	r3, #2
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	429a      	cmp	r2, r3
 800a496:	dd99      	ble.n	800a3cc <Bomb+0x18>
			}
		}
	}
	HAL_Delay(500);
 800a498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a49c:	f7f6 fb14 	bl	8000ac8 <HAL_Delay>
	ChangeSpeed();
 800a4a0:	f7ff fe7e 	bl	800a1a0 <ChangeSpeed>
	LCD_ShowxNum(205, 140, score, 4, 12, 0);
 800a4a4:	4b32      	ldr	r3, [pc, #200]	; (800a570 <Bomb+0x1bc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2304      	movs	r3, #4
 800a4b4:	218c      	movs	r1, #140	; 0x8c
 800a4b6:	20cd      	movs	r0, #205	; 0xcd
 800a4b8:	f7fe f9ea 	bl	8008890 <LCD_ShowxNum>
	for (i = cp_row - 1; i <= cp_row + 2; i++) {
 800a4bc:	4b29      	ldr	r3, [pc, #164]	; (800a564 <Bomb+0x1b0>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e043      	b.n	800a54e <Bomb+0x19a>
		for (j = cp_column - 1; j <= cp_column + 2; j++) {
 800a4c6:	4b28      	ldr	r3, [pc, #160]	; (800a568 <Bomb+0x1b4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	e035      	b.n	800a53c <Bomb+0x188>
			if (i >= 0 && i < 20 && j >= 0 && j < 10) {
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	db2f      	blt.n	800a536 <Bomb+0x182>
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b13      	cmp	r3, #19
 800a4da:	dc2c      	bgt.n	800a536 <Bomb+0x182>
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	db29      	blt.n	800a536 <Bomb+0x182>
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b09      	cmp	r3, #9
 800a4e6:	dc26      	bgt.n	800a536 <Bomb+0x182>
				int x = j * cell_size + 5;
 800a4e8:	4b22      	ldr	r3, [pc, #136]	; (800a574 <Bomb+0x1c0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	fb02 f303 	mul.w	r3, r2, r3
 800a4f2:	3305      	adds	r3, #5
 800a4f4:	60fb      	str	r3, [r7, #12]
				int y = i * cell_size + 5;
 800a4f6:	4b1f      	ldr	r3, [pc, #124]	; (800a574 <Bomb+0x1c0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
 800a500:	3305      	adds	r3, #5
 800a502:	60bb      	str	r3, [r7, #8]
				LCD_Fill(x, y, x + cell_size, y + cell_size, WHITE);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	b298      	uxth	r0, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	b299      	uxth	r1, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	b29a      	uxth	r2, r3
 800a510:	4b18      	ldr	r3, [pc, #96]	; (800a574 <Bomb+0x1c0>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	4413      	add	r3, r2
 800a518:	b29c      	uxth	r4, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	4b15      	ldr	r3, [pc, #84]	; (800a574 <Bomb+0x1c0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	b29b      	uxth	r3, r3
 800a524:	4413      	add	r3, r2
 800a526:	b29a      	uxth	r2, r3
 800a528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	4613      	mov	r3, r2
 800a530:	4622      	mov	r2, r4
 800a532:	f7fd ffa9 	bl	8008488 <LCD_Fill>
		for (j = cp_column - 1; j <= cp_column + 2; j++) {
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	3301      	adds	r3, #1
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <Bomb+0x1b4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3302      	adds	r3, #2
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	429a      	cmp	r2, r3
 800a546:	ddc3      	ble.n	800a4d0 <Bomb+0x11c>
	for (i = cp_row - 1; i <= cp_row + 2; i++) {
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	3301      	adds	r3, #1
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <Bomb+0x1b0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3302      	adds	r3, #2
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	429a      	cmp	r2, r3
 800a558:	ddb5      	ble.n	800a4c6 <Bomb+0x112>
			}
		}
	}
}
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd90      	pop	{r4, r7, pc}
 800a562:	bf00      	nop
 800a564:	2000041c 	.word	0x2000041c
 800a568:	20000420 	.word	0x20000420
 800a56c:	200000b8 	.word	0x200000b8
 800a570:	20000418 	.word	0x20000418
 800a574:	20000008 	.word	0x20000008

0800a578 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a57e:	f7f6 fa41 	bl	8000a04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800a582:	f000 f891 	bl	800a6a8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	LCD_Init();
 800a586:	f7f9 ffef 	bl	8004568 <LCD_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a58a:	f7f8 fc23 	bl	8002dd4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800a58e:	f7f8 fba7 	bl	8002ce0 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800a592:	f000 f9cb 	bl	800a92c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 800a596:	483d      	ldr	r0, [pc, #244]	; (800a68c <main+0x114>)
 800a598:	f7f6 fba2 	bl	8000ce0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a59c:	f04f 31ff 	mov.w	r1, #4294967295
 800a5a0:	483a      	ldr	r0, [pc, #232]	; (800a68c <main+0x114>)
 800a5a2:	f7f6 fc4b 	bl	8000e3c <HAL_ADC_PollForConversion>
// Start screen
	LCD_Clear(BLUE);
 800a5a6:	201f      	movs	r0, #31
 800a5a8:	f7fd ff0c 	bl	80083c4 <LCD_Clear>
	POINT_COLOR = RED;
 800a5ac:	4b38      	ldr	r3, [pc, #224]	; (800a690 <main+0x118>)
 800a5ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800a5b2:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10, 65, 200, 24, 24, (uint8_t*) "Welcome to TETRIS");
 800a5b4:	4b37      	ldr	r3, [pc, #220]	; (800a694 <main+0x11c>)
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	2318      	movs	r3, #24
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	2318      	movs	r3, #24
 800a5be:	22c8      	movs	r2, #200	; 0xc8
 800a5c0:	2141      	movs	r1, #65	; 0x41
 800a5c2:	200a      	movs	r0, #10
 800a5c4:	f7fe f9fe 	bl	80089c4 <LCD_ShowString>
	LCD_ShowString(10, 125, 220, 16, 16, (uint8_t*) "Game starts in 3 seconds");
 800a5c8:	4b33      	ldr	r3, [pc, #204]	; (800a698 <main+0x120>)
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	22dc      	movs	r2, #220	; 0xdc
 800a5d4:	217d      	movs	r1, #125	; 0x7d
 800a5d6:	200a      	movs	r0, #10
 800a5d8:	f7fe f9f4 	bl	80089c4 <LCD_ShowString>
	HAL_Delay(3000);
 800a5dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a5e0:	f7f6 fa72 	bl	8000ac8 <HAL_Delay>

	uint16_t iSeed = HAL_ADC_GetValue(&hadc1);
 800a5e4:	4829      	ldr	r0, [pc, #164]	; (800a68c <main+0x114>)
 800a5e6:	f7f6 fd23 	bl	8001030 <HAL_ADC_GetValue>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	80fb      	strh	r3, [r7, #6]
	srand(iSeed); // random seed
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fa71 	bl	800aad8 <srand>
//Start Game
	DrawElements();
 800a5f6:	f7fe fa33 	bl	8008a60 <DrawElements>
	Initial();
 800a5fa:	f7ff f83b 	bl	8009674 <Initial>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (CanSqureDown()) {
 800a5fe:	f7ff f875 	bl	80096ec <CanSqureDown>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <main+0x9a>
			SqureDown();
 800a608:	f7ff f8ba 	bl	8009780 <SqureDown>
			DrawBlocks();
 800a60c:	f7fe fe32 	bl	8009274 <DrawBlocks>
 800a610:	e029      	b.n	800a666 <main+0xee>
		} else {
			if (id[0] == 9) {
 800a612:	4b22      	ldr	r3, [pc, #136]	; (800a69c <main+0x124>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b09      	cmp	r3, #9
 800a618:	d102      	bne.n	800a620 <main+0xa8>
				Bomb();
 800a61a:	f7ff fecb 	bl	800a3b4 <Bomb>
 800a61e:	e016      	b.n	800a64e <main+0xd6>
			} else {
				TurnDeath();
 800a620:	f7ff f8fe 	bl	8009820 <TurnDeath>
				EliminateLine();
 800a624:	f7ff fddc 	bl	800a1e0 <EliminateLine>
				if (isGameOver()) {
 800a628:	f7ff fea6 	bl	800a378 <isGameOver>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00d      	beq.n	800a64e <main+0xd6>
					LCD_Clear(BLUE);
 800a632:	201f      	movs	r0, #31
 800a634:	f7fd fec6 	bl	80083c4 <LCD_Clear>
					LCD_ShowString(10, 65, 200, 24, 24, (uint8_t*) "YOU DEAD");
 800a638:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <main+0x128>)
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	2318      	movs	r3, #24
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2318      	movs	r3, #24
 800a642:	22c8      	movs	r2, #200	; 0xc8
 800a644:	2141      	movs	r1, #65	; 0x41
 800a646:	200a      	movs	r0, #10
 800a648:	f7fe f9bc 	bl	80089c4 <LCD_ShowString>
					break;
 800a64c:	e018      	b.n	800a680 <main+0x108>
				}
			}
			BringNexttoBoard();
 800a64e:	f7fe fb97 	bl	8008d80 <BringNexttoBoard>
			Convert();
 800a652:	f7fe fb6f 	bl	8008d34 <Convert>
			DrawBlocks();
 800a656:	f7fe fe0d 	bl	8009274 <DrawBlocks>
			DrawNextBlock();
 800a65a:	f7fe fcd7 	bl	800900c <DrawNextBlock>
			CreateSquare();
 800a65e:	f7fe fa3b 	bl	8008ad8 <CreateSquare>
			DrawNewBornBlock();
 800a662:	f7fe fbc1 	bl	8008de8 <DrawNewBornBlock>
		}
		LCD_DrawRectangle(5, 2, 155, 305);
 800a666:	f240 1331 	movw	r3, #305	; 0x131
 800a66a:	229b      	movs	r2, #155	; 0x9b
 800a66c:	2102      	movs	r1, #2
 800a66e:	2005      	movs	r0, #5
 800a670:	f7fe f819 	bl	80086a6 <LCD_DrawRectangle>
		HAL_Delay(delaytime);
 800a674:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <main+0x12c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f6 fa25 	bl	8000ac8 <HAL_Delay>
		if (CanSqureDown()) {
 800a67e:	e7be      	b.n	800a5fe <main+0x86>
 800a680:	2300      	movs	r3, #0
	}
	/* USER CODE END 3 */
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20000464 	.word	0x20000464
 800a690:	200000b4 	.word	0x200000b4
 800a694:	0800acb8 	.word	0x0800acb8
 800a698:	0800accc 	.word	0x0800accc
 800a69c:	20000010 	.word	0x20000010
 800a6a0:	0800ace8 	.word	0x0800ace8
 800a6a4:	2000000c 	.word	0x2000000c

0800a6a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b096      	sub	sp, #88	; 0x58
 800a6ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800a6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a6b2:	2228      	movs	r2, #40	; 0x28
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fa06 	bl	800aac8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800a6bc:	f107 031c 	add.w	r3, r7, #28
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	605a      	str	r2, [r3, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
 800a6d4:	609a      	str	r2, [r3, #8]
 800a6d6:	60da      	str	r2, [r3, #12]
 800a6d8:	611a      	str	r2, [r3, #16]
 800a6da:	615a      	str	r2, [r3, #20]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a6e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a6f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a6f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800a6fc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800a6fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a702:	4618      	mov	r0, r3
 800a704:	f7f7 f9d4 	bl	8001ab0 <HAL_RCC_OscConfig>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <SystemClock_Config+0x6a>
		Error_Handler();
 800a70e:	f000 f828 	bl	800a762 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800a712:	230f      	movs	r3, #15
 800a714:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a716:	2302      	movs	r3, #2
 800a718:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a71a:	2300      	movs	r3, #0
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a722:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a724:	2300      	movs	r3, #0
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800a728:	f107 031c 	add.w	r3, r7, #28
 800a72c:	2102      	movs	r1, #2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f7 fc3e 	bl	8001fb0 <HAL_RCC_ClockConfig>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <SystemClock_Config+0x96>
		Error_Handler();
 800a73a:	f000 f812 	bl	800a762 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a73e:	2302      	movs	r3, #2
 800a740:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800a742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a746:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800a748:	1d3b      	adds	r3, r7, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f7 fdcc 	bl	80022e8 <HAL_RCCEx_PeriphCLKConfig>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <SystemClock_Config+0xb2>
		Error_Handler();
 800a756:	f000 f804 	bl	800a762 <Error_Handler>
	}
}
 800a75a:	bf00      	nop
 800a75c:	3758      	adds	r7, #88	; 0x58
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800a762:	b480      	push	{r7}
 800a764:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800a766:	bf00      	nop
 800a768:	46bd      	mov	sp, r7
 800a76a:	bc80      	pop	{r7}
 800a76c:	4770      	bx	lr
	...

0800a770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <HAL_MspInit+0x60>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	4a15      	ldr	r2, [pc, #84]	; (800a7d0 <HAL_MspInit+0x60>)
 800a77c:	f043 0301 	orr.w	r3, r3, #1
 800a780:	6193      	str	r3, [r2, #24]
 800a782:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <HAL_MspInit+0x60>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	60bb      	str	r3, [r7, #8]
 800a78c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a78e:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <HAL_MspInit+0x60>)
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <HAL_MspInit+0x60>)
 800a794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a798:	61d3      	str	r3, [r2, #28]
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <HAL_MspInit+0x60>)
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7a2:	607b      	str	r3, [r7, #4]
 800a7a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800a7a6:	2005      	movs	r0, #5
 800a7a8:	f7f6 fe9e 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a7ac:	4b09      	ldr	r3, [pc, #36]	; (800a7d4 <HAL_MspInit+0x64>)
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	4a04      	ldr	r2, [pc, #16]	; (800a7d4 <HAL_MspInit+0x64>)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	40010000 	.word	0x40010000

0800a7d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a7dc:	bf00      	nop
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bc80      	pop	{r7}
 800a7e2:	4770      	bx	lr

0800a7e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a7e8:	e7fe      	b.n	800a7e8 <HardFault_Handler+0x4>

0800a7ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a7ee:	e7fe      	b.n	800a7ee <MemManage_Handler+0x4>

0800a7f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7f4:	e7fe      	b.n	800a7f4 <BusFault_Handler+0x4>

0800a7f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7fa:	e7fe      	b.n	800a7fa <UsageFault_Handler+0x4>

0800a7fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a800:	bf00      	nop
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr

0800a808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a80c:	bf00      	nop
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a814:	b480      	push	{r7}
 800a816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a818:	bf00      	nop
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bc80      	pop	{r7}
 800a81e:	4770      	bx	lr

0800a820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a824:	f7f6 f934 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a828:	bf00      	nop
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a830:	2001      	movs	r0, #1
 800a832:	f7f7 f925 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}

0800a83a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800a83e:	2020      	movs	r0, #32
 800a840:	f7f7 f91e 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a844:	bf00      	nop
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a84c:	4802      	ldr	r0, [pc, #8]	; (800a858 <USART1_IRQHandler+0x10>)
 800a84e:	f7f7 ff37 	bl	80026c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a852:	bf00      	nop
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	200004a4 	.word	0x200004a4

0800a85c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800a860:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a864:	f7f7 f90c 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a868:	bf00      	nop
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a874:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <_sbrk+0x50>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <_sbrk+0x16>
		heap_end = &end;
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <_sbrk+0x50>)
 800a87e:	4a10      	ldr	r2, [pc, #64]	; (800a8c0 <_sbrk+0x54>)
 800a880:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a882:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <_sbrk+0x50>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a888:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <_sbrk+0x50>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4413      	add	r3, r2
 800a890:	466a      	mov	r2, sp
 800a892:	4293      	cmp	r3, r2
 800a894:	d907      	bls.n	800a8a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a896:	f000 f8ed 	bl	800aa74 <__errno>
 800a89a:	4602      	mov	r2, r0
 800a89c:	230c      	movs	r3, #12
 800a89e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a4:	e006      	b.n	800a8b4 <_sbrk+0x48>
	}

	heap_end += incr;
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <_sbrk+0x50>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	4a03      	ldr	r2, [pc, #12]	; (800a8bc <_sbrk+0x50>)
 800a8b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20000454 	.word	0x20000454
 800a8c0:	200004e8 	.word	0x200004e8

0800a8c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a8c8:	4b15      	ldr	r3, [pc, #84]	; (800a920 <SystemInit+0x5c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a14      	ldr	r2, [pc, #80]	; (800a920 <SystemInit+0x5c>)
 800a8ce:	f043 0301 	orr.w	r3, r3, #1
 800a8d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800a8d4:	4b12      	ldr	r3, [pc, #72]	; (800a920 <SystemInit+0x5c>)
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	4911      	ldr	r1, [pc, #68]	; (800a920 <SystemInit+0x5c>)
 800a8da:	4b12      	ldr	r3, [pc, #72]	; (800a924 <SystemInit+0x60>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <SystemInit+0x5c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a0e      	ldr	r2, [pc, #56]	; (800a920 <SystemInit+0x5c>)
 800a8e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <SystemInit+0x5c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <SystemInit+0x5c>)
 800a8f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a8fc:	4b08      	ldr	r3, [pc, #32]	; (800a920 <SystemInit+0x5c>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	4a07      	ldr	r2, [pc, #28]	; (800a920 <SystemInit+0x5c>)
 800a902:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a906:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <SystemInit+0x5c>)
 800a90a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a90e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <SystemInit+0x64>)
 800a912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a916:	609a      	str	r2, [r3, #8]
#endif 
}
 800a918:	bf00      	nop
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bc80      	pop	{r7}
 800a91e:	4770      	bx	lr
 800a920:	40021000 	.word	0x40021000
 800a924:	f8ff0000 	.word	0xf8ff0000
 800a928:	e000ed00 	.word	0xe000ed00

0800a92c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a930:	4b11      	ldr	r3, [pc, #68]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a932:	4a12      	ldr	r2, [pc, #72]	; (800a97c <MX_USART1_UART_Init+0x50>)
 800a934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a936:	4b10      	ldr	r3, [pc, #64]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a93c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a93e:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a940:	2200      	movs	r2, #0
 800a942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a946:	2200      	movs	r2, #0
 800a948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a950:	4b09      	ldr	r3, [pc, #36]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a952:	220c      	movs	r2, #12
 800a954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a956:	4b08      	ldr	r3, [pc, #32]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a958:	2200      	movs	r2, #0
 800a95a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a95e:	2200      	movs	r2, #0
 800a960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <MX_USART1_UART_Init+0x4c>)
 800a964:	f7f7 fe5e 	bl	8002624 <HAL_UART_Init>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a96e:	f7ff fef8 	bl	800a762 <Error_Handler>
  }

}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200004a4 	.word	0x200004a4
 800a97c:	40013800 	.word	0x40013800

0800a980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	605a      	str	r2, [r3, #4]
 800a992:	609a      	str	r2, [r3, #8]
 800a994:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a20      	ldr	r2, [pc, #128]	; (800aa1c <HAL_UART_MspInit+0x9c>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d139      	bne.n	800aa14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a9a0:	4b1f      	ldr	r3, [pc, #124]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	4a1e      	ldr	r2, [pc, #120]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9aa:	6193      	str	r3, [r2, #24]
 800a9ac:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b8:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	4a18      	ldr	r2, [pc, #96]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9be:	f043 0304 	orr.w	r3, r3, #4
 800a9c2:	6193      	str	r3, [r2, #24]
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <HAL_UART_MspInit+0xa0>)
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	60bb      	str	r3, [r7, #8]
 800a9ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9de:	f107 0310 	add.w	r3, r7, #16
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	480f      	ldr	r0, [pc, #60]	; (800aa24 <HAL_UART_MspInit+0xa4>)
 800a9e6:	f7f6 fec9 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f8:	f107 0310 	add.w	r3, r7, #16
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4809      	ldr	r0, [pc, #36]	; (800aa24 <HAL_UART_MspInit+0xa4>)
 800aa00:	f7f6 febc 	bl	800177c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	2025      	movs	r0, #37	; 0x25
 800aa0a:	f7f6 fd78 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aa0e:	2025      	movs	r0, #37	; 0x25
 800aa10:	f7f6 fd91 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800aa14:	bf00      	nop
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	40013800 	.word	0x40013800
 800aa20:	40021000 	.word	0x40021000
 800aa24:	40010800 	.word	0x40010800

0800aa28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800aa28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800aa2a:	e003      	b.n	800aa34 <LoopCopyDataInit>

0800aa2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800aa2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800aa30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800aa32:	3104      	adds	r1, #4

0800aa34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800aa34:	480a      	ldr	r0, [pc, #40]	; (800aa60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800aa38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800aa3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800aa3c:	d3f6      	bcc.n	800aa2c <CopyDataInit>
  ldr r2, =_sbss
 800aa3e:	4a0a      	ldr	r2, [pc, #40]	; (800aa68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800aa40:	e002      	b.n	800aa48 <LoopFillZerobss>

0800aa42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800aa42:	2300      	movs	r3, #0
  str r3, [r2], #4
 800aa44:	f842 3b04 	str.w	r3, [r2], #4

0800aa48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800aa48:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800aa4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800aa4c:	d3f9      	bcc.n	800aa42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aa4e:	f7ff ff39 	bl	800a8c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aa52:	f000 f815 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800aa56:	f7ff fd8f 	bl	800a578 <main>
  bx lr
 800aa5a:	4770      	bx	lr
  ldr r3, =_sidata
 800aa5c:	0800c4d4 	.word	0x0800c4d4
  ldr r0, =_sdata
 800aa60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800aa64:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 800aa68:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 800aa6c:	200004e8 	.word	0x200004e8

0800aa70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800aa70:	e7fe      	b.n	800aa70 <ADC1_2_IRQHandler>
	...

0800aa74 <__errno>:
 800aa74:	4b01      	ldr	r3, [pc, #4]	; (800aa7c <__errno+0x8>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20000034 	.word	0x20000034

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	2500      	movs	r5, #0
 800aa84:	4e0c      	ldr	r6, [pc, #48]	; (800aab8 <__libc_init_array+0x38>)
 800aa86:	4c0d      	ldr	r4, [pc, #52]	; (800aabc <__libc_init_array+0x3c>)
 800aa88:	1ba4      	subs	r4, r4, r6
 800aa8a:	10a4      	asrs	r4, r4, #2
 800aa8c:	42a5      	cmp	r5, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	f000 f8ee 	bl	800ac70 <_init>
 800aa94:	2500      	movs	r5, #0
 800aa96:	4e0a      	ldr	r6, [pc, #40]	; (800aac0 <__libc_init_array+0x40>)
 800aa98:	4c0a      	ldr	r4, [pc, #40]	; (800aac4 <__libc_init_array+0x44>)
 800aa9a:	1ba4      	subs	r4, r4, r6
 800aa9c:	10a4      	asrs	r4, r4, #2
 800aa9e:	42a5      	cmp	r5, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aaa8:	4798      	blx	r3
 800aaaa:	3501      	adds	r5, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aab2:	4798      	blx	r3
 800aab4:	3501      	adds	r5, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800c4cc 	.word	0x0800c4cc
 800aabc:	0800c4cc 	.word	0x0800c4cc
 800aac0:	0800c4cc 	.word	0x0800c4cc
 800aac4:	0800c4d0 	.word	0x0800c4d0

0800aac8 <memset>:
 800aac8:	4603      	mov	r3, r0
 800aaca:	4402      	add	r2, r0
 800aacc:	4293      	cmp	r3, r2
 800aace:	d100      	bne.n	800aad2 <memset+0xa>
 800aad0:	4770      	bx	lr
 800aad2:	f803 1b01 	strb.w	r1, [r3], #1
 800aad6:	e7f9      	b.n	800aacc <memset+0x4>

0800aad8 <srand>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <srand+0x38>)
 800aadc:	4605      	mov	r5, r0
 800aade:	681c      	ldr	r4, [r3, #0]
 800aae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aae2:	b97b      	cbnz	r3, 800ab04 <srand+0x2c>
 800aae4:	2018      	movs	r0, #24
 800aae6:	f000 f84f 	bl	800ab88 <malloc>
 800aaea:	4a0a      	ldr	r2, [pc, #40]	; (800ab14 <srand+0x3c>)
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <srand+0x40>)
 800aaee:	63a0      	str	r0, [r4, #56]	; 0x38
 800aaf0:	e9c0 2300 	strd	r2, r3, [r0]
 800aaf4:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <srand+0x44>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	6083      	str	r3, [r0, #8]
 800aafa:	230b      	movs	r3, #11
 800aafc:	8183      	strh	r3, [r0, #12]
 800aafe:	2300      	movs	r3, #0
 800ab00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ab04:	2200      	movs	r2, #0
 800ab06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab08:	611d      	str	r5, [r3, #16]
 800ab0a:	615a      	str	r2, [r3, #20]
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000034 	.word	0x20000034
 800ab14:	abcd330e 	.word	0xabcd330e
 800ab18:	e66d1234 	.word	0xe66d1234
 800ab1c:	0005deec 	.word	0x0005deec

0800ab20 <rand>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <rand+0x50>)
 800ab24:	681c      	ldr	r4, [r3, #0]
 800ab26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab28:	b97b      	cbnz	r3, 800ab4a <rand+0x2a>
 800ab2a:	2018      	movs	r0, #24
 800ab2c:	f000 f82c 	bl	800ab88 <malloc>
 800ab30:	4a10      	ldr	r2, [pc, #64]	; (800ab74 <rand+0x54>)
 800ab32:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <rand+0x58>)
 800ab34:	63a0      	str	r0, [r4, #56]	; 0x38
 800ab36:	e9c0 2300 	strd	r2, r3, [r0]
 800ab3a:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <rand+0x5c>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	6083      	str	r3, [r0, #8]
 800ab40:	230b      	movs	r3, #11
 800ab42:	8183      	strh	r3, [r0, #12]
 800ab44:	2300      	movs	r3, #0
 800ab46:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ab4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab4c:	480c      	ldr	r0, [pc, #48]	; (800ab80 <rand+0x60>)
 800ab4e:	690a      	ldr	r2, [r1, #16]
 800ab50:	694b      	ldr	r3, [r1, #20]
 800ab52:	4350      	muls	r0, r2
 800ab54:	4c0b      	ldr	r4, [pc, #44]	; (800ab84 <rand+0x64>)
 800ab56:	fb04 0003 	mla	r0, r4, r3, r0
 800ab5a:	fba2 2304 	umull	r2, r3, r2, r4
 800ab5e:	4403      	add	r3, r0
 800ab60:	1c54      	adds	r4, r2, #1
 800ab62:	f143 0500 	adc.w	r5, r3, #0
 800ab66:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800ab6a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20000034 	.word	0x20000034
 800ab74:	abcd330e 	.word	0xabcd330e
 800ab78:	e66d1234 	.word	0xe66d1234
 800ab7c:	0005deec 	.word	0x0005deec
 800ab80:	5851f42d 	.word	0x5851f42d
 800ab84:	4c957f2d 	.word	0x4c957f2d

0800ab88 <malloc>:
 800ab88:	4b02      	ldr	r3, [pc, #8]	; (800ab94 <malloc+0xc>)
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	f000 b803 	b.w	800ab98 <_malloc_r>
 800ab92:	bf00      	nop
 800ab94:	20000034 	.word	0x20000034

0800ab98 <_malloc_r>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	1ccd      	adds	r5, r1, #3
 800ab9c:	f025 0503 	bic.w	r5, r5, #3
 800aba0:	3508      	adds	r5, #8
 800aba2:	2d0c      	cmp	r5, #12
 800aba4:	bf38      	it	cc
 800aba6:	250c      	movcc	r5, #12
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	4606      	mov	r6, r0
 800abac:	db01      	blt.n	800abb2 <_malloc_r+0x1a>
 800abae:	42a9      	cmp	r1, r5
 800abb0:	d903      	bls.n	800abba <_malloc_r+0x22>
 800abb2:	230c      	movs	r3, #12
 800abb4:	6033      	str	r3, [r6, #0]
 800abb6:	2000      	movs	r0, #0
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	f000 f857 	bl	800ac6c <__malloc_lock>
 800abbe:	4a21      	ldr	r2, [pc, #132]	; (800ac44 <_malloc_r+0xac>)
 800abc0:	6814      	ldr	r4, [r2, #0]
 800abc2:	4621      	mov	r1, r4
 800abc4:	b991      	cbnz	r1, 800abec <_malloc_r+0x54>
 800abc6:	4c20      	ldr	r4, [pc, #128]	; (800ac48 <_malloc_r+0xb0>)
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	b91b      	cbnz	r3, 800abd4 <_malloc_r+0x3c>
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f83d 	bl	800ac4c <_sbrk_r>
 800abd2:	6020      	str	r0, [r4, #0]
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f838 	bl	800ac4c <_sbrk_r>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d124      	bne.n	800ac2a <_malloc_r+0x92>
 800abe0:	230c      	movs	r3, #12
 800abe2:	4630      	mov	r0, r6
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	f000 f842 	bl	800ac6e <__malloc_unlock>
 800abea:	e7e4      	b.n	800abb6 <_malloc_r+0x1e>
 800abec:	680b      	ldr	r3, [r1, #0]
 800abee:	1b5b      	subs	r3, r3, r5
 800abf0:	d418      	bmi.n	800ac24 <_malloc_r+0x8c>
 800abf2:	2b0b      	cmp	r3, #11
 800abf4:	d90f      	bls.n	800ac16 <_malloc_r+0x7e>
 800abf6:	600b      	str	r3, [r1, #0]
 800abf8:	18cc      	adds	r4, r1, r3
 800abfa:	50cd      	str	r5, [r1, r3]
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 f836 	bl	800ac6e <__malloc_unlock>
 800ac02:	f104 000b 	add.w	r0, r4, #11
 800ac06:	1d23      	adds	r3, r4, #4
 800ac08:	f020 0007 	bic.w	r0, r0, #7
 800ac0c:	1ac3      	subs	r3, r0, r3
 800ac0e:	d0d3      	beq.n	800abb8 <_malloc_r+0x20>
 800ac10:	425a      	negs	r2, r3
 800ac12:	50e2      	str	r2, [r4, r3]
 800ac14:	e7d0      	b.n	800abb8 <_malloc_r+0x20>
 800ac16:	684b      	ldr	r3, [r1, #4]
 800ac18:	428c      	cmp	r4, r1
 800ac1a:	bf16      	itet	ne
 800ac1c:	6063      	strne	r3, [r4, #4]
 800ac1e:	6013      	streq	r3, [r2, #0]
 800ac20:	460c      	movne	r4, r1
 800ac22:	e7eb      	b.n	800abfc <_malloc_r+0x64>
 800ac24:	460c      	mov	r4, r1
 800ac26:	6849      	ldr	r1, [r1, #4]
 800ac28:	e7cc      	b.n	800abc4 <_malloc_r+0x2c>
 800ac2a:	1cc4      	adds	r4, r0, #3
 800ac2c:	f024 0403 	bic.w	r4, r4, #3
 800ac30:	42a0      	cmp	r0, r4
 800ac32:	d005      	beq.n	800ac40 <_malloc_r+0xa8>
 800ac34:	1a21      	subs	r1, r4, r0
 800ac36:	4630      	mov	r0, r6
 800ac38:	f000 f808 	bl	800ac4c <_sbrk_r>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d0cf      	beq.n	800abe0 <_malloc_r+0x48>
 800ac40:	6025      	str	r5, [r4, #0]
 800ac42:	e7db      	b.n	800abfc <_malloc_r+0x64>
 800ac44:	20000458 	.word	0x20000458
 800ac48:	2000045c 	.word	0x2000045c

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4c05      	ldr	r4, [pc, #20]	; (800ac68 <_sbrk_r+0x1c>)
 800ac52:	4605      	mov	r5, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	f7ff fe08 	bl	800a86c <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	200004e4 	.word	0x200004e4

0800ac6c <__malloc_lock>:
 800ac6c:	4770      	bx	lr

0800ac6e <__malloc_unlock>:
 800ac6e:	4770      	bx	lr

0800ac70 <_init>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	bf00      	nop
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr

0800ac7c <_fini>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	bf00      	nop
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr
